// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                      String              @id @default(cuid())
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  firstName               String
  lastName                String
  profilePicture          String?
  email                   String              @unique
  password                String
  resetToken              String?             @unique
  resetTokenExpiry        String?
  isActive                Boolean             @default(true)
  isVerified              Boolean             @default(false)
  role                    String              @default("ADMIN")
  verificationToken       String?             @unique
  verificationTokenExpiry String?
  projectUsers            ProjectUsers[]
  organisations           Organisation[]
  projects                Project[]
  organisationUsers       OrganisationUsers[]
  createdLogs             Log[]               @relation("CreatedLogs")
  updatedLogs             Log[]               @relation("UpdatedLogs")
}

model Organisation {
  id                  String                  @id @default(cuid())
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  user                User?                   @relation(fields: [createdById], references: [id])
  createdById         String
  name                String
  isActive            Boolean                 @default(false)
  organisationUsers   OrganisationUsers[]
  releaseTags         ReleaseTag[]
  projects            Project[]
}

model OrganisationUsers {
  organisation    Organisation                @relation(fields: [organisationId], references: [id])
  organisationId  String
  user            User                        @relation(fields: [userId], references: [id])
  userId          String

  @@id([organisationId,userId])
}

model Project {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String
  logs            Log[]
  User            User?             @relation(fields: [createdById], references: [id])
  createdById     String?
  isActive        Boolean           @default(false)
  organisation    Organisation      @relation(fields: [organisationId], references: [id])
  organisationId  String            
  projectUsers    ProjectUsers[]
}

model ProjectUsers {
  project     Project     @relation(fields: [projectId], references: [id])
  projectId   String
  user        User        @relation(fields: [userId], references: [id])
  userId      String

  @@id([userId,projectId])
}

model Log {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  title             String
  description       String
  releaseVersion    String
  releaseCategories String[]
  releaseTags       ReleaseTagOnLogs[]
  project           Project?           @relation(fields: [projectId], references: [id])
  projectId         String?
  scheduledTime     DateTime?
  status            String
  createdBy         User               @relation("CreatedLogs", fields: [createdById], references: [id])
  createdById       String
  updatedBy         User               @relation("UpdatedLogs", fields: [updatedById], references: [id])
  updatedById       String
  deletedAt         DateTime?
  archivedAt        DateTime?
}

model ReleaseTag {
  id             Int                @id @default(autoincrement())
  name           String
  code           String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organisation   Organisation?      @relation(fields: [organisationId], references: [id])
  organisationId String
  logs           ReleaseTagOnLogs[]
}

model ReleaseTagOnLogs {
  log          Log        @relation(fields: [logId], references: [id])
  logId        String
  releaseTag   ReleaseTag @relation(fields: [releaseTagId], references: [id])
  releaseTagId Int

  @@id([logId, releaseTagId])
}
