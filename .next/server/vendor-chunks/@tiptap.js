"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tiptap";
exports.ids = ["vendor-chunks/@tiptap"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tiptap/core/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@tiptap/core/dist/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandManager: () => (/* binding */ CommandManager),\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   Extension: () => (/* binding */ Extension),\n/* harmony export */   InputRule: () => (/* binding */ InputRule),\n/* harmony export */   Mark: () => (/* binding */ Mark),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   NodeView: () => (/* binding */ NodeView),\n/* harmony export */   PasteRule: () => (/* binding */ PasteRule),\n/* harmony export */   Tracker: () => (/* binding */ Tracker),\n/* harmony export */   callOrReturn: () => (/* binding */ callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* binding */ combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* binding */ createChainableState),\n/* harmony export */   createDocument: () => (/* binding */ createDocument),\n/* harmony export */   createNodeFromContent: () => (/* binding */ createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* binding */ createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* binding */ defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* binding */ deleteProps),\n/* harmony export */   elementFromString: () => (/* binding */ elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* binding */ escapeForRegEx),\n/* harmony export */   extensions: () => (/* binding */ extensions),\n/* harmony export */   findChildren: () => (/* binding */ findChildren),\n/* harmony export */   findChildrenInRange: () => (/* binding */ findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* binding */ findDuplicates),\n/* harmony export */   findParentNode: () => (/* binding */ findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* binding */ findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   generateHTML: () => (/* binding */ generateHTML),\n/* harmony export */   generateJSON: () => (/* binding */ generateJSON),\n/* harmony export */   generateText: () => (/* binding */ generateText),\n/* harmony export */   getAttributes: () => (/* binding */ getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* binding */ getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* binding */ getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* binding */ getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* binding */ getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* binding */ getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* binding */ getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* binding */ getMarkRange),\n/* harmony export */   getMarkType: () => (/* binding */ getMarkType),\n/* harmony export */   getMarksBetween: () => (/* binding */ getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* binding */ getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* binding */ getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* binding */ getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* binding */ getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* binding */ getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* binding */ getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* binding */ getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* binding */ getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* binding */ getSplittedAttributes),\n/* harmony export */   getText: () => (/* binding */ getText),\n/* harmony export */   getTextBetween: () => (/* binding */ getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* binding */ getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* binding */ getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* binding */ injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* binding */ inputRulesPlugin),\n/* harmony export */   isActive: () => (/* binding */ isActive),\n/* harmony export */   isAtEndOfNode: () => (/* binding */ isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* binding */ isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* binding */ isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* binding */ isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isList: () => (/* binding */ isList),\n/* harmony export */   isMacOS: () => (/* binding */ isMacOS),\n/* harmony export */   isMarkActive: () => (/* binding */ isMarkActive),\n/* harmony export */   isNodeActive: () => (/* binding */ isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* binding */ isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* binding */ isNodeSelection),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isTextSelection: () => (/* binding */ isTextSelection),\n/* harmony export */   isiOS: () => (/* binding */ isiOS),\n/* harmony export */   markInputRule: () => (/* binding */ markInputRule),\n/* harmony export */   markPasteRule: () => (/* binding */ markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* binding */ mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   minMax: () => (/* binding */ minMax),\n/* harmony export */   nodeInputRule: () => (/* binding */ nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* binding */ nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* binding */ objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* binding */ pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* binding */ posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* binding */ removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* binding */ resolveFocusPosition),\n/* harmony export */   selectionToInsertionEnd: () => (/* binding */ selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* binding */ splitExtensions),\n/* harmony export */   textInputRule: () => (/* binding */ textInputRule),\n/* harmony export */   textPasteRule: () => (/* binding */ textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* binding */ textblockTypeInputRule),\n/* harmony export */   wrappingInputRule: () => (/* binding */ wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/view */ \"(ssr)/./node_modules/@tiptap/pm/view/dist/index.js\");\n/* harmony import */ var _tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/pm/keymap */ \"(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js\");\n/* harmony import */ var _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/pm/model */ \"(ssr)/./node_modules/@tiptap/pm/model/dist/index.js\");\n/* harmony import */ var _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/pm/transform */ \"(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js\");\n/* harmony import */ var _tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/pm/commands */ \"(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js\");\n/* harmony import */ var _tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/pm/schema-list */ \"(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js\");\n\n\n\n\n\n\n\nfunction createChainableState(config) {\n    const { state, transaction } = config;\n    let { selection } = transaction;\n    let { doc } = transaction;\n    let { storedMarks } = transaction;\n    return {\n        ...state,\n        apply: state.apply.bind(state),\n        applyTransaction: state.applyTransaction.bind(state),\n        filterTransaction: state.filterTransaction,\n        plugins: state.plugins,\n        schema: state.schema,\n        reconfigure: state.reconfigure.bind(state),\n        toJSON: state.toJSON.bind(state),\n        get storedMarks () {\n            return storedMarks;\n        },\n        get selection () {\n            return selection;\n        },\n        get doc () {\n            return doc;\n        },\n        get tr () {\n            selection = transaction.selection;\n            doc = transaction.doc;\n            storedMarks = transaction.storedMarks;\n            return transaction;\n        }\n    };\n}\nclass CommandManager {\n    constructor(props){\n        this.editor = props.editor;\n        this.rawCommands = this.editor.extensionManager.commands;\n        this.customState = props.state;\n    }\n    get hasCustomState() {\n        return !!this.customState;\n    }\n    get state() {\n        return this.customState || this.editor.state;\n    }\n    get commands() {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const { tr } = state;\n        const props = this.buildProps(tr);\n        return Object.fromEntries(Object.entries(rawCommands).map(([name, command])=>{\n            const method = (...args)=>{\n                const callback = command(...args)(props);\n                if (!tr.getMeta(\"preventDispatch\") && !this.hasCustomState) {\n                    view.dispatch(tr);\n                }\n                return callback;\n            };\n            return [\n                name,\n                method\n            ];\n        }));\n    }\n    get chain() {\n        return ()=>this.createChain();\n    }\n    get can() {\n        return ()=>this.createCan();\n    }\n    createChain(startTr, shouldDispatch = true) {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const callbacks = [];\n        const hasStartTransaction = !!startTr;\n        const tr = startTr || state.tr;\n        const run = ()=>{\n            if (!hasStartTransaction && shouldDispatch && !tr.getMeta(\"preventDispatch\") && !this.hasCustomState) {\n                view.dispatch(tr);\n            }\n            return callbacks.every((callback)=>callback === true);\n        };\n        const chain = {\n            ...Object.fromEntries(Object.entries(rawCommands).map(([name, command])=>{\n                const chainedCommand = (...args)=>{\n                    const props = this.buildProps(tr, shouldDispatch);\n                    const callback = command(...args)(props);\n                    callbacks.push(callback);\n                    return chain;\n                };\n                return [\n                    name,\n                    chainedCommand\n                ];\n            })),\n            run\n        };\n        return chain;\n    }\n    createCan(startTr) {\n        const { rawCommands, state } = this;\n        const dispatch = false;\n        const tr = startTr || state.tr;\n        const props = this.buildProps(tr, dispatch);\n        const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command])=>{\n            return [\n                name,\n                (...args)=>command(...args)({\n                        ...props,\n                        dispatch: undefined\n                    })\n            ];\n        }));\n        return {\n            ...formattedCommands,\n            chain: ()=>this.createChain(tr, dispatch)\n        };\n    }\n    buildProps(tr, shouldDispatch = true) {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const props = {\n            tr,\n            editor,\n            view,\n            state: createChainableState({\n                state,\n                transaction: tr\n            }),\n            dispatch: shouldDispatch ? ()=>undefined : undefined,\n            chain: ()=>this.createChain(tr, shouldDispatch),\n            can: ()=>this.createCan(tr),\n            get commands () {\n                return Object.fromEntries(Object.entries(rawCommands).map(([name, command])=>{\n                    return [\n                        name,\n                        (...args)=>command(...args)(props)\n                    ];\n                }));\n            }\n        };\n        return props;\n    }\n}\nclass EventEmitter {\n    constructor(){\n        this.callbacks = {};\n    }\n    on(event, fn) {\n        if (!this.callbacks[event]) {\n            this.callbacks[event] = [];\n        }\n        this.callbacks[event].push(fn);\n        return this;\n    }\n    emit(event, ...args) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            callbacks.forEach((callback)=>callback.apply(this, args));\n        }\n        return this;\n    }\n    off(event, fn) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            if (fn) {\n                this.callbacks[event] = callbacks.filter((callback)=>callback !== fn);\n            } else {\n                delete this.callbacks[event];\n            }\n        }\n        return this;\n    }\n    removeAllListeners() {\n        this.callbacks = {};\n    }\n}\nfunction getExtensionField(extension, field, context) {\n    if (extension.config[field] === undefined && extension.parent) {\n        return getExtensionField(extension.parent, field, context);\n    }\n    if (typeof extension.config[field] === \"function\") {\n        const value = extension.config[field].bind({\n            ...context,\n            parent: extension.parent ? getExtensionField(extension.parent, field, context) : null\n        });\n        return value;\n    }\n    return extension.config[field];\n}\nfunction splitExtensions(extensions) {\n    const baseExtensions = extensions.filter((extension)=>extension.type === \"extension\");\n    const nodeExtensions = extensions.filter((extension)=>extension.type === \"node\");\n    const markExtensions = extensions.filter((extension)=>extension.type === \"mark\");\n    return {\n        baseExtensions,\n        nodeExtensions,\n        markExtensions\n    };\n}\n/**\r\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\r\n * @param extensions List of extensions\r\n */ function getAttributesFromExtensions(extensions) {\n    const extensionAttributes = [];\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\n    const nodeAndMarkExtensions = [\n        ...nodeExtensions,\n        ...markExtensions\n    ];\n    const defaultAttribute = {\n        default: null,\n        rendered: true,\n        renderHTML: null,\n        parseHTML: null,\n        keepOnSplit: true,\n        isRequired: false\n    };\n    extensions.forEach((extension)=>{\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage\n        };\n        const addGlobalAttributes = getExtensionField(extension, \"addGlobalAttributes\", context);\n        if (!addGlobalAttributes) {\n            return;\n        }\n        // TODO: remove `as GlobalAttributes`\n        const globalAttributes = addGlobalAttributes();\n        globalAttributes.forEach((globalAttribute)=>{\n            globalAttribute.types.forEach((type)=>{\n                Object.entries(globalAttribute.attributes).forEach(([name, attribute])=>{\n                    extensionAttributes.push({\n                        type,\n                        name,\n                        attribute: {\n                            ...defaultAttribute,\n                            ...attribute\n                        }\n                    });\n                });\n            });\n        });\n    });\n    nodeAndMarkExtensions.forEach((extension)=>{\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage\n        };\n        const addAttributes = getExtensionField(extension, \"addAttributes\", context);\n        if (!addAttributes) {\n            return;\n        }\n        // TODO: remove `as Attributes`\n        const attributes = addAttributes();\n        Object.entries(attributes).forEach(([name, attribute])=>{\n            const mergedAttr = {\n                ...defaultAttribute,\n                ...attribute\n            };\n            if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === \"function\") {\n                mergedAttr.default = mergedAttr.default();\n            }\n            if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === undefined) {\n                delete mergedAttr.default;\n            }\n            extensionAttributes.push({\n                type: extension.name,\n                name,\n                attribute: mergedAttr\n            });\n        });\n    });\n    return extensionAttributes;\n}\nfunction getNodeType(nameOrType, schema) {\n    if (typeof nameOrType === \"string\") {\n        if (!schema.nodes[nameOrType]) {\n            throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n        }\n        return schema.nodes[nameOrType];\n    }\n    return nameOrType;\n}\nfunction mergeAttributes(...objects) {\n    return objects.filter((item)=>!!item).reduce((items, item)=>{\n        const mergedAttributes = {\n            ...items\n        };\n        Object.entries(item).forEach(([key, value])=>{\n            const exists = mergedAttributes[key];\n            if (!exists) {\n                mergedAttributes[key] = value;\n                return;\n            }\n            if (key === \"class\") {\n                const valueClasses = value ? value.split(\" \") : [];\n                const existingClasses = mergedAttributes[key] ? mergedAttributes[key].split(\" \") : [];\n                const insertClasses = valueClasses.filter((valueClass)=>!existingClasses.includes(valueClass));\n                mergedAttributes[key] = [\n                    ...existingClasses,\n                    ...insertClasses\n                ].join(\" \");\n            } else if (key === \"style\") {\n                mergedAttributes[key] = [\n                    mergedAttributes[key],\n                    value\n                ].join(\"; \");\n            } else {\n                mergedAttributes[key] = value;\n            }\n        });\n        return mergedAttributes;\n    }, {});\n}\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\n    return extensionAttributes.filter((item)=>item.attribute.rendered).map((item)=>{\n        if (!item.attribute.renderHTML) {\n            return {\n                [item.name]: nodeOrMark.attrs[item.name]\n            };\n        }\n        return item.attribute.renderHTML(nodeOrMark.attrs) || {};\n    }).reduce((attributes, attribute)=>mergeAttributes(attributes, attribute), {});\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n/**\r\n * Optionally calls `value` as a function.\r\n * Otherwise it is returned directly.\r\n * @param value Function or any value.\r\n * @param context Optional context to bind to function.\r\n * @param props Optional props to pass to function.\r\n */ function callOrReturn(value, context = undefined, ...props) {\n    if (isFunction(value)) {\n        if (context) {\n            return value.bind(context)(...props);\n        }\n        return value(...props);\n    }\n    return value;\n}\nfunction isEmptyObject(value = {}) {\n    return Object.keys(value).length === 0 && value.constructor === Object;\n}\nfunction fromString(value) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n        return Number(value);\n    }\n    if (value === \"true\") {\n        return true;\n    }\n    if (value === \"false\") {\n        return false;\n    }\n    return value;\n}\n/**\r\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\r\n * Cancels when `getAttrs` returned `false`.\r\n * @param parseRule ProseMirror ParseRule\r\n * @param extensionAttributes List of attributes to inject\r\n */ function injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\n    if (parseRule.style) {\n        return parseRule;\n    }\n    return {\n        ...parseRule,\n        getAttrs: (node)=>{\n            const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\n            if (oldAttributes === false) {\n                return false;\n            }\n            const newAttributes = extensionAttributes.reduce((items, item)=>{\n                const value = item.attribute.parseHTML ? item.attribute.parseHTML(node) : fromString(node.getAttribute(item.name));\n                if (value === null || value === undefined) {\n                    return items;\n                }\n                return {\n                    ...items,\n                    [item.name]: value\n                };\n            }, {});\n            return {\n                ...oldAttributes,\n                ...newAttributes\n            };\n        }\n    };\n}\nfunction cleanUpSchemaItem(data) {\n    return Object.fromEntries(// @ts-ignore\n    Object.entries(data).filter(([key, value])=>{\n        if (key === \"attrs\" && isEmptyObject(value)) {\n            return false;\n        }\n        return value !== null && value !== undefined;\n    }));\n}\nfunction getSchemaByResolvedExtensions(extensions, editor) {\n    var _a;\n    const allAttributes = getAttributesFromExtensions(extensions);\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\n    const topNode = (_a = nodeExtensions.find((extension)=>getExtensionField(extension, \"topNode\"))) === null || _a === void 0 ? void 0 : _a.name;\n    const nodes = Object.fromEntries(nodeExtensions.map((extension)=>{\n        const extensionAttributes = allAttributes.filter((attribute)=>attribute.type === extension.name);\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor\n        };\n        const extraNodeFields = extensions.reduce((fields, e)=>{\n            const extendNodeSchema = getExtensionField(e, \"extendNodeSchema\", context);\n            return {\n                ...fields,\n                ...extendNodeSchema ? extendNodeSchema(extension) : {}\n            };\n        }, {});\n        const schema = cleanUpSchemaItem({\n            ...extraNodeFields,\n            content: callOrReturn(getExtensionField(extension, \"content\", context)),\n            marks: callOrReturn(getExtensionField(extension, \"marks\", context)),\n            group: callOrReturn(getExtensionField(extension, \"group\", context)),\n            inline: callOrReturn(getExtensionField(extension, \"inline\", context)),\n            atom: callOrReturn(getExtensionField(extension, \"atom\", context)),\n            selectable: callOrReturn(getExtensionField(extension, \"selectable\", context)),\n            draggable: callOrReturn(getExtensionField(extension, \"draggable\", context)),\n            code: callOrReturn(getExtensionField(extension, \"code\", context)),\n            defining: callOrReturn(getExtensionField(extension, \"defining\", context)),\n            isolating: callOrReturn(getExtensionField(extension, \"isolating\", context)),\n            attrs: Object.fromEntries(extensionAttributes.map((extensionAttribute)=>{\n                var _a;\n                return [\n                    extensionAttribute.name,\n                    {\n                        default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n                    }\n                ];\n            }))\n        });\n        const parseHTML = callOrReturn(getExtensionField(extension, \"parseHTML\", context));\n        if (parseHTML) {\n            schema.parseDOM = parseHTML.map((parseRule)=>injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n        }\n        const renderHTML = getExtensionField(extension, \"renderHTML\", context);\n        if (renderHTML) {\n            schema.toDOM = (node)=>renderHTML({\n                    node,\n                    HTMLAttributes: getRenderedAttributes(node, extensionAttributes)\n                });\n        }\n        const renderText = getExtensionField(extension, \"renderText\", context);\n        if (renderText) {\n            schema.toText = renderText;\n        }\n        return [\n            extension.name,\n            schema\n        ];\n    }));\n    const marks = Object.fromEntries(markExtensions.map((extension)=>{\n        const extensionAttributes = allAttributes.filter((attribute)=>attribute.type === extension.name);\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor\n        };\n        const extraMarkFields = extensions.reduce((fields, e)=>{\n            const extendMarkSchema = getExtensionField(e, \"extendMarkSchema\", context);\n            return {\n                ...fields,\n                ...extendMarkSchema ? extendMarkSchema(extension) : {}\n            };\n        }, {});\n        const schema = cleanUpSchemaItem({\n            ...extraMarkFields,\n            inclusive: callOrReturn(getExtensionField(extension, \"inclusive\", context)),\n            excludes: callOrReturn(getExtensionField(extension, \"excludes\", context)),\n            group: callOrReturn(getExtensionField(extension, \"group\", context)),\n            spanning: callOrReturn(getExtensionField(extension, \"spanning\", context)),\n            code: callOrReturn(getExtensionField(extension, \"code\", context)),\n            attrs: Object.fromEntries(extensionAttributes.map((extensionAttribute)=>{\n                var _a;\n                return [\n                    extensionAttribute.name,\n                    {\n                        default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n                    }\n                ];\n            }))\n        });\n        const parseHTML = callOrReturn(getExtensionField(extension, \"parseHTML\", context));\n        if (parseHTML) {\n            schema.parseDOM = parseHTML.map((parseRule)=>injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n        }\n        const renderHTML = getExtensionField(extension, \"renderHTML\", context);\n        if (renderHTML) {\n            schema.toDOM = (mark)=>renderHTML({\n                    mark,\n                    HTMLAttributes: getRenderedAttributes(mark, extensionAttributes)\n                });\n        }\n        return [\n            extension.name,\n            schema\n        ];\n    }));\n    return new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Schema({\n        topNode,\n        nodes,\n        marks\n    });\n}\nfunction getSchemaTypeByName(name, schema) {\n    return schema.nodes[name] || schema.marks[name] || null;\n}\nfunction isExtensionRulesEnabled(extension, enabled) {\n    if (Array.isArray(enabled)) {\n        return enabled.some((enabledExtension)=>{\n            const name = typeof enabledExtension === \"string\" ? enabledExtension : enabledExtension.name;\n            return name === extension.name;\n        });\n    }\n    return enabled;\n}\nconst getTextContentFromNodes = ($from, maxMatch = 500)=>{\n    let textBefore = \"\";\n    const sliceEndPos = $from.parentOffset;\n    $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node, pos, parent, index)=>{\n        var _a, _b;\n        const chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            node,\n            pos,\n            parent,\n            index\n        })) || node.textContent || \"%leaf%\";\n        textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos));\n    });\n    return textBefore;\n};\nfunction isRegExp(value) {\n    return Object.prototype.toString.call(value) === \"[object RegExp]\";\n}\nclass InputRule {\n    constructor(config){\n        this.find = config.find;\n        this.handler = config.handler;\n    }\n}\nconst inputRuleMatcherHandler = (text, find)=>{\n    if (isRegExp(find)) {\n        return find.exec(text);\n    }\n    const inputRuleMatch = find(text);\n    if (!inputRuleMatch) {\n        return null;\n    }\n    const result = [\n        inputRuleMatch.text\n    ];\n    result.index = inputRuleMatch.index;\n    result.input = text;\n    result.data = inputRuleMatch.data;\n    if (inputRuleMatch.replaceWith) {\n        if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n            console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\n        }\n        result.push(inputRuleMatch.replaceWith);\n    }\n    return result;\n};\nfunction run$1(config) {\n    var _a;\n    const { editor, from, to, text, rules, plugin } = config;\n    const { view } = editor;\n    if (view.composing) {\n        return false;\n    }\n    const $from = view.state.doc.resolve(from);\n    if (// check for code node\n    $from.parent.type.spec.code || !!((_a = $from.nodeBefore || $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.marks.find((mark)=>mark.type.spec.code))) {\n        return false;\n    }\n    let matched = false;\n    const textBefore = getTextContentFromNodes($from) + text;\n    rules.forEach((rule)=>{\n        if (matched) {\n            return;\n        }\n        const match = inputRuleMatcherHandler(textBefore, rule.find);\n        if (!match) {\n            return;\n        }\n        const tr = view.state.tr;\n        const state = createChainableState({\n            state: view.state,\n            transaction: tr\n        });\n        const range = {\n            from: from - (match[0].length - text.length),\n            to\n        };\n        const { commands, chain, can } = new CommandManager({\n            editor,\n            state\n        });\n        const handler = rule.handler({\n            state,\n            range,\n            match,\n            commands,\n            chain,\n            can\n        });\n        // stop if there are no changes\n        if (handler === null || !tr.steps.length) {\n            return;\n        }\n        // store transform as meta data\n        // so we can undo input rules within the `undoInputRules` command\n        tr.setMeta(plugin, {\n            transform: tr,\n            from,\n            to,\n            text\n        });\n        view.dispatch(tr);\n        matched = true;\n    });\n    return matched;\n}\n/**\r\n * Create an input rules plugin. When enabled, it will cause text\r\n * input that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */ function inputRulesPlugin(props) {\n    const { editor, rules } = props;\n    const plugin = new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        state: {\n            init () {\n                return null;\n            },\n            apply (tr, prev) {\n                const stored = tr.getMeta(plugin);\n                if (stored) {\n                    return stored;\n                }\n                return tr.selectionSet || tr.docChanged ? null : prev;\n            }\n        },\n        props: {\n            handleTextInput (view, from, to, text) {\n                return run$1({\n                    editor,\n                    from,\n                    to,\n                    text,\n                    rules,\n                    plugin\n                });\n            },\n            handleDOMEvents: {\n                compositionend: (view)=>{\n                    setTimeout(()=>{\n                        const { $cursor } = view.state.selection;\n                        if ($cursor) {\n                            run$1({\n                                editor,\n                                from: $cursor.pos,\n                                to: $cursor.pos,\n                                text: \"\",\n                                rules,\n                                plugin\n                            });\n                        }\n                    });\n                    return false;\n                }\n            },\n            // add support for input rules to trigger on enter\n            // this is useful for example for code blocks\n            handleKeyDown (view, event) {\n                if (event.key !== \"Enter\") {\n                    return false;\n                }\n                const { $cursor } = view.state.selection;\n                if ($cursor) {\n                    return run$1({\n                        editor,\n                        from: $cursor.pos,\n                        to: $cursor.pos,\n                        text: \"\\n\",\n                        rules,\n                        plugin\n                    });\n                }\n                return false;\n            }\n        },\n        // @ts-ignore\n        isInputRules: true\n    });\n    return plugin;\n}\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\nclass PasteRule {\n    constructor(config){\n        this.find = config.find;\n        this.handler = config.handler;\n    }\n}\nconst pasteRuleMatcherHandler = (text, find)=>{\n    if (isRegExp(find)) {\n        return [\n            ...text.matchAll(find)\n        ];\n    }\n    const matches = find(text);\n    if (!matches) {\n        return [];\n    }\n    return matches.map((pasteRuleMatch)=>{\n        const result = [\n            pasteRuleMatch.text\n        ];\n        result.index = pasteRuleMatch.index;\n        result.input = text;\n        result.data = pasteRuleMatch.data;\n        if (pasteRuleMatch.replaceWith) {\n            if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n                console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\n            }\n            result.push(pasteRuleMatch.replaceWith);\n        }\n        return result;\n    });\n};\nfunction run(config) {\n    const { editor, state, from, to, rule, pasteEvent, dropEvent } = config;\n    const { commands, chain, can } = new CommandManager({\n        editor,\n        state\n    });\n    const handlers = [];\n    state.doc.nodesBetween(from, to, (node, pos)=>{\n        if (!node.isTextblock || node.type.spec.code) {\n            return;\n        }\n        const resolvedFrom = Math.max(from, pos);\n        const resolvedTo = Math.min(to, pos + node.content.size);\n        const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, \"￼\");\n        const matches = pasteRuleMatcherHandler(textToMatch, rule.find);\n        matches.forEach((match)=>{\n            if (match.index === undefined) {\n                return;\n            }\n            const start = resolvedFrom + match.index + 1;\n            const end = start + match[0].length;\n            const range = {\n                from: state.tr.mapping.map(start),\n                to: state.tr.mapping.map(end)\n            };\n            const handler = rule.handler({\n                state,\n                range,\n                match,\n                commands,\n                chain,\n                can,\n                pasteEvent,\n                dropEvent\n            });\n            handlers.push(handler);\n        });\n    });\n    const success = handlers.every((handler)=>handler !== null);\n    return success;\n}\n/**\r\n * Create an paste rules plugin. When enabled, it will cause pasted\r\n * text that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */ function pasteRulesPlugin(props) {\n    const { editor, rules } = props;\n    let dragSourceElement = null;\n    let isPastedFromProseMirror = false;\n    let isDroppedFromProseMirror = false;\n    let pasteEvent = new ClipboardEvent(\"paste\");\n    let dropEvent = new DragEvent(\"drop\");\n    const plugins = rules.map((rule)=>{\n        return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n            // we register a global drag handler to track the current drag source element\n            view (view) {\n                const handleDragstart = (event)=>{\n                    var _a;\n                    dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target)) ? view.dom.parentElement : null;\n                };\n                window.addEventListener(\"dragstart\", handleDragstart);\n                return {\n                    destroy () {\n                        window.removeEventListener(\"dragstart\", handleDragstart);\n                    }\n                };\n            },\n            props: {\n                handleDOMEvents: {\n                    drop: (view, event)=>{\n                        isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;\n                        dropEvent = event;\n                        return false;\n                    },\n                    paste: (_view, event)=>{\n                        var _a;\n                        const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData(\"text/html\");\n                        pasteEvent = event;\n                        isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes(\"data-pm-slice\"));\n                        return false;\n                    }\n                }\n            },\n            appendTransaction: (transactions, oldState, state)=>{\n                const transaction = transactions[0];\n                const isPaste = transaction.getMeta(\"uiEvent\") === \"paste\" && !isPastedFromProseMirror;\n                const isDrop = transaction.getMeta(\"uiEvent\") === \"drop\" && !isDroppedFromProseMirror;\n                if (!isPaste && !isDrop) {\n                    return;\n                }\n                // stop if there is no changed range\n                const from = oldState.doc.content.findDiffStart(state.doc.content);\n                const to = oldState.doc.content.findDiffEnd(state.doc.content);\n                if (!isNumber(from) || !to || from === to.b) {\n                    return;\n                }\n                // build a chainable state\n                // so we can use a single transaction for all paste rules\n                const tr = state.tr;\n                const chainableState = createChainableState({\n                    state,\n                    transaction: tr\n                });\n                const handler = run({\n                    editor,\n                    state: chainableState,\n                    from: Math.max(from - 1, 0),\n                    to: to.b - 1,\n                    rule,\n                    pasteEvent,\n                    dropEvent\n                });\n                // stop if there are no changes\n                if (!handler || !tr.steps.length) {\n                    return;\n                }\n                dropEvent = new DragEvent(\"drop\");\n                pasteEvent = new ClipboardEvent(\"paste\");\n                return tr;\n            }\n        });\n    });\n    return plugins;\n}\nfunction findDuplicates(items) {\n    const filtered = items.filter((el, index)=>items.indexOf(el) !== index);\n    return [\n        ...new Set(filtered)\n    ];\n}\nclass ExtensionManager {\n    constructor(extensions, editor){\n        this.splittableMarks = [];\n        this.editor = editor;\n        this.extensions = ExtensionManager.resolve(extensions);\n        this.schema = getSchemaByResolvedExtensions(this.extensions, editor);\n        this.extensions.forEach((extension)=>{\n            var _a;\n            // store extension storage in editor\n            this.editor.extensionStorage[extension.name] = extension.storage;\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor: this.editor,\n                type: getSchemaTypeByName(extension.name, this.schema)\n            };\n            if (extension.type === \"mark\") {\n                const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, \"keepOnSplit\", context))) !== null && _a !== void 0 ? _a : true;\n                if (keepOnSplit) {\n                    this.splittableMarks.push(extension.name);\n                }\n            }\n            const onBeforeCreate = getExtensionField(extension, \"onBeforeCreate\", context);\n            if (onBeforeCreate) {\n                this.editor.on(\"beforeCreate\", onBeforeCreate);\n            }\n            const onCreate = getExtensionField(extension, \"onCreate\", context);\n            if (onCreate) {\n                this.editor.on(\"create\", onCreate);\n            }\n            const onUpdate = getExtensionField(extension, \"onUpdate\", context);\n            if (onUpdate) {\n                this.editor.on(\"update\", onUpdate);\n            }\n            const onSelectionUpdate = getExtensionField(extension, \"onSelectionUpdate\", context);\n            if (onSelectionUpdate) {\n                this.editor.on(\"selectionUpdate\", onSelectionUpdate);\n            }\n            const onTransaction = getExtensionField(extension, \"onTransaction\", context);\n            if (onTransaction) {\n                this.editor.on(\"transaction\", onTransaction);\n            }\n            const onFocus = getExtensionField(extension, \"onFocus\", context);\n            if (onFocus) {\n                this.editor.on(\"focus\", onFocus);\n            }\n            const onBlur = getExtensionField(extension, \"onBlur\", context);\n            if (onBlur) {\n                this.editor.on(\"blur\", onBlur);\n            }\n            const onDestroy = getExtensionField(extension, \"onDestroy\", context);\n            if (onDestroy) {\n                this.editor.on(\"destroy\", onDestroy);\n            }\n        });\n    }\n    static resolve(extensions) {\n        const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\n        const duplicatedNames = findDuplicates(resolvedExtensions.map((extension)=>extension.name));\n        if (duplicatedNames.length) {\n            console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map((item)=>`'${item}'`).join(\", \")}]. This can lead to issues.`);\n        }\n        return resolvedExtensions;\n    }\n    static flatten(extensions) {\n        return extensions.map((extension)=>{\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage\n            };\n            const addExtensions = getExtensionField(extension, \"addExtensions\", context);\n            if (addExtensions) {\n                return [\n                    extension,\n                    ...this.flatten(addExtensions())\n                ];\n            }\n            return extension;\n        })// `Infinity` will break TypeScript so we set a number that is probably high enough\n        .flat(10);\n    }\n    static sort(extensions) {\n        const defaultPriority = 100;\n        return extensions.sort((a, b)=>{\n            const priorityA = getExtensionField(a, \"priority\") || defaultPriority;\n            const priorityB = getExtensionField(b, \"priority\") || defaultPriority;\n            if (priorityA > priorityB) {\n                return -1;\n            }\n            if (priorityA < priorityB) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n    get commands() {\n        return this.extensions.reduce((commands, extension)=>{\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor: this.editor,\n                type: getSchemaTypeByName(extension.name, this.schema)\n            };\n            const addCommands = getExtensionField(extension, \"addCommands\", context);\n            if (!addCommands) {\n                return commands;\n            }\n            return {\n                ...commands,\n                ...addCommands()\n            };\n        }, {});\n    }\n    get plugins() {\n        const { editor } = this;\n        // With ProseMirror, first plugins within an array are executed first.\n        // In Tiptap, we provide the ability to override plugins,\n        // so it feels more natural to run plugins at the end of an array first.\n        // That’s why we have to reverse the `extensions` array and sort again\n        // based on the `priority` option.\n        const extensions = ExtensionManager.sort([\n            ...this.extensions\n        ].reverse());\n        const inputRules = [];\n        const pasteRules = [];\n        const allPlugins = extensions.map((extension)=>{\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor,\n                type: getSchemaTypeByName(extension.name, this.schema)\n            };\n            const plugins = [];\n            const addKeyboardShortcuts = getExtensionField(extension, \"addKeyboardShortcuts\", context);\n            let defaultBindings = {};\n            // bind exit handling\n            if (extension.type === \"mark\" && extension.config.exitable) {\n                defaultBindings.ArrowRight = ()=>Mark.handleExit({\n                        editor,\n                        mark: extension\n                    });\n            }\n            if (addKeyboardShortcuts) {\n                const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method])=>{\n                    return [\n                        shortcut,\n                        ()=>method({\n                                editor\n                            })\n                    ];\n                }));\n                defaultBindings = {\n                    ...defaultBindings,\n                    ...bindings\n                };\n            }\n            const keyMapPlugin = (0,_tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__.keymap)(defaultBindings);\n            plugins.push(keyMapPlugin);\n            const addInputRules = getExtensionField(extension, \"addInputRules\", context);\n            if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n                inputRules.push(...addInputRules());\n            }\n            const addPasteRules = getExtensionField(extension, \"addPasteRules\", context);\n            if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n                pasteRules.push(...addPasteRules());\n            }\n            const addProseMirrorPlugins = getExtensionField(extension, \"addProseMirrorPlugins\", context);\n            if (addProseMirrorPlugins) {\n                const proseMirrorPlugins = addProseMirrorPlugins();\n                plugins.push(...proseMirrorPlugins);\n            }\n            return plugins;\n        }).flat();\n        return [\n            inputRulesPlugin({\n                editor,\n                rules: inputRules\n            }),\n            ...pasteRulesPlugin({\n                editor,\n                rules: pasteRules\n            }),\n            ...allPlugins\n        ];\n    }\n    get attributes() {\n        return getAttributesFromExtensions(this.extensions);\n    }\n    get nodeViews() {\n        const { editor } = this;\n        const { nodeExtensions } = splitExtensions(this.extensions);\n        return Object.fromEntries(nodeExtensions.filter((extension)=>!!getExtensionField(extension, \"addNodeView\")).map((extension)=>{\n            const extensionAttributes = this.attributes.filter((attribute)=>attribute.type === extension.name);\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor,\n                type: getNodeType(extension.name, this.schema)\n            };\n            const addNodeView = getExtensionField(extension, \"addNodeView\", context);\n            if (!addNodeView) {\n                return [];\n            }\n            const nodeview = (node, view, getPos, decorations)=>{\n                const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\n                return addNodeView()({\n                    editor,\n                    node,\n                    getPos,\n                    decorations,\n                    HTMLAttributes,\n                    extension\n                });\n            };\n            return [\n                extension.name,\n                nodeview\n            ];\n        }));\n    }\n}\n// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\nfunction getType(value) {\n    return Object.prototype.toString.call(value).slice(8, -1);\n}\nfunction isPlainObject(value) {\n    if (getType(value) !== \"Object\") {\n        return false;\n    }\n    return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\n}\nfunction mergeDeep(target, source) {\n    const output = {\n        ...target\n    };\n    if (isPlainObject(target) && isPlainObject(source)) {\n        Object.keys(source).forEach((key)=>{\n            if (isPlainObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, {\n                        [key]: source[key]\n                    });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, {\n                    [key]: source[key]\n                });\n            }\n        });\n    }\n    return output;\n}\nclass Extension {\n    constructor(config = {}){\n        this.type = \"extension\";\n        this.name = \"extension\";\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {}\n        };\n        this.config = {\n            ...this.config,\n            ...config\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, \"addOptions\", {\n                name: this.name\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, \"addStorage\", {\n            name: this.name,\n            options: this.options\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Extension(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend();\n        extension.options = mergeDeep(this.options, options);\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Extension(extendedConfig);\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, \"addOptions\", {\n            name: extension.name\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n}\nfunction getTextBetween(startNode, range, options) {\n    const { from, to } = range;\n    const { blockSeparator = \"\\n\\n\", textSerializers = {} } = options || {};\n    let text = \"\";\n    let separated = true;\n    startNode.nodesBetween(from, to, (node, pos, parent, index)=>{\n        var _a;\n        const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\n        if (textSerializer) {\n            if (node.isBlock && !separated) {\n                text += blockSeparator;\n                separated = true;\n            }\n            if (parent) {\n                text += textSerializer({\n                    node,\n                    pos,\n                    parent,\n                    index,\n                    range\n                });\n            }\n        } else if (node.isText) {\n            text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line\n            separated = false;\n        } else if (node.isBlock && !separated) {\n            text += blockSeparator;\n            separated = true;\n        }\n    });\n    return text;\n}\nfunction getTextSerializersFromSchema(schema) {\n    return Object.fromEntries(Object.entries(schema.nodes).filter(([, node])=>node.spec.toText).map(([name, node])=>[\n            name,\n            node.spec.toText\n        ]));\n}\nconst ClipboardTextSerializer = Extension.create({\n    name: \"clipboardTextSerializer\",\n    addProseMirrorPlugins () {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"clipboardTextSerializer\"),\n                props: {\n                    clipboardTextSerializer: ()=>{\n                        const { editor } = this;\n                        const { state, schema } = editor;\n                        const { doc, selection } = state;\n                        const { ranges } = selection;\n                        const from = Math.min(...ranges.map((range)=>range.$from.pos));\n                        const to = Math.max(...ranges.map((range)=>range.$to.pos));\n                        const textSerializers = getTextSerializersFromSchema(schema);\n                        const range = {\n                            from,\n                            to\n                        };\n                        return getTextBetween(doc, range, {\n                            textSerializers\n                        });\n                    }\n                }\n            })\n        ];\n    }\n});\nconst blur = ()=>({ editor, view })=>{\n        requestAnimationFrame(()=>{\n            var _a;\n            if (!editor.isDestroyed) {\n                view.dom.blur();\n                // Browsers should remove the caret on blur but safari does not.\n                // See: https://github.com/ueberdosis/tiptap/issues/2405\n                (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n            }\n        });\n        return true;\n    };\nconst clearContent = (emitUpdate = false)=>({ commands })=>{\n        return commands.setContent(\"\", emitUpdate);\n    };\nconst clearNodes = ()=>({ state, tr, dispatch })=>{\n        const { selection } = tr;\n        const { ranges } = selection;\n        if (!dispatch) {\n            return true;\n        }\n        ranges.forEach(({ $from, $to })=>{\n            state.doc.nodesBetween($from.pos, $to.pos, (node, pos)=>{\n                if (node.type.isText) {\n                    return;\n                }\n                const { doc, mapping } = tr;\n                const $mappedFrom = doc.resolve(mapping.map(pos));\n                const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\n                const nodeRange = $mappedFrom.blockRange($mappedTo);\n                if (!nodeRange) {\n                    return;\n                }\n                const targetLiftDepth = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.liftTarget)(nodeRange);\n                if (node.type.isTextblock) {\n                    const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());\n                    tr.setNodeMarkup(nodeRange.start, defaultType);\n                }\n                if (targetLiftDepth || targetLiftDepth === 0) {\n                    tr.lift(nodeRange, targetLiftDepth);\n                }\n            });\n        });\n        return true;\n    };\nconst command = (fn)=>(props)=>{\n        return fn(props);\n    };\nconst createParagraphNear = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.createParagraphNear)(state, dispatch);\n    };\nconst cut = (originRange, targetPos)=>({ editor, tr })=>{\n        const { state } = editor;\n        const contentSlice = state.doc.slice(originRange.from, originRange.to);\n        tr.deleteRange(originRange.from, originRange.to);\n        const newPos = tr.mapping.map(targetPos);\n        tr.insert(newPos, contentSlice.content);\n        tr.setSelection(new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection(tr.doc.resolve(newPos - 1)));\n        return true;\n    };\nconst deleteCurrentNode = ()=>({ tr, dispatch })=>{\n        const { selection } = tr;\n        const currentNode = selection.$anchor.node();\n        // if there is content inside the current node, break out of this command\n        if (currentNode.content.size > 0) {\n            return false;\n        }\n        const $pos = tr.selection.$anchor;\n        for(let depth = $pos.depth; depth > 0; depth -= 1){\n            const node = $pos.node(depth);\n            if (node.type === currentNode.type) {\n                if (dispatch) {\n                    const from = $pos.before(depth);\n                    const to = $pos.after(depth);\n                    tr.delete(from, to).scrollIntoView();\n                }\n                return true;\n            }\n        }\n        return false;\n    };\nconst deleteNode = (typeOrName)=>({ tr, state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        const $pos = tr.selection.$anchor;\n        for(let depth = $pos.depth; depth > 0; depth -= 1){\n            const node = $pos.node(depth);\n            if (node.type === type) {\n                if (dispatch) {\n                    const from = $pos.before(depth);\n                    const to = $pos.after(depth);\n                    tr.delete(from, to).scrollIntoView();\n                }\n                return true;\n            }\n        }\n        return false;\n    };\nconst deleteRange = (range)=>({ tr, dispatch })=>{\n        const { from, to } = range;\n        if (dispatch) {\n            tr.delete(from, to);\n        }\n        return true;\n    };\nconst deleteSelection = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.deleteSelection)(state, dispatch);\n    };\nconst enter = ()=>({ commands })=>{\n        return commands.keyboardShortcut(\"Enter\");\n    };\nconst exitCode = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.exitCode)(state, dispatch);\n    };\n/**\r\n * Check if object1 includes object2\r\n * @param object1 Object\r\n * @param object2 Object\r\n */ function objectIncludes(object1, object2, options = {\n    strict: true\n}) {\n    const keys = Object.keys(object2);\n    if (!keys.length) {\n        return true;\n    }\n    return keys.every((key)=>{\n        if (options.strict) {\n            return object2[key] === object1[key];\n        }\n        if (isRegExp(object2[key])) {\n            return object2[key].test(object1[key]);\n        }\n        return object2[key] === object1[key];\n    });\n}\nfunction findMarkInSet(marks, type, attributes = {}) {\n    return marks.find((item)=>{\n        return item.type === type && objectIncludes(item.attrs, attributes);\n    });\n}\nfunction isMarkInSet(marks, type, attributes = {}) {\n    return !!findMarkInSet(marks, type, attributes);\n}\nfunction getMarkRange($pos, type, attributes = {}) {\n    if (!$pos || !type) {\n        return;\n    }\n    let start = $pos.parent.childAfter($pos.parentOffset);\n    if ($pos.parentOffset === start.offset && start.offset !== 0) {\n        start = $pos.parent.childBefore($pos.parentOffset);\n    }\n    if (!start.node) {\n        return;\n    }\n    const mark = findMarkInSet([\n        ...start.node.marks\n    ], type, attributes);\n    if (!mark) {\n        return;\n    }\n    let startIndex = start.index;\n    let startPos = $pos.start() + start.offset;\n    let endIndex = startIndex + 1;\n    let endPos = startPos + start.node.nodeSize;\n    findMarkInSet([\n        ...start.node.marks\n    ], type, attributes);\n    while(startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)){\n        startIndex -= 1;\n        startPos -= $pos.parent.child(startIndex).nodeSize;\n    }\n    while(endIndex < $pos.parent.childCount && isMarkInSet([\n        ...$pos.parent.child(endIndex).marks\n    ], type, attributes)){\n        endPos += $pos.parent.child(endIndex).nodeSize;\n        endIndex += 1;\n    }\n    return {\n        from: startPos,\n        to: endPos\n    };\n}\nfunction getMarkType(nameOrType, schema) {\n    if (typeof nameOrType === \"string\") {\n        if (!schema.marks[nameOrType]) {\n            throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n        }\n        return schema.marks[nameOrType];\n    }\n    return nameOrType;\n}\nconst extendMarkRange = (typeOrName, attributes = {})=>({ tr, state, dispatch })=>{\n        const type = getMarkType(typeOrName, state.schema);\n        const { doc, selection } = tr;\n        const { $from, from, to } = selection;\n        if (dispatch) {\n            const range = getMarkRange($from, type, attributes);\n            if (range && range.from <= from && range.to >= to) {\n                const newSelection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, range.from, range.to);\n                tr.setSelection(newSelection);\n            }\n        }\n        return true;\n    };\nconst first = (commands)=>(props)=>{\n        const items = typeof commands === \"function\" ? commands(props) : commands;\n        for(let i = 0; i < items.length; i += 1){\n            if (items[i](props)) {\n                return true;\n            }\n        }\n        return false;\n    };\nfunction isTextSelection(value) {\n    return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection;\n}\nfunction minMax(value = 0, min = 0, max = 0) {\n    return Math.min(Math.max(value, min), max);\n}\nfunction resolveFocusPosition(doc, position = null) {\n    if (!position) {\n        return null;\n    }\n    const selectionAtStart = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc);\n    const selectionAtEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(doc);\n    if (position === \"start\" || position === true) {\n        return selectionAtStart;\n    }\n    if (position === \"end\") {\n        return selectionAtEnd;\n    }\n    const minPos = selectionAtStart.from;\n    const maxPos = selectionAtEnd.to;\n    if (position === \"all\") {\n        return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));\n    }\n    return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));\n}\nfunction isiOS() {\n    return [\n        \"iPad Simulator\",\n        \"iPhone Simulator\",\n        \"iPod Simulator\",\n        \"iPad\",\n        \"iPhone\",\n        \"iPod\"\n    ].includes(navigator.platform) || navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document;\n}\nconst focus = (position = null, options = {})=>({ editor, view, tr, dispatch })=>{\n        options = {\n            scrollIntoView: true,\n            ...options\n        };\n        const delayedFocus = ()=>{\n            // focus within `requestAnimationFrame` breaks focus on iOS\n            // so we have to call this\n            if (isiOS()) {\n                view.dom.focus();\n            }\n            // For React we have to focus asynchronously. Otherwise wild things happen.\n            // see: https://github.com/ueberdosis/tiptap/issues/1520\n            requestAnimationFrame(()=>{\n                if (!editor.isDestroyed) {\n                    view.focus();\n                    if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n                        editor.commands.scrollIntoView();\n                    }\n                }\n            });\n        };\n        if (view.hasFocus() && position === null || position === false) {\n            return true;\n        }\n        // we don’t try to resolve a NodeSelection or CellSelection\n        if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n            delayedFocus();\n            return true;\n        }\n        // pass through tr.doc instead of editor.state.doc\n        // since transactions could change the editors state before this command has been run\n        const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;\n        const isSameSelection = editor.state.selection.eq(selection);\n        if (dispatch) {\n            if (!isSameSelection) {\n                tr.setSelection(selection);\n            }\n            // `tr.setSelection` resets the stored marks\n            // so we’ll restore them if the selection is the same as before\n            if (isSameSelection && tr.storedMarks) {\n                tr.setStoredMarks(tr.storedMarks);\n            }\n            delayedFocus();\n        }\n        return true;\n    };\nconst forEach = (items, fn)=>(props)=>{\n        return items.every((item, index)=>fn(item, {\n                ...props,\n                index\n            }));\n    };\nconst insertContent = (value, options)=>({ tr, commands })=>{\n        return commands.insertContentAt({\n            from: tr.selection.from,\n            to: tr.selection.to\n        }, value, options);\n    };\nfunction elementFromString(value) {\n    // add a wrapper to preserve leading and trailing whitespace\n    const wrappedValue = `<body>${value}</body>`;\n    return new window.DOMParser().parseFromString(wrappedValue, \"text/html\").body;\n}\nfunction createNodeFromContent(content, schema, options) {\n    options = {\n        slice: true,\n        parseOptions: {},\n        ...options\n    };\n    if (typeof content === \"object\" && content !== null) {\n        try {\n            if (Array.isArray(content) && content.length > 0) {\n                return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.fromArray(content.map((item)=>schema.nodeFromJSON(item)));\n            }\n            return schema.nodeFromJSON(content);\n        } catch (error) {\n            console.warn(\"[tiptap warn]: Invalid content.\", \"Passed value:\", content, \"Error:\", error);\n            return createNodeFromContent(\"\", schema, options);\n        }\n    }\n    if (typeof content === \"string\") {\n        const parser = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema);\n        return options.slice ? parser.parseSlice(elementFromString(content), options.parseOptions).content : parser.parse(elementFromString(content), options.parseOptions);\n    }\n    return createNodeFromContent(\"\", schema, options);\n}\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n    const last = tr.steps.length - 1;\n    if (last < startLen) {\n        return;\n    }\n    const step = tr.steps[last];\n    if (!(step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceStep || step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceAroundStep)) {\n        return;\n    }\n    const map = tr.mapping.maps[last];\n    let end = 0;\n    map.forEach((_from, _to, _newFrom, newTo)=>{\n        if (end === 0) {\n            end = newTo;\n        }\n    });\n    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(tr.doc.resolve(end), bias));\n}\nconst isFragment = (nodeOrFragment)=>{\n    return nodeOrFragment.toString().startsWith(\"<\");\n};\nconst insertContentAt = (position, value, options)=>({ tr, dispatch, editor })=>{\n        if (dispatch) {\n            options = {\n                parseOptions: {},\n                updateSelection: true,\n                ...options\n            };\n            const content = createNodeFromContent(value, editor.schema, {\n                parseOptions: {\n                    preserveWhitespace: \"full\",\n                    ...options.parseOptions\n                }\n            });\n            // don’t dispatch an empty fragment because this can lead to strange errors\n            if (content.toString() === \"<>\") {\n                return true;\n            }\n            let { from, to } = typeof position === \"number\" ? {\n                from: position,\n                to: position\n            } : {\n                from: position.from,\n                to: position.to\n            };\n            let isOnlyTextContent = true;\n            let isOnlyBlockContent = true;\n            const nodes = isFragment(content) ? content : [\n                content\n            ];\n            nodes.forEach((node)=>{\n                // check if added node is valid\n                node.check();\n                isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;\n                isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n            });\n            // check if we can replace the wrapping node by\n            // the newly inserted content\n            // example:\n            // replace an empty paragraph by an inserted image\n            // instead of inserting the image below the paragraph\n            if (from === to && isOnlyBlockContent) {\n                const { parent } = tr.doc.resolve(from);\n                const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n                if (isEmptyTextBlock) {\n                    from -= 1;\n                    to += 1;\n                }\n            }\n            // if there is only plain text we have to use `insertText`\n            // because this will keep the current marks\n            if (isOnlyTextContent) {\n                // if value is string, we can use it directly\n                // otherwise if it is an array, we have to join it\n                if (Array.isArray(value)) {\n                    tr.insertText(value.map((v)=>v.text || \"\").join(\"\"), from, to);\n                } else if (typeof value === \"object\" && !!value && !!value.text) {\n                    tr.insertText(value.text, from, to);\n                } else {\n                    tr.insertText(value, from, to);\n                }\n            } else {\n                tr.replaceWith(from, to, content);\n            }\n            // set cursor at end of inserted content\n            if (options.updateSelection) {\n                selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n            }\n        }\n        return true;\n    };\nconst joinUp = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinUp)(state, dispatch);\n    };\nconst joinDown = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinDown)(state, dispatch);\n    };\nconst joinBackward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinBackward)(state, dispatch);\n    };\nconst joinForward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinForward)(state, dispatch);\n    };\nconst joinItemBackward = ()=>({ tr, state, dispatch })=>{\n        try {\n            const point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, -1);\n            if (point === null || point === undefined) {\n                return false;\n            }\n            tr.join(point, 2);\n            if (dispatch) {\n                dispatch(tr);\n            }\n            return true;\n        } catch  {\n            return false;\n        }\n    };\nconst joinItemForward = ()=>({ state, dispatch, tr })=>{\n        try {\n            const point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, +1);\n            if (point === null || point === undefined) {\n                return false;\n            }\n            tr.join(point, 2);\n            if (dispatch) {\n                dispatch(tr);\n            }\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\nfunction isMacOS() {\n    return typeof navigator !== \"undefined\" ? /Mac/.test(navigator.platform) : false;\n}\nfunction normalizeKeyName(name) {\n    const parts = name.split(/-(?!$)/);\n    let result = parts[parts.length - 1];\n    if (result === \"Space\") {\n        result = \" \";\n    }\n    let alt;\n    let ctrl;\n    let shift;\n    let meta;\n    for(let i = 0; i < parts.length - 1; i += 1){\n        const mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod)) {\n            meta = true;\n        } else if (/^a(lt)?$/i.test(mod)) {\n            alt = true;\n        } else if (/^(c|ctrl|control)$/i.test(mod)) {\n            ctrl = true;\n        } else if (/^s(hift)?$/i.test(mod)) {\n            shift = true;\n        } else if (/^mod$/i.test(mod)) {\n            if (isiOS() || isMacOS()) {\n                meta = true;\n            } else {\n                ctrl = true;\n            }\n        } else {\n            throw new Error(`Unrecognized modifier name: ${mod}`);\n        }\n    }\n    if (alt) {\n        result = `Alt-${result}`;\n    }\n    if (ctrl) {\n        result = `Ctrl-${result}`;\n    }\n    if (meta) {\n        result = `Meta-${result}`;\n    }\n    if (shift) {\n        result = `Shift-${result}`;\n    }\n    return result;\n}\nconst keyboardShortcut = (name)=>({ editor, view, tr, dispatch })=>{\n        const keys = normalizeKeyName(name).split(/-(?!$)/);\n        const key = keys.find((item)=>![\n                \"Alt\",\n                \"Ctrl\",\n                \"Meta\",\n                \"Shift\"\n            ].includes(item));\n        const event = new KeyboardEvent(\"keydown\", {\n            key: key === \"Space\" ? \" \" : key,\n            altKey: keys.includes(\"Alt\"),\n            ctrlKey: keys.includes(\"Ctrl\"),\n            metaKey: keys.includes(\"Meta\"),\n            shiftKey: keys.includes(\"Shift\"),\n            bubbles: true,\n            cancelable: true\n        });\n        const capturedTransaction = editor.captureTransaction(()=>{\n            view.someProp(\"handleKeyDown\", (f)=>f(view, event));\n        });\n        capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach((step)=>{\n            const newStep = step.map(tr.mapping);\n            if (newStep && dispatch) {\n                tr.maybeStep(newStep);\n            }\n        });\n        return true;\n    };\nfunction isNodeActive(state, typeOrName, attributes = {}) {\n    const { from, to, empty } = state.selection;\n    const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\n    const nodeRanges = [];\n    state.doc.nodesBetween(from, to, (node, pos)=>{\n        if (node.isText) {\n            return;\n        }\n        const relativeFrom = Math.max(from, pos);\n        const relativeTo = Math.min(to, pos + node.nodeSize);\n        nodeRanges.push({\n            node,\n            from: relativeFrom,\n            to: relativeTo\n        });\n    });\n    const selectionRange = to - from;\n    const matchedNodeRanges = nodeRanges.filter((nodeRange)=>{\n        if (!type) {\n            return true;\n        }\n        return type.name === nodeRange.node.type.name;\n    }).filter((nodeRange)=>objectIncludes(nodeRange.node.attrs, attributes, {\n            strict: false\n        }));\n    if (empty) {\n        return !!matchedNodeRanges.length;\n    }\n    const range = matchedNodeRanges.reduce((sum, nodeRange)=>sum + nodeRange.to - nodeRange.from, 0);\n    return range >= selectionRange;\n}\nconst lift = (typeOrName, attributes = {})=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        const isActive = isNodeActive(state, type, attributes);\n        if (!isActive) {\n            return false;\n        }\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.lift)(state, dispatch);\n    };\nconst liftEmptyBlock = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.liftEmptyBlock)(state, dispatch);\n    };\nconst liftListItem = (typeOrName)=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.liftListItem)(type)(state, dispatch);\n    };\nconst newlineInCode = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.newlineInCode)(state, dispatch);\n    };\nfunction getSchemaTypeNameByName(name, schema) {\n    if (schema.nodes[name]) {\n        return \"node\";\n    }\n    if (schema.marks[name]) {\n        return \"mark\";\n    }\n    return null;\n}\n/**\r\n * Remove a property or an array of properties from an object\r\n * @param obj Object\r\n * @param key Key to remove\r\n */ function deleteProps(obj, propOrProps) {\n    const props = typeof propOrProps === \"string\" ? [\n        propOrProps\n    ] : propOrProps;\n    return Object.keys(obj).reduce((newObj, prop)=>{\n        if (!props.includes(prop)) {\n            newObj[prop] = obj[prop];\n        }\n        return newObj;\n    }, {});\n}\nconst resetAttributes = (typeOrName, attributes)=>({ tr, state, dispatch })=>{\n        let nodeType = null;\n        let markType = null;\n        const schemaType = getSchemaTypeNameByName(typeof typeOrName === \"string\" ? typeOrName : typeOrName.name, state.schema);\n        if (!schemaType) {\n            return false;\n        }\n        if (schemaType === \"node\") {\n            nodeType = getNodeType(typeOrName, state.schema);\n        }\n        if (schemaType === \"mark\") {\n            markType = getMarkType(typeOrName, state.schema);\n        }\n        if (dispatch) {\n            tr.selection.ranges.forEach((range)=>{\n                state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos)=>{\n                    if (nodeType && nodeType === node.type) {\n                        tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\n                    }\n                    if (markType && node.marks.length) {\n                        node.marks.forEach((mark)=>{\n                            if (markType === mark.type) {\n                                tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        return true;\n    };\nconst scrollIntoView = ()=>({ tr, dispatch })=>{\n        if (dispatch) {\n            tr.scrollIntoView();\n        }\n        return true;\n    };\nconst selectAll = ()=>({ tr, commands })=>{\n        return commands.setTextSelection({\n            from: 0,\n            to: tr.doc.content.size\n        });\n    };\nconst selectNodeBackward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeBackward)(state, dispatch);\n    };\nconst selectNodeForward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeForward)(state, dispatch);\n    };\nconst selectParentNode = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectParentNode)(state, dispatch);\n    };\n// @ts-ignore\nconst selectTextblockEnd = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockEnd)(state, dispatch);\n    };\n// @ts-ignore\nconst selectTextblockStart = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockStart)(state, dispatch);\n    };\nfunction createDocument(content, schema, parseOptions = {}) {\n    return createNodeFromContent(content, schema, {\n        slice: false,\n        parseOptions\n    });\n}\nconst setContent = (content, emitUpdate = false, parseOptions = {})=>({ tr, editor, dispatch })=>{\n        const { doc } = tr;\n        const document1 = createDocument(content, editor.schema, parseOptions);\n        if (dispatch) {\n            tr.replaceWith(0, doc.content.size, document1).setMeta(\"preventUpdate\", !emitUpdate);\n        }\n        return true;\n    };\nfunction getMarkAttributes(state, typeOrName) {\n    const type = getMarkType(typeOrName, state.schema);\n    const { from, to, empty } = state.selection;\n    const marks = [];\n    if (empty) {\n        if (state.storedMarks) {\n            marks.push(...state.storedMarks);\n        }\n        marks.push(...state.selection.$head.marks());\n    } else {\n        state.doc.nodesBetween(from, to, (node)=>{\n            marks.push(...node.marks);\n        });\n    }\n    const mark = marks.find((markItem)=>markItem.type.name === type.name);\n    if (!mark) {\n        return {};\n    }\n    return {\n        ...mark.attrs\n    };\n}\n/**\r\n * Returns a new `Transform` based on all steps of the passed transactions.\r\n */ function combineTransactionSteps(oldDoc, transactions) {\n    const transform = new _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.Transform(oldDoc);\n    transactions.forEach((transaction)=>{\n        transaction.steps.forEach((step)=>{\n            transform.step(step);\n        });\n    });\n    return transform;\n}\nfunction defaultBlockAt(match) {\n    for(let i = 0; i < match.edgeCount; i += 1){\n        const { type } = match.edge(i);\n        if (type.isTextblock && !type.hasRequiredAttrs()) {\n            return type;\n        }\n    }\n    return null;\n}\nfunction findChildren(node, predicate) {\n    const nodesWithPos = [];\n    node.descendants((child, pos)=>{\n        if (predicate(child)) {\n            nodesWithPos.push({\n                node: child,\n                pos\n            });\n        }\n    });\n    return nodesWithPos;\n}\n/**\r\n * Same as `findChildren` but searches only within a `range`.\r\n */ function findChildrenInRange(node, range, predicate) {\n    const nodesWithPos = [];\n    // if (range.from === range.to) {\n    //   const nodeAt = node.nodeAt(range.from)\n    //   if (nodeAt) {\n    //     nodesWithPos.push({\n    //       node: nodeAt,\n    //       pos: range.from,\n    //     })\n    //   }\n    // }\n    node.nodesBetween(range.from, range.to, (child, pos)=>{\n        if (predicate(child)) {\n            nodesWithPos.push({\n                node: child,\n                pos\n            });\n        }\n    });\n    return nodesWithPos;\n}\nfunction findParentNodeClosestToPos($pos, predicate) {\n    for(let i = $pos.depth; i > 0; i -= 1){\n        const node = $pos.node(i);\n        if (predicate(node)) {\n            return {\n                pos: i > 0 ? $pos.before(i) : 0,\n                start: $pos.start(i),\n                depth: i,\n                node\n            };\n        }\n    }\n}\nfunction findParentNode(predicate) {\n    return (selection)=>findParentNodeClosestToPos(selection.$from, predicate);\n}\nfunction getHTMLFromFragment(fragment, schema) {\n    const documentFragment = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMSerializer.fromSchema(schema).serializeFragment(fragment);\n    const temporaryDocument = document.implementation.createHTMLDocument();\n    const container = temporaryDocument.createElement(\"div\");\n    container.appendChild(documentFragment);\n    return container.innerHTML;\n}\nfunction getSchema(extensions, editor) {\n    const resolvedExtensions = ExtensionManager.resolve(extensions);\n    return getSchemaByResolvedExtensions(resolvedExtensions, editor);\n}\nfunction generateHTML(doc, extensions) {\n    const schema = getSchema(extensions);\n    const contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\n    return getHTMLFromFragment(contentNode.content, schema);\n}\nfunction generateJSON(html, extensions) {\n    const schema = getSchema(extensions);\n    const dom = elementFromString(html);\n    return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema).parse(dom).toJSON();\n}\nfunction getText(node, options) {\n    const range = {\n        from: 0,\n        to: node.content.size\n    };\n    return getTextBetween(node, range, options);\n}\nfunction generateText(doc, extensions, options) {\n    const { blockSeparator = \"\\n\\n\", textSerializers = {} } = options || {};\n    const schema = getSchema(extensions);\n    const contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\n    return getText(contentNode, {\n        blockSeparator,\n        textSerializers: {\n            ...getTextSerializersFromSchema(schema),\n            ...textSerializers\n        }\n    });\n}\nfunction getNodeAttributes(state, typeOrName) {\n    const type = getNodeType(typeOrName, state.schema);\n    const { from, to } = state.selection;\n    const nodes = [];\n    state.doc.nodesBetween(from, to, (node)=>{\n        nodes.push(node);\n    });\n    const node = nodes.reverse().find((nodeItem)=>nodeItem.type.name === type.name);\n    if (!node) {\n        return {};\n    }\n    return {\n        ...node.attrs\n    };\n}\nfunction getAttributes(state, typeOrName) {\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === \"string\" ? typeOrName : typeOrName.name, state.schema);\n    if (schemaType === \"node\") {\n        return getNodeAttributes(state, typeOrName);\n    }\n    if (schemaType === \"mark\") {\n        return getMarkAttributes(state, typeOrName);\n    }\n    return {};\n}\n/**\r\n * Removes duplicated values within an array.\r\n * Supports numbers, strings and objects.\r\n */ function removeDuplicates(array, by = JSON.stringify) {\n    const seen = {};\n    return array.filter((item)=>{\n        const key = by(item);\n        return Object.prototype.hasOwnProperty.call(seen, key) ? false : seen[key] = true;\n    });\n}\n/**\r\n * Removes duplicated ranges and ranges that are\r\n * fully captured by other ranges.\r\n */ function simplifyChangedRanges(changes) {\n    const uniqueChanges = removeDuplicates(changes);\n    return uniqueChanges.length === 1 ? uniqueChanges : uniqueChanges.filter((change, index)=>{\n        const rest = uniqueChanges.filter((_, i)=>i !== index);\n        return !rest.some((otherChange)=>{\n            return change.oldRange.from >= otherChange.oldRange.from && change.oldRange.to <= otherChange.oldRange.to && change.newRange.from >= otherChange.newRange.from && change.newRange.to <= otherChange.newRange.to;\n        });\n    });\n}\n/**\r\n * Returns a list of changed ranges\r\n * based on the first and last state of all steps.\r\n */ function getChangedRanges(transform) {\n    const { mapping, steps } = transform;\n    const changes = [];\n    mapping.maps.forEach((stepMap, index)=>{\n        const ranges = [];\n        // This accounts for step changes where no range was actually altered\n        // e.g. when setting a mark, node attribute, etc.\n        // @ts-ignore\n        if (!stepMap.ranges.length) {\n            const { from, to } = steps[index];\n            if (from === undefined || to === undefined) {\n                return;\n            }\n            ranges.push({\n                from,\n                to\n            });\n        } else {\n            stepMap.forEach((from, to)=>{\n                ranges.push({\n                    from,\n                    to\n                });\n            });\n        }\n        ranges.forEach(({ from, to })=>{\n            const newStart = mapping.slice(index).map(from, -1);\n            const newEnd = mapping.slice(index).map(to);\n            const oldStart = mapping.invert().map(newStart, -1);\n            const oldEnd = mapping.invert().map(newEnd);\n            changes.push({\n                oldRange: {\n                    from: oldStart,\n                    to: oldEnd\n                },\n                newRange: {\n                    from: newStart,\n                    to: newEnd\n                }\n            });\n        });\n    });\n    return simplifyChangedRanges(changes);\n}\nfunction getDebugJSON(node, startOffset = 0) {\n    const isTopNode = node.type === node.type.schema.topNodeType;\n    const increment = isTopNode ? 0 : 1;\n    const from = startOffset;\n    const to = from + node.nodeSize;\n    const marks = node.marks.map((mark)=>{\n        const output = {\n            type: mark.type.name\n        };\n        if (Object.keys(mark.attrs).length) {\n            output.attrs = {\n                ...mark.attrs\n            };\n        }\n        return output;\n    });\n    const attrs = {\n        ...node.attrs\n    };\n    const output = {\n        type: node.type.name,\n        from,\n        to\n    };\n    if (Object.keys(attrs).length) {\n        output.attrs = attrs;\n    }\n    if (marks.length) {\n        output.marks = marks;\n    }\n    if (node.content.childCount) {\n        output.content = [];\n        node.forEach((child, offset)=>{\n            var _a;\n            (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\n        });\n    }\n    if (node.text) {\n        output.text = node.text;\n    }\n    return output;\n}\nfunction getMarksBetween(from, to, doc) {\n    const marks = [];\n    // get all inclusive marks on empty selection\n    if (from === to) {\n        doc.resolve(from).marks().forEach((mark)=>{\n            const $pos = doc.resolve(from - 1);\n            const range = getMarkRange($pos, mark.type);\n            if (!range) {\n                return;\n            }\n            marks.push({\n                mark,\n                ...range\n            });\n        });\n    } else {\n        doc.nodesBetween(from, to, (node, pos)=>{\n            marks.push(...node.marks.map((mark)=>({\n                    from: pos,\n                    to: pos + node.nodeSize,\n                    mark\n                })));\n        });\n    }\n    return marks;\n}\n/**\r\n * Finds the first node of a given type or name in the current selection.\r\n * @param state The editor state.\r\n * @param typeOrName The node type or name.\r\n * @param pos The position to start searching from.\r\n * @param maxDepth The maximum depth to search.\r\n * @returns The node and the depth as an array.\r\n */ const getNodeAtPosition = (state, typeOrName, pos, maxDepth = 20)=>{\n    const $pos = state.doc.resolve(pos);\n    let currentDepth = maxDepth;\n    let node = null;\n    while(currentDepth > 0 && node === null){\n        const currentNode = $pos.node(currentDepth);\n        if ((currentNode === null || currentNode === void 0 ? void 0 : currentNode.type.name) === typeOrName) {\n            node = currentNode;\n        } else {\n            currentDepth -= 1;\n        }\n    }\n    return [\n        node,\n        currentDepth\n    ];\n};\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\n    return Object.fromEntries(Object.entries(attributes).filter(([name])=>{\n        const extensionAttribute = extensionAttributes.find((item)=>{\n            return item.type === typeName && item.name === name;\n        });\n        if (!extensionAttribute) {\n            return false;\n        }\n        return extensionAttribute.attribute.keepOnSplit;\n    }));\n}\nfunction isMarkActive(state, typeOrName, attributes = {}) {\n    const { empty, ranges } = state.selection;\n    const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\n    if (empty) {\n        return !!(state.storedMarks || state.selection.$from.marks()).filter((mark)=>{\n            if (!type) {\n                return true;\n            }\n            return type.name === mark.type.name;\n        }).find((mark)=>objectIncludes(mark.attrs, attributes, {\n                strict: false\n            }));\n    }\n    let selectionRange = 0;\n    const markRanges = [];\n    ranges.forEach(({ $from, $to })=>{\n        const from = $from.pos;\n        const to = $to.pos;\n        state.doc.nodesBetween(from, to, (node, pos)=>{\n            if (!node.isText && !node.marks.length) {\n                return;\n            }\n            const relativeFrom = Math.max(from, pos);\n            const relativeTo = Math.min(to, pos + node.nodeSize);\n            const range = relativeTo - relativeFrom;\n            selectionRange += range;\n            markRanges.push(...node.marks.map((mark)=>({\n                    mark,\n                    from: relativeFrom,\n                    to: relativeTo\n                })));\n        });\n    });\n    if (selectionRange === 0) {\n        return false;\n    }\n    // calculate range of matched mark\n    const matchedRange = markRanges.filter((markRange)=>{\n        if (!type) {\n            return true;\n        }\n        return type.name === markRange.mark.type.name;\n    }).filter((markRange)=>objectIncludes(markRange.mark.attrs, attributes, {\n            strict: false\n        })).reduce((sum, markRange)=>sum + markRange.to - markRange.from, 0);\n    // calculate range of marks that excludes the searched mark\n    // for example `code` doesn’t allow any other marks\n    const excludedRange = markRanges.filter((markRange)=>{\n        if (!type) {\n            return true;\n        }\n        return markRange.mark.type !== type && markRange.mark.type.excludes(type);\n    }).reduce((sum, markRange)=>sum + markRange.to - markRange.from, 0);\n    // we only include the result of `excludedRange`\n    // if there is a match at all\n    const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\n    return range >= selectionRange;\n}\nfunction isActive(state, name, attributes = {}) {\n    if (!name) {\n        return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\n    }\n    const schemaType = getSchemaTypeNameByName(name, state.schema);\n    if (schemaType === \"node\") {\n        return isNodeActive(state, name, attributes);\n    }\n    if (schemaType === \"mark\") {\n        return isMarkActive(state, name, attributes);\n    }\n    return false;\n}\nconst isAtEndOfNode = (state, nodeType)=>{\n    const { $from, $to, $anchor } = state.selection;\n    if (nodeType) {\n        const parentNode = findParentNode((node)=>node.type.name === nodeType)(state.selection);\n        if (!parentNode) {\n            return false;\n        }\n        const $parentPos = state.doc.resolve(parentNode.pos + 1);\n        if ($anchor.pos + 1 === $parentPos.end()) {\n            return true;\n        }\n        return false;\n    }\n    if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\n        return false;\n    }\n    return true;\n};\nconst isAtStartOfNode = (state)=>{\n    const { $from, $to } = state.selection;\n    if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\n        return false;\n    }\n    return true;\n};\nfunction isList(name, extensions) {\n    const { nodeExtensions } = splitExtensions(extensions);\n    const extension = nodeExtensions.find((item)=>item.name === name);\n    if (!extension) {\n        return false;\n    }\n    const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage\n    };\n    const group = callOrReturn(getExtensionField(extension, \"group\", context));\n    if (typeof group !== \"string\") {\n        return false;\n    }\n    return group.split(\" \").includes(\"list\");\n}\nfunction isNodeEmpty(node) {\n    var _a;\n    const defaultContent = (_a = node.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();\n    const content = node.toJSON();\n    return JSON.stringify(defaultContent) === JSON.stringify(content);\n}\nfunction isNodeSelection(value) {\n    return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection;\n}\nfunction posToDOMRect(view, from, to) {\n    const minPos = 0;\n    const maxPos = view.state.doc.content.size;\n    const resolvedFrom = minMax(from, minPos, maxPos);\n    const resolvedEnd = minMax(to, minPos, maxPos);\n    const start = view.coordsAtPos(resolvedFrom);\n    const end = view.coordsAtPos(resolvedEnd, -1);\n    const top = Math.min(start.top, end.top);\n    const bottom = Math.max(start.bottom, end.bottom);\n    const left = Math.min(start.left, end.left);\n    const right = Math.max(start.right, end.right);\n    const width = right - left;\n    const height = bottom - top;\n    const x = left;\n    const y = top;\n    const data = {\n        top,\n        bottom,\n        left,\n        right,\n        width,\n        height,\n        x,\n        y\n    };\n    return {\n        ...data,\n        toJSON: ()=>data\n    };\n}\nfunction canSetMark(state, tr, newMarkType) {\n    var _a;\n    const { selection } = tr;\n    let cursor = null;\n    if (isTextSelection(selection)) {\n        cursor = selection.$cursor;\n    }\n    if (cursor) {\n        const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();\n        // There can be no current marks that exclude the new mark\n        return !!newMarkType.isInSet(currentMarks) || !currentMarks.some((mark)=>mark.type.excludes(newMarkType));\n    }\n    const { ranges } = selection;\n    return ranges.some(({ $from, $to })=>{\n        let someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false;\n        state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent)=>{\n            // If we already found a mark that we can enable, return false to bypass the remaining search\n            if (someNodeSupportsMark) {\n                return false;\n            }\n            if (node.isInline) {\n                const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);\n                const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks) || !node.marks.some((otherMark)=>otherMark.type.excludes(newMarkType));\n                someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;\n            }\n            return !someNodeSupportsMark;\n        });\n        return someNodeSupportsMark;\n    });\n}\nconst setMark = (typeOrName, attributes = {})=>({ tr, state, dispatch })=>{\n        const { selection } = tr;\n        const { empty, ranges } = selection;\n        const type = getMarkType(typeOrName, state.schema);\n        if (dispatch) {\n            if (empty) {\n                const oldAttributes = getMarkAttributes(state, type);\n                tr.addStoredMark(type.create({\n                    ...oldAttributes,\n                    ...attributes\n                }));\n            } else {\n                ranges.forEach((range)=>{\n                    const from = range.$from.pos;\n                    const to = range.$to.pos;\n                    state.doc.nodesBetween(from, to, (node, pos)=>{\n                        const trimmedFrom = Math.max(pos, from);\n                        const trimmedTo = Math.min(pos + node.nodeSize, to);\n                        const someHasMark = node.marks.find((mark)=>mark.type === type);\n                        // if there is already a mark of this type\n                        // we know that we have to merge its attributes\n                        // otherwise we add a fresh new mark\n                        if (someHasMark) {\n                            node.marks.forEach((mark)=>{\n                                if (type === mark.type) {\n                                    tr.addMark(trimmedFrom, trimmedTo, type.create({\n                                        ...mark.attrs,\n                                        ...attributes\n                                    }));\n                                }\n                            });\n                        } else {\n                            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\n                        }\n                    });\n                });\n            }\n        }\n        return canSetMark(state, tr, type);\n    };\nconst setMeta = (key, value)=>({ tr })=>{\n        tr.setMeta(key, value);\n        return true;\n    };\nconst setNode = (typeOrName, attributes = {})=>({ state, dispatch, chain })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        // TODO: use a fallback like insertContent?\n        if (!type.isTextblock) {\n            console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\n            return false;\n        }\n        return chain()// try to convert node to default node if needed\n        .command(({ commands })=>{\n            const canSetBlock = (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, attributes)(state);\n            if (canSetBlock) {\n                return true;\n            }\n            return commands.clearNodes();\n        }).command(({ state: updatedState })=>{\n            return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, attributes)(updatedState, dispatch);\n        }).run();\n    };\nconst setNodeSelection = (position)=>({ tr, dispatch })=>{\n        if (dispatch) {\n            const { doc } = tr;\n            const from = minMax(position, 0, doc.content.size);\n            const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(doc, from);\n            tr.setSelection(selection);\n        }\n        return true;\n    };\nconst setTextSelection = (position)=>({ tr, dispatch })=>{\n        if (dispatch) {\n            const { doc } = tr;\n            const { from, to } = typeof position === \"number\" ? {\n                from: position,\n                to: position\n            } : position;\n            const minPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atStart(doc).from;\n            const maxPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atEnd(doc).to;\n            const resolvedFrom = minMax(from, minPos, maxPos);\n            const resolvedEnd = minMax(to, minPos, maxPos);\n            const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, resolvedFrom, resolvedEnd);\n            tr.setSelection(selection);\n        }\n        return true;\n    };\nconst sinkListItem = (typeOrName)=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.sinkListItem)(type)(state, dispatch);\n    };\nfunction ensureMarks(state, splittableMarks) {\n    const marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n    if (marks) {\n        const filteredMarks = marks.filter((mark)=>splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));\n        state.tr.ensureMarks(filteredMarks);\n    }\n}\nconst splitBlock = ({ keepMarks = true } = {})=>({ tr, state, dispatch, editor })=>{\n        const { selection, doc } = tr;\n        const { $from, $to } = selection;\n        const extensionAttributes = editor.extensionManager.attributes;\n        const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n        if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection && selection.node.isBlock) {\n            if (!$from.parentOffset || !(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(doc, $from.pos)) {\n                return false;\n            }\n            if (dispatch) {\n                if (keepMarks) {\n                    ensureMarks(state, editor.extensionManager.splittableMarks);\n                }\n                tr.split($from.pos).scrollIntoView();\n            }\n            return true;\n        }\n        if (!$from.parent.isBlock) {\n            return false;\n        }\n        if (dispatch) {\n            const atEnd = $to.parentOffset === $to.parent.content.size;\n            if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection) {\n                tr.deleteSelection();\n            }\n            const deflt = $from.depth === 0 ? undefined : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n            let types = atEnd && deflt ? [\n                {\n                    type: deflt,\n                    attrs: newAttributes\n                }\n            ] : undefined;\n            let can = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, types);\n            if (!types && !can && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [\n                {\n                    type: deflt\n                }\n            ] : undefined)) {\n                can = true;\n                types = deflt ? [\n                    {\n                        type: deflt,\n                        attrs: newAttributes\n                    }\n                ] : undefined;\n            }\n            if (can) {\n                tr.split(tr.mapping.map($from.pos), 1, types);\n                if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n                    const first = tr.mapping.map($from.before());\n                    const $first = tr.doc.resolve(first);\n                    if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n                        tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n                    }\n                }\n            }\n            if (keepMarks) {\n                ensureMarks(state, editor.extensionManager.splittableMarks);\n            }\n            tr.scrollIntoView();\n        }\n        return true;\n    };\nconst splitListItem = (typeOrName)=>({ tr, state, dispatch, editor })=>{\n        var _a;\n        const type = getNodeType(typeOrName, state.schema);\n        const { $from, $to } = state.selection;\n        // @ts-ignore\n        // eslint-disable-next-line\n        const node = state.selection.node;\n        if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) {\n            return false;\n        }\n        const grandParent = $from.node(-1);\n        if (grandParent.type !== type) {\n            return false;\n        }\n        const extensionAttributes = editor.extensionManager.attributes;\n        if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n            // In an empty block. If this is a nested list, the wrapping\n            // list item should be split. Otherwise, bail out and let next\n            // command handle lifting.\n            if ($from.depth === 2 || $from.node(-3).type !== type || $from.index(-2) !== $from.node(-2).childCount - 1) {\n                return false;\n            }\n            if (dispatch) {\n                let wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.empty;\n                // eslint-disable-next-line\n                const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n                // Build a fragment containing empty versions of the structure\n                // from the outer list item to the parent node of the cursor\n                for(let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1){\n                    wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from($from.node(d).copy(wrap));\n                }\n                // eslint-disable-next-line\n                const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n                // Add a second list item with an empty default start node\n                const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n                const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;\n                wrap = wrap.append(_tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from(type.createAndFill(null, nextType) || undefined));\n                const start = $from.before($from.depth - (depthBefore - 1));\n                tr.replace(start, $from.after(-depthAfter), new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Slice(wrap, 4 - depthBefore, 0));\n                let sel = -1;\n                tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos)=>{\n                    if (sel > -1) {\n                        return false;\n                    }\n                    if (n.isTextblock && n.content.size === 0) {\n                        sel = pos + 1;\n                    }\n                });\n                if (sel > -1) {\n                    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve(sel)));\n                }\n                tr.scrollIntoView();\n            }\n            return true;\n        }\n        const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n        const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);\n        const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n        tr.delete($from.pos, $to.pos);\n        const types = nextType ? [\n            {\n                type,\n                attrs: newTypeAttributes\n            },\n            {\n                type: nextType,\n                attrs: newNextTypeAttributes\n            }\n        ] : [\n            {\n                type,\n                attrs: newTypeAttributes\n            }\n        ];\n        if (!(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, $from.pos, 2)) {\n            return false;\n        }\n        if (dispatch) {\n            const { selection, storedMarks } = state;\n            const { splittableMarks } = editor.extensionManager;\n            const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n            tr.split($from.pos, 2, types).scrollIntoView();\n            if (!marks || !dispatch) {\n                return true;\n            }\n            const filteredMarks = marks.filter((mark)=>splittableMarks.includes(mark.type.name));\n            tr.ensureMarks(filteredMarks);\n        }\n        return true;\n    };\nconst joinListBackwards = (tr, listType)=>{\n    const list = findParentNode((node)=>node.type === listType)(tr.selection);\n    if (!list) {\n        return true;\n    }\n    const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\n    if (before === undefined) {\n        return true;\n    }\n    const nodeBefore = tr.doc.nodeAt(before);\n    const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, list.pos);\n    if (!canJoinBackwards) {\n        return true;\n    }\n    tr.join(list.pos);\n    return true;\n};\nconst joinListForwards = (tr, listType)=>{\n    const list = findParentNode((node)=>node.type === listType)(tr.selection);\n    if (!list) {\n        return true;\n    }\n    const after = tr.doc.resolve(list.start).after(list.depth);\n    if (after === undefined) {\n        return true;\n    }\n    const nodeAfter = tr.doc.nodeAt(after);\n    const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, after);\n    if (!canJoinForwards) {\n        return true;\n    }\n    tr.join(after);\n    return true;\n};\nconst toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {})=>({ editor, tr, state, dispatch, chain, commands, can })=>{\n        const { extensions, splittableMarks } = editor.extensionManager;\n        const listType = getNodeType(listTypeOrName, state.schema);\n        const itemType = getNodeType(itemTypeOrName, state.schema);\n        const { selection, storedMarks } = state;\n        const { $from, $to } = selection;\n        const range = $from.blockRange($to);\n        const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n        if (!range) {\n            return false;\n        }\n        const parentList = findParentNode((node)=>isList(node.type.name, extensions))(selection);\n        if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n            // remove list\n            if (parentList.node.type === listType) {\n                return commands.liftListItem(itemType);\n            }\n            // change list type\n            if (isList(parentList.node.type.name, extensions) && listType.validContent(parentList.node.content) && dispatch) {\n                return chain().command(()=>{\n                    tr.setNodeMarkup(parentList.pos, listType);\n                    return true;\n                }).command(()=>joinListBackwards(tr, listType)).command(()=>joinListForwards(tr, listType)).run();\n            }\n        }\n        if (!keepMarks || !marks || !dispatch) {\n            return chain()// try to convert node to default node if needed\n            .command(()=>{\n                const canWrapInList = can().wrapInList(listType, attributes);\n                if (canWrapInList) {\n                    return true;\n                }\n                return commands.clearNodes();\n            }).wrapInList(listType, attributes).command(()=>joinListBackwards(tr, listType)).command(()=>joinListForwards(tr, listType)).run();\n        }\n        return chain()// try to convert node to default node if needed\n        .command(()=>{\n            const canWrapInList = can().wrapInList(listType, attributes);\n            const filteredMarks = marks.filter((mark)=>splittableMarks.includes(mark.type.name));\n            tr.ensureMarks(filteredMarks);\n            if (canWrapInList) {\n                return true;\n            }\n            return commands.clearNodes();\n        }).wrapInList(listType, attributes).command(()=>joinListBackwards(tr, listType)).command(()=>joinListForwards(tr, listType)).run();\n    };\nconst toggleMark = (typeOrName, attributes = {}, options = {})=>({ state, commands })=>{\n        const { extendEmptyMarkRange = false } = options;\n        const type = getMarkType(typeOrName, state.schema);\n        const isActive = isMarkActive(state, type, attributes);\n        if (isActive) {\n            return commands.unsetMark(type, {\n                extendEmptyMarkRange\n            });\n        }\n        return commands.setMark(type, attributes);\n    };\nconst toggleNode = (typeOrName, toggleTypeOrName, attributes = {})=>({ state, commands })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        const toggleType = getNodeType(toggleTypeOrName, state.schema);\n        const isActive = isNodeActive(state, type, attributes);\n        if (isActive) {\n            return commands.setNode(toggleType);\n        }\n        return commands.setNode(type, attributes);\n    };\nconst toggleWrap = (typeOrName, attributes = {})=>({ state, commands })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        const isActive = isNodeActive(state, type, attributes);\n        if (isActive) {\n            return commands.lift(type);\n        }\n        return commands.wrapIn(type, attributes);\n    };\nconst undoInputRule = ()=>({ state, dispatch })=>{\n        const plugins = state.plugins;\n        for(let i = 0; i < plugins.length; i += 1){\n            const plugin = plugins[i];\n            let undoable;\n            // @ts-ignore\n            // eslint-disable-next-line\n            if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n                if (dispatch) {\n                    const tr = state.tr;\n                    const toUndo = undoable.transform;\n                    for(let j = toUndo.steps.length - 1; j >= 0; j -= 1){\n                        tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\n                    }\n                    if (undoable.text) {\n                        const marks = tr.doc.resolve(undoable.from).marks();\n                        tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\n                    } else {\n                        tr.delete(undoable.from, undoable.to);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    };\nconst unsetAllMarks = ()=>({ tr, dispatch })=>{\n        const { selection } = tr;\n        const { empty, ranges } = selection;\n        if (empty) {\n            return true;\n        }\n        if (dispatch) {\n            ranges.forEach((range)=>{\n                tr.removeMark(range.$from.pos, range.$to.pos);\n            });\n        }\n        return true;\n    };\nconst unsetMark = (typeOrName, options = {})=>({ tr, state, dispatch })=>{\n        var _a;\n        const { extendEmptyMarkRange = false } = options;\n        const { selection } = tr;\n        const type = getMarkType(typeOrName, state.schema);\n        const { $from, empty, ranges } = selection;\n        if (!dispatch) {\n            return true;\n        }\n        if (empty && extendEmptyMarkRange) {\n            let { from, to } = selection;\n            const attrs = (_a = $from.marks().find((mark)=>mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;\n            const range = getMarkRange($from, type, attrs);\n            if (range) {\n                from = range.from;\n                to = range.to;\n            }\n            tr.removeMark(from, to, type);\n        } else {\n            ranges.forEach((range)=>{\n                tr.removeMark(range.$from.pos, range.$to.pos, type);\n            });\n        }\n        tr.removeStoredMark(type);\n        return true;\n    };\nconst updateAttributes = (typeOrName, attributes = {})=>({ tr, state, dispatch })=>{\n        let nodeType = null;\n        let markType = null;\n        const schemaType = getSchemaTypeNameByName(typeof typeOrName === \"string\" ? typeOrName : typeOrName.name, state.schema);\n        if (!schemaType) {\n            return false;\n        }\n        if (schemaType === \"node\") {\n            nodeType = getNodeType(typeOrName, state.schema);\n        }\n        if (schemaType === \"mark\") {\n            markType = getMarkType(typeOrName, state.schema);\n        }\n        if (dispatch) {\n            tr.selection.ranges.forEach((range)=>{\n                const from = range.$from.pos;\n                const to = range.$to.pos;\n                state.doc.nodesBetween(from, to, (node, pos)=>{\n                    if (nodeType && nodeType === node.type) {\n                        tr.setNodeMarkup(pos, undefined, {\n                            ...node.attrs,\n                            ...attributes\n                        });\n                    }\n                    if (markType && node.marks.length) {\n                        node.marks.forEach((mark)=>{\n                            if (markType === mark.type) {\n                                const trimmedFrom = Math.max(pos, from);\n                                const trimmedTo = Math.min(pos + node.nodeSize, to);\n                                tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                                    ...mark.attrs,\n                                    ...attributes\n                                }));\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        return true;\n    };\nconst wrapIn = (typeOrName, attributes = {})=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.wrapIn)(type, attributes)(state, dispatch);\n    };\nconst wrapInList = (typeOrName, attributes = {})=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.wrapInList)(type, attributes)(state, dispatch);\n    };\nvar commands = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    blur: blur,\n    clearContent: clearContent,\n    clearNodes: clearNodes,\n    command: command,\n    createParagraphNear: createParagraphNear,\n    cut: cut,\n    deleteCurrentNode: deleteCurrentNode,\n    deleteNode: deleteNode,\n    deleteRange: deleteRange,\n    deleteSelection: deleteSelection,\n    enter: enter,\n    exitCode: exitCode,\n    extendMarkRange: extendMarkRange,\n    first: first,\n    focus: focus,\n    forEach: forEach,\n    insertContent: insertContent,\n    insertContentAt: insertContentAt,\n    joinUp: joinUp,\n    joinDown: joinDown,\n    joinBackward: joinBackward,\n    joinForward: joinForward,\n    joinItemBackward: joinItemBackward,\n    joinItemForward: joinItemForward,\n    keyboardShortcut: keyboardShortcut,\n    lift: lift,\n    liftEmptyBlock: liftEmptyBlock,\n    liftListItem: liftListItem,\n    newlineInCode: newlineInCode,\n    resetAttributes: resetAttributes,\n    scrollIntoView: scrollIntoView,\n    selectAll: selectAll,\n    selectNodeBackward: selectNodeBackward,\n    selectNodeForward: selectNodeForward,\n    selectParentNode: selectParentNode,\n    selectTextblockEnd: selectTextblockEnd,\n    selectTextblockStart: selectTextblockStart,\n    setContent: setContent,\n    setMark: setMark,\n    setMeta: setMeta,\n    setNode: setNode,\n    setNodeSelection: setNodeSelection,\n    setTextSelection: setTextSelection,\n    sinkListItem: sinkListItem,\n    splitBlock: splitBlock,\n    splitListItem: splitListItem,\n    toggleList: toggleList,\n    toggleMark: toggleMark,\n    toggleNode: toggleNode,\n    toggleWrap: toggleWrap,\n    undoInputRule: undoInputRule,\n    unsetAllMarks: unsetAllMarks,\n    unsetMark: unsetMark,\n    updateAttributes: updateAttributes,\n    wrapIn: wrapIn,\n    wrapInList: wrapInList\n});\nconst Commands = Extension.create({\n    name: \"commands\",\n    addCommands () {\n        return {\n            ...commands\n        };\n    }\n});\nconst Editable = Extension.create({\n    name: \"editable\",\n    addProseMirrorPlugins () {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"editable\"),\n                props: {\n                    editable: ()=>this.editor.options.editable\n                }\n            })\n        ];\n    }\n});\nconst FocusEvents = Extension.create({\n    name: \"focusEvents\",\n    addProseMirrorPlugins () {\n        const { editor } = this;\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"focusEvents\"),\n                props: {\n                    handleDOMEvents: {\n                        focus: (view, event)=>{\n                            editor.isFocused = true;\n                            const transaction = editor.state.tr.setMeta(\"focus\", {\n                                event\n                            }).setMeta(\"addToHistory\", false);\n                            view.dispatch(transaction);\n                            return false;\n                        },\n                        blur: (view, event)=>{\n                            editor.isFocused = false;\n                            const transaction = editor.state.tr.setMeta(\"blur\", {\n                                event\n                            }).setMeta(\"addToHistory\", false);\n                            view.dispatch(transaction);\n                            return false;\n                        }\n                    }\n                }\n            })\n        ];\n    }\n});\nconst Keymap = Extension.create({\n    name: \"keymap\",\n    addKeyboardShortcuts () {\n        const handleBackspace = ()=>this.editor.commands.first(({ commands })=>[\n                    ()=>commands.undoInputRule(),\n                    // maybe convert first text block node to default node\n                    ()=>commands.command(({ tr })=>{\n                            const { selection, doc } = tr;\n                            const { empty, $anchor } = selection;\n                            const { pos, parent } = $anchor;\n                            const $parentPos = $anchor.parent.isTextblock ? tr.doc.resolve(pos - 1) : $anchor;\n                            const parentIsIsolating = $parentPos.parent.type.spec.isolating;\n                            const parentPos = $anchor.pos - $anchor.parentOffset;\n                            const isAtStart = parentIsIsolating && $parentPos.parent.childCount === 1 ? parentPos === $anchor.pos : _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc).from === pos;\n                            if (!empty || !isAtStart || !parent.type.isTextblock || parent.textContent.length) {\n                                return false;\n                            }\n                            return commands.clearNodes();\n                        }),\n                    ()=>commands.deleteSelection(),\n                    ()=>commands.joinBackward(),\n                    ()=>commands.selectNodeBackward()\n                ]);\n        const handleDelete = ()=>this.editor.commands.first(({ commands })=>[\n                    ()=>commands.deleteSelection(),\n                    ()=>commands.deleteCurrentNode(),\n                    ()=>commands.joinForward(),\n                    ()=>commands.selectNodeForward()\n                ]);\n        const handleEnter = ()=>this.editor.commands.first(({ commands })=>[\n                    ()=>commands.newlineInCode(),\n                    ()=>commands.createParagraphNear(),\n                    ()=>commands.liftEmptyBlock(),\n                    ()=>commands.splitBlock()\n                ]);\n        const baseKeymap = {\n            Enter: handleEnter,\n            \"Mod-Enter\": ()=>this.editor.commands.exitCode(),\n            Backspace: handleBackspace,\n            \"Mod-Backspace\": handleBackspace,\n            \"Shift-Backspace\": handleBackspace,\n            Delete: handleDelete,\n            \"Mod-Delete\": handleDelete,\n            \"Mod-a\": ()=>this.editor.commands.selectAll()\n        };\n        const pcKeymap = {\n            ...baseKeymap\n        };\n        const macKeymap = {\n            ...baseKeymap,\n            \"Ctrl-h\": handleBackspace,\n            \"Alt-Backspace\": handleBackspace,\n            \"Ctrl-d\": handleDelete,\n            \"Ctrl-Alt-Backspace\": handleDelete,\n            \"Alt-Delete\": handleDelete,\n            \"Alt-d\": handleDelete,\n            \"Ctrl-a\": ()=>this.editor.commands.selectTextblockStart(),\n            \"Ctrl-e\": ()=>this.editor.commands.selectTextblockEnd()\n        };\n        if (isiOS() || isMacOS()) {\n            return macKeymap;\n        }\n        return pcKeymap;\n    },\n    addProseMirrorPlugins () {\n        return [\n            // With this plugin we check if the whole document was selected and deleted.\n            // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n            // to a paragraph if necessary.\n            // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n            // with many other commands.\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"clearDocument\"),\n                appendTransaction: (transactions, oldState, newState)=>{\n                    const docChanges = transactions.some((transaction)=>transaction.docChanged) && !oldState.doc.eq(newState.doc);\n                    if (!docChanges) {\n                        return;\n                    }\n                    const { empty, from, to } = oldState.selection;\n                    const allFrom = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(oldState.doc).from;\n                    const allEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(oldState.doc).to;\n                    const allWasSelected = from === allFrom && to === allEnd;\n                    if (empty || !allWasSelected) {\n                        return;\n                    }\n                    const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, \" \", \" \").length === 0;\n                    if (!isEmpty) {\n                        return;\n                    }\n                    const tr = newState.tr;\n                    const state = createChainableState({\n                        state: newState,\n                        transaction: tr\n                    });\n                    const { commands } = new CommandManager({\n                        editor: this.editor,\n                        state\n                    });\n                    commands.clearNodes();\n                    if (!tr.steps.length) {\n                        return;\n                    }\n                    return tr;\n                }\n            })\n        ];\n    }\n});\nconst Tabindex = Extension.create({\n    name: \"tabindex\",\n    addProseMirrorPlugins () {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"tabindex\"),\n                props: {\n                    attributes: this.editor.isEditable ? {\n                        tabindex: \"0\"\n                    } : {}\n                }\n            })\n        ];\n    }\n});\nvar extensions = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    ClipboardTextSerializer: ClipboardTextSerializer,\n    Commands: Commands,\n    Editable: Editable,\n    FocusEvents: FocusEvents,\n    Keymap: Keymap,\n    Tabindex: Tabindex\n});\nconst style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`;\nfunction createStyleTag(style, nonce, suffix) {\n    const tiptapStyleTag = document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : \"\"}]`);\n    if (tiptapStyleTag !== null) {\n        return tiptapStyleTag;\n    }\n    const styleNode = document.createElement(\"style\");\n    if (nonce) {\n        styleNode.setAttribute(\"nonce\", nonce);\n    }\n    styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : \"\"}`, \"\");\n    styleNode.innerHTML = style;\n    document.getElementsByTagName(\"head\")[0].appendChild(styleNode);\n    return styleNode;\n}\nclass Editor extends EventEmitter {\n    constructor(options = {}){\n        super();\n        this.isFocused = false;\n        this.extensionStorage = {};\n        this.options = {\n            element: document.createElement(\"div\"),\n            content: \"\",\n            injectCSS: true,\n            injectNonce: undefined,\n            extensions: [],\n            autofocus: false,\n            editable: true,\n            editorProps: {},\n            parseOptions: {},\n            enableInputRules: true,\n            enablePasteRules: true,\n            enableCoreExtensions: true,\n            onBeforeCreate: ()=>null,\n            onCreate: ()=>null,\n            onUpdate: ()=>null,\n            onSelectionUpdate: ()=>null,\n            onTransaction: ()=>null,\n            onFocus: ()=>null,\n            onBlur: ()=>null,\n            onDestroy: ()=>null\n        };\n        this.isCapturingTransaction = false;\n        this.capturedTransaction = null;\n        this.setOptions(options);\n        this.createExtensionManager();\n        this.createCommandManager();\n        this.createSchema();\n        this.on(\"beforeCreate\", this.options.onBeforeCreate);\n        this.emit(\"beforeCreate\", {\n            editor: this\n        });\n        this.createView();\n        this.injectCSS();\n        this.on(\"create\", this.options.onCreate);\n        this.on(\"update\", this.options.onUpdate);\n        this.on(\"selectionUpdate\", this.options.onSelectionUpdate);\n        this.on(\"transaction\", this.options.onTransaction);\n        this.on(\"focus\", this.options.onFocus);\n        this.on(\"blur\", this.options.onBlur);\n        this.on(\"destroy\", this.options.onDestroy);\n        window.setTimeout(()=>{\n            if (this.isDestroyed) {\n                return;\n            }\n            this.commands.focus(this.options.autofocus);\n            this.emit(\"create\", {\n                editor: this\n            });\n        }, 0);\n    }\n    /**\r\n     * Returns the editor storage.\r\n     */ get storage() {\n        return this.extensionStorage;\n    }\n    /**\r\n     * An object of all registered commands.\r\n     */ get commands() {\n        return this.commandManager.commands;\n    }\n    /**\r\n     * Create a command chain to call multiple commands at once.\r\n     */ chain() {\n        return this.commandManager.chain();\n    }\n    /**\r\n     * Check if a command or a command chain can be executed. Without executing it.\r\n     */ can() {\n        return this.commandManager.can();\n    }\n    /**\r\n     * Inject CSS styles.\r\n     */ injectCSS() {\n        if (this.options.injectCSS && document) {\n            this.css = createStyleTag(style, this.options.injectNonce);\n        }\n    }\n    /**\r\n     * Update editor options.\r\n     *\r\n     * @param options A list of options\r\n     */ setOptions(options = {}) {\n        this.options = {\n            ...this.options,\n            ...options\n        };\n        if (!this.view || !this.state || this.isDestroyed) {\n            return;\n        }\n        if (this.options.editorProps) {\n            this.view.setProps(this.options.editorProps);\n        }\n        this.view.updateState(this.state);\n    }\n    /**\r\n     * Update editable state of the editor.\r\n     */ setEditable(editable, emitUpdate = true) {\n        this.setOptions({\n            editable\n        });\n        if (emitUpdate) {\n            this.emit(\"update\", {\n                editor: this,\n                transaction: this.state.tr\n            });\n        }\n    }\n    /**\r\n     * Returns whether the editor is editable.\r\n     */ get isEditable() {\n        // since plugins are applied after creating the view\n        // `editable` is always `true` for one tick.\n        // that’s why we also have to check for `options.editable`\n        return this.options.editable && this.view && this.view.editable;\n    }\n    /**\r\n     * Returns the editor state.\r\n     */ get state() {\n        return this.view.state;\n    }\n    /**\r\n     * Register a ProseMirror plugin.\r\n     *\r\n     * @param plugin A ProseMirror plugin\r\n     * @param handlePlugins Control how to merge the plugin into the existing plugins.\r\n     */ registerPlugin(plugin, handlePlugins) {\n        const plugins = isFunction(handlePlugins) ? handlePlugins(plugin, [\n            ...this.state.plugins\n        ]) : [\n            ...this.state.plugins,\n            plugin\n        ];\n        const state = this.state.reconfigure({\n            plugins\n        });\n        this.view.updateState(state);\n    }\n    /**\r\n     * Unregister a ProseMirror plugin.\r\n     *\r\n     * @param nameOrPluginKey The plugins name\r\n     */ unregisterPlugin(nameOrPluginKey) {\n        if (this.isDestroyed) {\n            return;\n        }\n        // @ts-ignore\n        const name = typeof nameOrPluginKey === \"string\" ? `${nameOrPluginKey}$` : nameOrPluginKey.key;\n        const state = this.state.reconfigure({\n            // @ts-ignore\n            plugins: this.state.plugins.filter((plugin)=>!plugin.key.startsWith(name))\n        });\n        this.view.updateState(state);\n    }\n    /**\r\n     * Creates an extension manager.\r\n     */ createExtensionManager() {\n        const coreExtensions = this.options.enableCoreExtensions ? Object.values(extensions) : [];\n        const allExtensions = [\n            ...coreExtensions,\n            ...this.options.extensions\n        ].filter((extension)=>{\n            return [\n                \"extension\",\n                \"node\",\n                \"mark\"\n            ].includes(extension === null || extension === void 0 ? void 0 : extension.type);\n        });\n        this.extensionManager = new ExtensionManager(allExtensions, this);\n    }\n    /**\r\n     * Creates an command manager.\r\n     */ createCommandManager() {\n        this.commandManager = new CommandManager({\n            editor: this\n        });\n    }\n    /**\r\n     * Creates a ProseMirror schema.\r\n     */ createSchema() {\n        this.schema = this.extensionManager.schema;\n    }\n    /**\r\n     * Creates a ProseMirror view.\r\n     */ createView() {\n        const doc = createDocument(this.options.content, this.schema, this.options.parseOptions);\n        const selection = resolveFocusPosition(doc, this.options.autofocus);\n        this.view = new _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__.EditorView(this.options.element, {\n            ...this.options.editorProps,\n            dispatchTransaction: this.dispatchTransaction.bind(this),\n            state: _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.EditorState.create({\n                doc,\n                selection: selection || undefined\n            })\n        });\n        // `editor.view` is not yet available at this time.\n        // Therefore we will add all plugins and node views directly afterwards.\n        const newState = this.state.reconfigure({\n            plugins: this.extensionManager.plugins\n        });\n        this.view.updateState(newState);\n        this.createNodeViews();\n        this.prependClass();\n        // Let’s store the editor instance in the DOM element.\n        // So we’ll have access to it for tests.\n        const dom = this.view.dom;\n        dom.editor = this;\n    }\n    /**\r\n     * Creates all node views.\r\n     */ createNodeViews() {\n        this.view.setProps({\n            nodeViews: this.extensionManager.nodeViews\n        });\n    }\n    /**\r\n     * Prepend class name to element.\r\n     */ prependClass() {\n        this.view.dom.className = `tiptap ${this.view.dom.className}`;\n    }\n    captureTransaction(fn) {\n        this.isCapturingTransaction = true;\n        fn();\n        this.isCapturingTransaction = false;\n        const tr = this.capturedTransaction;\n        this.capturedTransaction = null;\n        return tr;\n    }\n    /**\r\n     * The callback over which to send transactions (state updates) produced by the view.\r\n     *\r\n     * @param transaction An editor state transaction\r\n     */ dispatchTransaction(transaction) {\n        // if the editor / the view of the editor was destroyed\n        // the transaction should not be dispatched as there is no view anymore.\n        if (this.view.isDestroyed) {\n            return;\n        }\n        if (this.isCapturingTransaction) {\n            if (!this.capturedTransaction) {\n                this.capturedTransaction = transaction;\n                return;\n            }\n            transaction.steps.forEach((step)=>{\n                var _a;\n                return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step);\n            });\n            return;\n        }\n        const state = this.state.apply(transaction);\n        const selectionHasChanged = !this.state.selection.eq(state.selection);\n        this.view.updateState(state);\n        this.emit(\"transaction\", {\n            editor: this,\n            transaction\n        });\n        if (selectionHasChanged) {\n            this.emit(\"selectionUpdate\", {\n                editor: this,\n                transaction\n            });\n        }\n        const focus = transaction.getMeta(\"focus\");\n        const blur = transaction.getMeta(\"blur\");\n        if (focus) {\n            this.emit(\"focus\", {\n                editor: this,\n                event: focus.event,\n                transaction\n            });\n        }\n        if (blur) {\n            this.emit(\"blur\", {\n                editor: this,\n                event: blur.event,\n                transaction\n            });\n        }\n        if (!transaction.docChanged || transaction.getMeta(\"preventUpdate\")) {\n            return;\n        }\n        this.emit(\"update\", {\n            editor: this,\n            transaction\n        });\n    }\n    /**\r\n     * Get attributes of the currently selected node or mark.\r\n     */ getAttributes(nameOrType) {\n        return getAttributes(this.state, nameOrType);\n    }\n    isActive(nameOrAttributes, attributesOrUndefined) {\n        const name = typeof nameOrAttributes === \"string\" ? nameOrAttributes : null;\n        const attributes = typeof nameOrAttributes === \"string\" ? attributesOrUndefined : nameOrAttributes;\n        return isActive(this.state, name, attributes);\n    }\n    /**\r\n     * Get the document as JSON.\r\n     */ getJSON() {\n        return this.state.doc.toJSON();\n    }\n    /**\r\n     * Get the document as HTML.\r\n     */ getHTML() {\n        return getHTMLFromFragment(this.state.doc.content, this.schema);\n    }\n    /**\r\n     * Get the document as text.\r\n     */ getText(options) {\n        const { blockSeparator = \"\\n\\n\", textSerializers = {} } = options || {};\n        return getText(this.state.doc, {\n            blockSeparator,\n            textSerializers: {\n                ...getTextSerializersFromSchema(this.schema),\n                ...textSerializers\n            }\n        });\n    }\n    /**\r\n     * Check if there is no content.\r\n     */ get isEmpty() {\n        return isNodeEmpty(this.state.doc);\n    }\n    /**\r\n     * Get the number of characters for the current document.\r\n     *\r\n     * @deprecated\r\n     */ getCharacterCount() {\n        console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\n        return this.state.doc.content.size - 2;\n    }\n    /**\r\n     * Destroy the editor.\r\n     */ destroy() {\n        this.emit(\"destroy\");\n        if (this.view) {\n            this.view.destroy();\n        }\n        this.removeAllListeners();\n    }\n    /**\r\n     * Check if the editor is already destroyed.\r\n     */ get isDestroyed() {\n        var _a;\n        // @ts-ignore\n        return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\n    }\n}\n/**\r\n * Build an input rule that adds a mark when the\r\n * matched text is typed into it.\r\n */ function markInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            const attributes = callOrReturn(config.getAttributes, undefined, match);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const { tr } = state;\n            const captureGroup = match[match.length - 1];\n            const fullMatch = match[0];\n            if (captureGroup) {\n                const startSpaces = fullMatch.search(/\\S/);\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\n                const textEnd = textStart + captureGroup.length;\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter((item)=>{\n                    // @ts-ignore\n                    const excluded = item.mark.type.excluded;\n                    return excluded.find((type)=>type === config.type && type !== item.mark.type);\n                }).filter((item)=>item.to > textStart);\n                if (excludedMarks.length) {\n                    return null;\n                }\n                if (textEnd < range.to) {\n                    tr.delete(textEnd, range.to);\n                }\n                if (textStart > range.from) {\n                    tr.delete(range.from + startSpaces, textStart);\n                }\n                const markEnd = range.from + startSpaces + captureGroup.length;\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n                tr.removeStoredMark(config.type);\n            }\n        }\n    });\n}\n/**\r\n * Build an input rule that adds a node when the\r\n * matched text is typed into it.\r\n */ function nodeInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            const { tr } = state;\n            const start = range.from;\n            let end = range.to;\n            const newNode = config.type.create(attributes);\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                let matchStart = start + offset;\n                if (matchStart > end) {\n                    matchStart = end;\n                } else {\n                    end = matchStart + match[1].length;\n                }\n                // insert last typed character\n                const lastChar = match[0][match[0].length - 1];\n                tr.insertText(lastChar, start + match[0].length - 1);\n                // insert node from input rule\n                tr.replaceWith(matchStart, end, newNode);\n            } else if (match[0]) {\n                tr.insert(start - 1, config.type.create(attributes)).delete(tr.mapping.map(start), tr.mapping.map(end));\n            }\n            tr.scrollIntoView();\n        }\n    });\n}\n/**\r\n * Build an input rule that changes the type of a textblock when the\r\n * matched text is typed into it. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n */ function textblockTypeInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            const $start = state.doc.resolve(range.from);\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n                return null;\n            }\n            state.tr.delete(range.from, range.to).setBlockType(range.from, range.from, config.type, attributes);\n        }\n    });\n}\n/**\r\n * Build an input rule that replaces text when the\r\n * matched text is typed into it.\r\n */ function textInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            let insert = config.replace;\n            let start = range.from;\n            const end = range.to;\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                insert += match[0].slice(offset + match[1].length);\n                start += offset;\n                const cutOff = start - end;\n                if (cutOff > 0) {\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\n                    start = end;\n                }\n            }\n            state.tr.insertText(insert, start, end);\n        }\n    });\n}\n/**\r\n * Build an input rule for automatically wrapping a textblock when a\r\n * given string is typed. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n *\r\n * `type` is the type of node to wrap in.\r\n *\r\n * By default, if there’s a node with the same type above the newly\r\n * wrapped node, the rule will try to join those\r\n * two nodes. You can pass a join predicate, which takes a regular\r\n * expression match and the node before the wrapped node, and can\r\n * return a boolean to indicate whether a join should happen.\r\n */ function wrappingInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match, chain })=>{\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            const tr = state.tr.delete(range.from, range.to);\n            const $start = tr.doc.resolve(range.from);\n            const blockRange = $start.blockRange();\n            const wrapping = blockRange && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.findWrapping)(blockRange, config.type, attributes);\n            if (!wrapping) {\n                return null;\n            }\n            tr.wrap(blockRange, wrapping);\n            if (config.keepMarks && config.editor) {\n                const { selection, storedMarks } = state;\n                const { splittableMarks } = config.editor.extensionManager;\n                const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n                if (marks) {\n                    const filteredMarks = marks.filter((mark)=>splittableMarks.includes(mark.type.name));\n                    tr.ensureMarks(filteredMarks);\n                }\n            }\n            if (config.keepAttributes) {\n                /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */ const nodeType = config.type.name === \"bulletList\" || config.type.name === \"orderedList\" ? \"listItem\" : \"taskList\";\n                chain().updateAttributes(nodeType, attributes).run();\n            }\n            const before = tr.doc.resolve(range.from - 1).nodeBefore;\n            if (before && before.type === config.type && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, range.from - 1) && (!config.joinPredicate || config.joinPredicate(match, before))) {\n                tr.join(range.from - 1);\n            }\n        }\n    });\n}\nclass Mark {\n    constructor(config = {}){\n        this.type = \"mark\";\n        this.name = \"mark\";\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {}\n        };\n        this.config = {\n            ...this.config,\n            ...config\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, \"addOptions\", {\n                name: this.name\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, \"addStorage\", {\n            name: this.name,\n            options: this.options\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Mark(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend();\n        extension.options = mergeDeep(this.options, options);\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Mark(extendedConfig);\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, \"addOptions\", {\n            name: extension.name\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n    static handleExit({ editor, mark }) {\n        const { tr } = editor.state;\n        const currentPos = editor.state.selection.$from;\n        const isAtEnd = currentPos.pos === currentPos.end();\n        if (isAtEnd) {\n            const currentMarks = currentPos.marks();\n            const isInMark = !!currentMarks.find((m)=>(m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n            if (!isInMark) {\n                return false;\n            }\n            const removeMark = currentMarks.find((m)=>(m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n            if (removeMark) {\n                tr.removeStoredMark(removeMark);\n            }\n            tr.insertText(\" \", currentPos.pos);\n            editor.view.dispatch(tr);\n            return true;\n        }\n        return false;\n    }\n}\nclass Node {\n    constructor(config = {}){\n        this.type = \"node\";\n        this.name = \"node\";\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {}\n        };\n        this.config = {\n            ...this.config,\n            ...config\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, \"addOptions\", {\n                name: this.name\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, \"addStorage\", {\n            name: this.name,\n            options: this.options\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Node(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend();\n        extension.options = mergeDeep(this.options, options);\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Node(extendedConfig);\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, \"addOptions\", {\n            name: extension.name\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n}\nfunction isAndroid() {\n    return navigator.platform === \"Android\" || /android/i.test(navigator.userAgent);\n}\nclass NodeView {\n    constructor(component, props, options){\n        this.isDragging = false;\n        this.component = component;\n        this.editor = props.editor;\n        this.options = {\n            stopEvent: null,\n            ignoreMutation: null,\n            ...options\n        };\n        this.extension = props.extension;\n        this.node = props.node;\n        this.decorations = props.decorations;\n        this.getPos = props.getPos;\n        this.mount();\n    }\n    mount() {\n        // eslint-disable-next-line\n        return;\n    }\n    get dom() {\n        return this.editor.view.dom;\n    }\n    get contentDOM() {\n        return null;\n    }\n    onDragStart(event) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const { view } = this.editor;\n        const target = event.target;\n        // get the drag handle element\n        // `closest` is not available for text nodes so we may have to use its parent\n        const dragHandle = target.nodeType === 3 ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest(\"[data-drag-handle]\") : target.closest(\"[data-drag-handle]\");\n        if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\n            return;\n        }\n        let x = 0;\n        let y = 0;\n        // calculate offset for drag element if we use a different drag handle element\n        if (this.dom !== dragHandle) {\n            const domBox = this.dom.getBoundingClientRect();\n            const handleBox = dragHandle.getBoundingClientRect();\n            // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n            const offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;\n            const offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;\n            x = handleBox.x - domBox.x + offsetX;\n            y = handleBox.y - domBox.y + offsetY;\n        }\n        (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);\n        // we need to tell ProseMirror that we want to move the whole node\n        // so we create a NodeSelection\n        const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(view.state.doc, this.getPos());\n        const transaction = view.state.tr.setSelection(selection);\n        view.dispatch(transaction);\n    }\n    stopEvent(event) {\n        var _a;\n        if (!this.dom) {\n            return false;\n        }\n        if (typeof this.options.stopEvent === \"function\") {\n            return this.options.stopEvent({\n                event\n            });\n        }\n        const target = event.target;\n        const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));\n        // any event from child nodes should be handled by ProseMirror\n        if (!isInElement) {\n            return false;\n        }\n        const isDragEvent = event.type.startsWith(\"drag\");\n        const isDropEvent = event.type === \"drop\";\n        const isInput = [\n            \"INPUT\",\n            \"BUTTON\",\n            \"SELECT\",\n            \"TEXTAREA\"\n        ].includes(target.tagName) || target.isContentEditable;\n        // any input event within node views should be ignored by ProseMirror\n        if (isInput && !isDropEvent && !isDragEvent) {\n            return true;\n        }\n        const { isEditable } = this.editor;\n        const { isDragging } = this;\n        const isDraggable = !!this.node.type.spec.draggable;\n        const isSelectable = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.isSelectable(this.node);\n        const isCopyEvent = event.type === \"copy\";\n        const isPasteEvent = event.type === \"paste\";\n        const isCutEvent = event.type === \"cut\";\n        const isClickEvent = event.type === \"mousedown\";\n        // ProseMirror tries to drag selectable nodes\n        // even if `draggable` is set to `false`\n        // this fix prevents that\n        if (!isDraggable && isSelectable && isDragEvent) {\n            event.preventDefault();\n        }\n        if (isDraggable && isDragEvent && !isDragging) {\n            event.preventDefault();\n            return false;\n        }\n        // we have to store that dragging started\n        if (isDraggable && isEditable && !isDragging && isClickEvent) {\n            const dragHandle = target.closest(\"[data-drag-handle]\");\n            const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\n            if (isValidDragHandle) {\n                this.isDragging = true;\n                document.addEventListener(\"dragend\", ()=>{\n                    this.isDragging = false;\n                }, {\n                    once: true\n                });\n                document.addEventListener(\"drop\", ()=>{\n                    this.isDragging = false;\n                }, {\n                    once: true\n                });\n                document.addEventListener(\"mouseup\", ()=>{\n                    this.isDragging = false;\n                }, {\n                    once: true\n                });\n            }\n        }\n        // these events are handled by prosemirror\n        if (isDragging || isDropEvent || isCopyEvent || isPasteEvent || isCutEvent || isClickEvent && isSelectable) {\n            return false;\n        }\n        return true;\n    }\n    ignoreMutation(mutation) {\n        if (!this.dom || !this.contentDOM) {\n            return true;\n        }\n        if (typeof this.options.ignoreMutation === \"function\") {\n            return this.options.ignoreMutation({\n                mutation\n            });\n        }\n        // a leaf/atom node is like a black box for ProseMirror\n        // and should be fully handled by the node view\n        if (this.node.isLeaf || this.node.isAtom) {\n            return true;\n        }\n        // ProseMirror should handle any selections\n        if (mutation.type === \"selection\") {\n            return false;\n        }\n        // try to prevent a bug on iOS and Android that will break node views on enter\n        // this is because ProseMirror can’t preventDispatch on enter\n        // this will lead to a re-render of the node view on enter\n        // see: https://github.com/ueberdosis/tiptap/issues/1214\n        // see: https://github.com/ueberdosis/tiptap/issues/2534\n        if (this.dom.contains(mutation.target) && mutation.type === \"childList\" && (isiOS() || isAndroid()) && this.editor.isFocused) {\n            const changedNodes = [\n                ...Array.from(mutation.addedNodes),\n                ...Array.from(mutation.removedNodes)\n            ];\n            // we’ll check if every changed node is contentEditable\n            // to make sure it’s probably mutated by ProseMirror\n            if (changedNodes.every((node)=>node.isContentEditable)) {\n                return false;\n            }\n        }\n        // we will allow mutation contentDOM with attributes\n        // so we can for example adding classes within our node view\n        if (this.contentDOM === mutation.target && mutation.type === \"attributes\") {\n            return true;\n        }\n        // ProseMirror should handle any changes within contentDOM\n        if (this.contentDOM.contains(mutation.target)) {\n            return false;\n        }\n        return true;\n    }\n    updateAttributes(attributes) {\n        this.editor.commands.command(({ tr })=>{\n            const pos = this.getPos();\n            tr.setNodeMarkup(pos, undefined, {\n                ...this.node.attrs,\n                ...attributes\n            });\n            return true;\n        });\n    }\n    deleteNode() {\n        const from = this.getPos();\n        const to = from + this.node.nodeSize;\n        this.editor.commands.deleteRange({\n            from,\n            to\n        });\n    }\n}\n/**\r\n * Build an paste rule that adds a mark when the\r\n * matched text is pasted into it.\r\n */ function markPasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler: ({ state, range, match, pasteEvent })=>{\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const { tr } = state;\n            const captureGroup = match[match.length - 1];\n            const fullMatch = match[0];\n            let markEnd = range.to;\n            if (captureGroup) {\n                const startSpaces = fullMatch.search(/\\S/);\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\n                const textEnd = textStart + captureGroup.length;\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter((item)=>{\n                    // @ts-ignore\n                    const excluded = item.mark.type.excluded;\n                    return excluded.find((type)=>type === config.type && type !== item.mark.type);\n                }).filter((item)=>item.to > textStart);\n                if (excludedMarks.length) {\n                    return null;\n                }\n                if (textEnd < range.to) {\n                    tr.delete(textEnd, range.to);\n                }\n                if (textStart > range.from) {\n                    tr.delete(range.from + startSpaces, textStart);\n                }\n                markEnd = range.from + startSpaces + captureGroup.length;\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n                tr.removeStoredMark(config.type);\n            }\n        }\n    });\n}\n// source: https://stackoverflow.com/a/6969486\nfunction escapeForRegEx(string) {\n    return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\nfunction isString(value) {\n    return typeof value === \"string\";\n}\n/**\r\n * Build an paste rule that adds a node when the\r\n * matched text is pasted into it.\r\n */ function nodePasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler ({ match, chain, range, pasteEvent }) {\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            if (match.input) {\n                chain().deleteRange(range).insertContentAt(range.from, {\n                    type: config.type.name,\n                    attrs: attributes\n                });\n            }\n        }\n    });\n}\n/**\r\n * Build an paste rule that replaces text when the\r\n * matched text is pasted into it.\r\n */ function textPasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            let insert = config.replace;\n            let start = range.from;\n            const end = range.to;\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                insert += match[0].slice(offset + match[1].length);\n                start += offset;\n                const cutOff = start - end;\n                if (cutOff > 0) {\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\n                    start = end;\n                }\n            }\n            state.tr.insertText(insert, start, end);\n        }\n    });\n}\nclass Tracker {\n    constructor(transaction){\n        this.transaction = transaction;\n        this.currentStep = this.transaction.steps.length;\n    }\n    map(position) {\n        let deleted = false;\n        const mappedPosition = this.transaction.steps.slice(this.currentStep).reduce((newPosition, step)=>{\n            const mapResult = step.getMap().mapResult(newPosition);\n            if (mapResult.deleted) {\n                deleted = true;\n            }\n            return mapResult.pos;\n        }, position);\n        return {\n            position: mappedPosition,\n            deleted\n        };\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9jb3JlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEyRztBQUM5RDtBQUNGO0FBQzBEO0FBQ29DO0FBQ29jO0FBQ3pjO0FBRXBJLFNBQVM4RCxxQkFBcUJDLE1BQU07SUFDaEMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLFdBQVcsRUFBRSxHQUFHRjtJQUMvQixJQUFJLEVBQUVHLFNBQVMsRUFBRSxHQUFHRDtJQUNwQixJQUFJLEVBQUVFLEdBQUcsRUFBRSxHQUFHRjtJQUNkLElBQUksRUFBRUcsV0FBVyxFQUFFLEdBQUdIO0lBQ3RCLE9BQU87UUFDSCxHQUFHRCxLQUFLO1FBQ1JLLE9BQU9MLE1BQU1LLEtBQUssQ0FBQ0MsSUFBSSxDQUFDTjtRQUN4Qk8sa0JBQWtCUCxNQUFNTyxnQkFBZ0IsQ0FBQ0QsSUFBSSxDQUFDTjtRQUM5Q1EsbUJBQW1CUixNQUFNUSxpQkFBaUI7UUFDMUNDLFNBQVNULE1BQU1TLE9BQU87UUFDdEJDLFFBQVFWLE1BQU1VLE1BQU07UUFDcEJDLGFBQWFYLE1BQU1XLFdBQVcsQ0FBQ0wsSUFBSSxDQUFDTjtRQUNwQ1ksUUFBUVosTUFBTVksTUFBTSxDQUFDTixJQUFJLENBQUNOO1FBQzFCLElBQUlJLGVBQWM7WUFDZCxPQUFPQTtRQUNYO1FBQ0EsSUFBSUYsYUFBWTtZQUNaLE9BQU9BO1FBQ1g7UUFDQSxJQUFJQyxPQUFNO1lBQ04sT0FBT0E7UUFDWDtRQUNBLElBQUlVLE1BQUs7WUFDTFgsWUFBWUQsWUFBWUMsU0FBUztZQUNqQ0MsTUFBTUYsWUFBWUUsR0FBRztZQUNyQkMsY0FBY0gsWUFBWUcsV0FBVztZQUNyQyxPQUFPSDtRQUNYO0lBQ0o7QUFDSjtBQUVBLE1BQU1hO0lBQ0ZDLFlBQVlDLEtBQUss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QUFDNmMsVUFBVSxDQUFDN0YsUUFBUXpJLE9BQU9DO1FBQ3ZDO0lBQ0o7QUFDSjtBQUVBLE1BQU15bEI7SUFDRi96QixZQUFZZCxXQUFXLENBQUU7UUFDckIsSUFBSSxDQUFDQSxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQzgwQixXQUFXLEdBQUcsSUFBSSxDQUFDOTBCLFdBQVcsQ0FBQ21OLEtBQUssQ0FBQy9GLE1BQU07SUFDcEQ7SUFDQXpGLElBQUl5WSxRQUFRLEVBQUU7UUFDVixJQUFJMmEsVUFBVTtRQUNkLE1BQU1DLGlCQUFpQixJQUFJLENBQUNoMUIsV0FBVyxDQUFDbU4sS0FBSyxDQUN4QzNCLEtBQUssQ0FBQyxJQUFJLENBQUNzcEIsV0FBVyxFQUN0Qjd1QixNQUFNLENBQUMsQ0FBQ2d2QixhQUFheFk7WUFDdEIsTUFBTXlZLFlBQVl6WSxLQUFLMFksTUFBTSxHQUFHRCxTQUFTLENBQUNEO1lBQzFDLElBQUlDLFVBQVVILE9BQU8sRUFBRTtnQkFDbkJBLFVBQVU7WUFDZDtZQUNBLE9BQU9HLFVBQVVqcUIsR0FBRztRQUN4QixHQUFHbVA7UUFDSCxPQUFPO1lBQ0hBLFVBQVU0YTtZQUNWRDtRQUNKO0lBQ0o7QUFDSjtBQUVvOEMsQ0FDcDhDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2NvcmUvZGlzdC9pbmRleC5qcz9lNTQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsdWdpbiwgUGx1Z2luS2V5LCBUZXh0U2VsZWN0aW9uLCBTZWxlY3Rpb24sIE5vZGVTZWxlY3Rpb24sIEVkaXRvclN0YXRlIH0gZnJvbSAnQHRpcHRhcC9wbS9zdGF0ZSc7XG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSAnQHRpcHRhcC9wbS92aWV3JztcbmltcG9ydCB7IGtleW1hcCB9IGZyb20gJ0B0aXB0YXAvcG0va2V5bWFwJztcbmltcG9ydCB7IFNjaGVtYSwgRnJhZ21lbnQsIERPTVBhcnNlciwgRE9NU2VyaWFsaXplciwgTm9kZSBhcyBOb2RlJDEsIFNsaWNlIH0gZnJvbSAnQHRpcHRhcC9wbS9tb2RlbCc7XG5pbXBvcnQgeyBsaWZ0VGFyZ2V0LCBSZXBsYWNlU3RlcCwgUmVwbGFjZUFyb3VuZFN0ZXAsIGpvaW5Qb2ludCwgVHJhbnNmb3JtLCBjYW5TcGxpdCwgY2FuSm9pbiwgZmluZFdyYXBwaW5nIH0gZnJvbSAnQHRpcHRhcC9wbS90cmFuc2Zvcm0nO1xuaW1wb3J0IHsgY3JlYXRlUGFyYWdyYXBoTmVhciBhcyBjcmVhdGVQYXJhZ3JhcGhOZWFyJDEsIGRlbGV0ZVNlbGVjdGlvbiBhcyBkZWxldGVTZWxlY3Rpb24kMSwgZXhpdENvZGUgYXMgZXhpdENvZGUkMSwgam9pblVwIGFzIGpvaW5VcCQxLCBqb2luRG93biBhcyBqb2luRG93biQxLCBqb2luQmFja3dhcmQgYXMgam9pbkJhY2t3YXJkJDEsIGpvaW5Gb3J3YXJkIGFzIGpvaW5Gb3J3YXJkJDEsIGxpZnQgYXMgbGlmdCQxLCBsaWZ0RW1wdHlCbG9jayBhcyBsaWZ0RW1wdHlCbG9jayQxLCBuZXdsaW5lSW5Db2RlIGFzIG5ld2xpbmVJbkNvZGUkMSwgc2VsZWN0Tm9kZUJhY2t3YXJkIGFzIHNlbGVjdE5vZGVCYWNrd2FyZCQxLCBzZWxlY3ROb2RlRm9yd2FyZCBhcyBzZWxlY3ROb2RlRm9yd2FyZCQxLCBzZWxlY3RQYXJlbnROb2RlIGFzIHNlbGVjdFBhcmVudE5vZGUkMSwgc2VsZWN0VGV4dGJsb2NrRW5kIGFzIHNlbGVjdFRleHRibG9ja0VuZCQxLCBzZWxlY3RUZXh0YmxvY2tTdGFydCBhcyBzZWxlY3RUZXh0YmxvY2tTdGFydCQxLCBzZXRCbG9ja1R5cGUsIHdyYXBJbiBhcyB3cmFwSW4kMSB9IGZyb20gJ0B0aXB0YXAvcG0vY29tbWFuZHMnO1xuaW1wb3J0IHsgbGlmdExpc3RJdGVtIGFzIGxpZnRMaXN0SXRlbSQxLCBzaW5rTGlzdEl0ZW0gYXMgc2lua0xpc3RJdGVtJDEsIHdyYXBJbkxpc3QgYXMgd3JhcEluTGlzdCQxIH0gZnJvbSAnQHRpcHRhcC9wbS9zY2hlbWEtbGlzdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVN0YXRlKGNvbmZpZykge1xyXG4gICAgY29uc3QgeyBzdGF0ZSwgdHJhbnNhY3Rpb24gfSA9IGNvbmZpZztcclxuICAgIGxldCB7IHNlbGVjdGlvbiB9ID0gdHJhbnNhY3Rpb247XHJcbiAgICBsZXQgeyBkb2MgfSA9IHRyYW5zYWN0aW9uO1xyXG4gICAgbGV0IHsgc3RvcmVkTWFya3MgfSA9IHRyYW5zYWN0aW9uO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBhcHBseTogc3RhdGUuYXBwbHkuYmluZChzdGF0ZSksXHJcbiAgICAgICAgYXBwbHlUcmFuc2FjdGlvbjogc3RhdGUuYXBwbHlUcmFuc2FjdGlvbi5iaW5kKHN0YXRlKSxcclxuICAgICAgICBmaWx0ZXJUcmFuc2FjdGlvbjogc3RhdGUuZmlsdGVyVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgcGx1Z2luczogc3RhdGUucGx1Z2lucyxcclxuICAgICAgICBzY2hlbWE6IHN0YXRlLnNjaGVtYSxcclxuICAgICAgICByZWNvbmZpZ3VyZTogc3RhdGUucmVjb25maWd1cmUuYmluZChzdGF0ZSksXHJcbiAgICAgICAgdG9KU09OOiBzdGF0ZS50b0pTT04uYmluZChzdGF0ZSksXHJcbiAgICAgICAgZ2V0IHN0b3JlZE1hcmtzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RvcmVkTWFya3M7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXQgc2VsZWN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0IGRvYygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvYztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldCB0cigpIHtcclxuICAgICAgICAgICAgc2VsZWN0aW9uID0gdHJhbnNhY3Rpb24uc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XHJcbiAgICAgICAgICAgIHN0b3JlZE1hcmtzID0gdHJhbnNhY3Rpb24uc3RvcmVkTWFya3M7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbjtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxuXG5jbGFzcyBDb21tYW5kTWFuYWdlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHRoaXMuZWRpdG9yID0gcHJvcHMuZWRpdG9yO1xyXG4gICAgICAgIHRoaXMucmF3Q29tbWFuZHMgPSB0aGlzLmVkaXRvci5leHRlbnNpb25NYW5hZ2VyLmNvbW1hbmRzO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tU3RhdGUgPSBwcm9wcy5zdGF0ZTtcclxuICAgIH1cclxuICAgIGdldCBoYXNDdXN0b21TdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLmN1c3RvbVN0YXRlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHN0YXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbVN0YXRlIHx8IHRoaXMuZWRpdG9yLnN0YXRlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNvbW1hbmRzKCkge1xyXG4gICAgICAgIGNvbnN0IHsgcmF3Q29tbWFuZHMsIGVkaXRvciwgc3RhdGUgfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgeyB2aWV3IH0gPSBlZGl0b3I7XHJcbiAgICAgICAgY29uc3QgeyB0ciB9ID0gc3RhdGU7XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLmJ1aWxkUHJvcHModHIpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMocmF3Q29tbWFuZHMpLm1hcCgoW25hbWUsIGNvbW1hbmRdKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9ICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGNvbW1hbmQoLi4uYXJncykocHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0ci5nZXRNZXRhKCdwcmV2ZW50RGlzcGF0Y2gnKSAmJiAhdGhpcy5oYXNDdXN0b21TdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2godHIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gW25hbWUsIG1ldGhvZF07XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNoYWluKCkge1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB0aGlzLmNyZWF0ZUNoYWluKCk7XHJcbiAgICB9XHJcbiAgICBnZXQgY2FuKCkge1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB0aGlzLmNyZWF0ZUNhbigpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQ2hhaW4oc3RhcnRUciwgc2hvdWxkRGlzcGF0Y2ggPSB0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgeyByYXdDb21tYW5kcywgZWRpdG9yLCBzdGF0ZSB9ID0gdGhpcztcclxuICAgICAgICBjb25zdCB7IHZpZXcgfSA9IGVkaXRvcjtcclxuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBbXTtcclxuICAgICAgICBjb25zdCBoYXNTdGFydFRyYW5zYWN0aW9uID0gISFzdGFydFRyO1xyXG4gICAgICAgIGNvbnN0IHRyID0gc3RhcnRUciB8fCBzdGF0ZS50cjtcclxuICAgICAgICBjb25zdCBydW4gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaGFzU3RhcnRUcmFuc2FjdGlvblxyXG4gICAgICAgICAgICAgICAgJiYgc2hvdWxkRGlzcGF0Y2hcclxuICAgICAgICAgICAgICAgICYmICF0ci5nZXRNZXRhKCdwcmV2ZW50RGlzcGF0Y2gnKVxyXG4gICAgICAgICAgICAgICAgJiYgIXRoaXMuaGFzQ3VzdG9tU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2godHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFja3MuZXZlcnkoY2FsbGJhY2sgPT4gY2FsbGJhY2sgPT09IHRydWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgY2hhaW4gPSB7XHJcbiAgICAgICAgICAgIC4uLk9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhyYXdDb21tYW5kcykubWFwKChbbmFtZSwgY29tbWFuZF0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYWluZWRDb21tYW5kID0gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMuYnVpbGRQcm9wcyh0ciwgc2hvdWxkRGlzcGF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY29tbWFuZCguLi5hcmdzKShwcm9wcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFpbjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW25hbWUsIGNoYWluZWRDb21tYW5kXTtcclxuICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgICAgICBydW4sXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY2hhaW47XHJcbiAgICB9XHJcbiAgICBjcmVhdGVDYW4oc3RhcnRUcikge1xyXG4gICAgICAgIGNvbnN0IHsgcmF3Q29tbWFuZHMsIHN0YXRlIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGRpc3BhdGNoID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgdHIgPSBzdGFydFRyIHx8IHN0YXRlLnRyO1xyXG4gICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5idWlsZFByb3BzKHRyLCBkaXNwYXRjaCk7XHJcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkQ29tbWFuZHMgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMocmF3Q29tbWFuZHMpLm1hcCgoW25hbWUsIGNvbW1hbmRdKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBbbmFtZSwgKC4uLmFyZ3MpID0+IGNvbW1hbmQoLi4uYXJncykoeyAuLi5wcm9wcywgZGlzcGF0Y2g6IHVuZGVmaW5lZCB9KV07XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLmZvcm1hdHRlZENvbW1hbmRzLFxyXG4gICAgICAgICAgICBjaGFpbjogKCkgPT4gdGhpcy5jcmVhdGVDaGFpbih0ciwgZGlzcGF0Y2gpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBidWlsZFByb3BzKHRyLCBzaG91bGREaXNwYXRjaCA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCB7IHJhd0NvbW1hbmRzLCBlZGl0b3IsIHN0YXRlIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHsgdmlldyB9ID0gZWRpdG9yO1xyXG4gICAgICAgIGNvbnN0IHByb3BzID0ge1xyXG4gICAgICAgICAgICB0cixcclxuICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICB2aWV3LFxyXG4gICAgICAgICAgICBzdGF0ZTogY3JlYXRlQ2hhaW5hYmxlU3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHIsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBkaXNwYXRjaDogc2hvdWxkRGlzcGF0Y2ggPyAoKSA9PiB1bmRlZmluZWQgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGNoYWluOiAoKSA9PiB0aGlzLmNyZWF0ZUNoYWluKHRyLCBzaG91bGREaXNwYXRjaCksXHJcbiAgICAgICAgICAgIGNhbjogKCkgPT4gdGhpcy5jcmVhdGVDYW4odHIpLFxyXG4gICAgICAgICAgICBnZXQgY29tbWFuZHMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHJhd0NvbW1hbmRzKS5tYXAoKFtuYW1lLCBjb21tYW5kXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmFtZSwgKC4uLmFyZ3MpID0+IGNvbW1hbmQoLi4uYXJncykocHJvcHMpXTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBwcm9wcztcclxuICAgIH1cclxufVxuXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSB7fTtcclxuICAgIH1cclxuICAgIG9uKGV2ZW50LCBmbikge1xyXG4gICAgICAgIGlmICghdGhpcy5jYWxsYmFja3NbZXZlbnRdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzW2V2ZW50XSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNhbGxiYWNrc1tldmVudF0ucHVzaChmbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3NbZXZlbnRdO1xyXG4gICAgICAgIGlmIChjYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2suYXBwbHkodGhpcywgYXJncykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIG9mZihldmVudCwgZm4pIHtcclxuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrc1tldmVudF07XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICBpZiAoZm4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzW2V2ZW50XSA9IGNhbGxiYWNrcy5maWx0ZXIoY2FsbGJhY2sgPT4gY2FsbGJhY2sgIT09IGZuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhbGxiYWNrc1tldmVudF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICByZW1vdmVBbGxMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSB7fTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sIGZpZWxkLCBjb250ZXh0KSB7XHJcbiAgICBpZiAoZXh0ZW5zaW9uLmNvbmZpZ1tmaWVsZF0gPT09IHVuZGVmaW5lZCAmJiBleHRlbnNpb24ucGFyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbi5wYXJlbnQsIGZpZWxkLCBjb250ZXh0KTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZXh0ZW5zaW9uLmNvbmZpZ1tmaWVsZF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGV4dGVuc2lvbi5jb25maWdbZmllbGRdLmJpbmQoe1xyXG4gICAgICAgICAgICAuLi5jb250ZXh0LFxyXG4gICAgICAgICAgICBwYXJlbnQ6IGV4dGVuc2lvbi5wYXJlbnRcclxuICAgICAgICAgICAgICAgID8gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLnBhcmVudCwgZmllbGQsIGNvbnRleHQpXHJcbiAgICAgICAgICAgICAgICA6IG51bGwsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4dGVuc2lvbi5jb25maWdbZmllbGRdO1xyXG59XG5cbmZ1bmN0aW9uIHNwbGl0RXh0ZW5zaW9ucyhleHRlbnNpb25zKSB7XHJcbiAgICBjb25zdCBiYXNlRXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMuZmlsdGVyKGV4dGVuc2lvbiA9PiBleHRlbnNpb24udHlwZSA9PT0gJ2V4dGVuc2lvbicpO1xyXG4gICAgY29uc3Qgbm9kZUV4dGVuc2lvbnMgPSBleHRlbnNpb25zLmZpbHRlcihleHRlbnNpb24gPT4gZXh0ZW5zaW9uLnR5cGUgPT09ICdub2RlJyk7XHJcbiAgICBjb25zdCBtYXJrRXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMuZmlsdGVyKGV4dGVuc2lvbiA9PiBleHRlbnNpb24udHlwZSA9PT0gJ21hcmsnKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYmFzZUV4dGVuc2lvbnMsXHJcbiAgICAgICAgbm9kZUV4dGVuc2lvbnMsXHJcbiAgICAgICAgbWFya0V4dGVuc2lvbnMsXHJcbiAgICB9O1xyXG59XG5cbi8qKlxyXG4gKiBHZXQgYSBsaXN0IG9mIGFsbCBleHRlbnNpb24gYXR0cmlidXRlcyBkZWZpbmVkIGluIGBhZGRBdHRyaWJ1dGVgIGFuZCBgYWRkR2xvYmFsQXR0cmlidXRlYC5cclxuICogQHBhcmFtIGV4dGVuc2lvbnMgTGlzdCBvZiBleHRlbnNpb25zXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVzRnJvbUV4dGVuc2lvbnMoZXh0ZW5zaW9ucykge1xyXG4gICAgY29uc3QgZXh0ZW5zaW9uQXR0cmlidXRlcyA9IFtdO1xyXG4gICAgY29uc3QgeyBub2RlRXh0ZW5zaW9ucywgbWFya0V4dGVuc2lvbnMgfSA9IHNwbGl0RXh0ZW5zaW9ucyhleHRlbnNpb25zKTtcclxuICAgIGNvbnN0IG5vZGVBbmRNYXJrRXh0ZW5zaW9ucyA9IFsuLi5ub2RlRXh0ZW5zaW9ucywgLi4ubWFya0V4dGVuc2lvbnNdO1xyXG4gICAgY29uc3QgZGVmYXVsdEF0dHJpYnV0ZSA9IHtcclxuICAgICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICAgIHJlbmRlcmVkOiB0cnVlLFxyXG4gICAgICAgIHJlbmRlckhUTUw6IG51bGwsXHJcbiAgICAgICAgcGFyc2VIVE1MOiBudWxsLFxyXG4gICAgICAgIGtlZXBPblNwbGl0OiB0cnVlLFxyXG4gICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlLFxyXG4gICAgfTtcclxuICAgIGV4dGVuc2lvbnMuZm9yRWFjaChleHRlbnNpb24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2UsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBhZGRHbG9iYWxBdHRyaWJ1dGVzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkR2xvYmFsQXR0cmlidXRlcycsIGNvbnRleHQpO1xyXG4gICAgICAgIGlmICghYWRkR2xvYmFsQXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSBgYXMgR2xvYmFsQXR0cmlidXRlc2BcclxuICAgICAgICBjb25zdCBnbG9iYWxBdHRyaWJ1dGVzID0gYWRkR2xvYmFsQXR0cmlidXRlcygpO1xyXG4gICAgICAgIGdsb2JhbEF0dHJpYnV0ZXMuZm9yRWFjaChnbG9iYWxBdHRyaWJ1dGUgPT4ge1xyXG4gICAgICAgICAgICBnbG9iYWxBdHRyaWJ1dGUudHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcclxuICAgICAgICAgICAgICAgIE9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRyaWVzKGdsb2JhbEF0dHJpYnV0ZS5hdHRyaWJ1dGVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChbbmFtZSwgYXR0cmlidXRlXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbkF0dHJpYnV0ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGVmYXVsdEF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgbm9kZUFuZE1hcmtFeHRlbnNpb25zLmZvckVhY2goZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgYWRkQXR0cmlidXRlcyA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZEF0dHJpYnV0ZXMnLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoIWFkZEF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgYGFzIEF0dHJpYnV0ZXNgXHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGFkZEF0dHJpYnV0ZXMoKTtcclxuICAgICAgICBPYmplY3RcclxuICAgICAgICAgICAgLmVudHJpZXMoYXR0cmlidXRlcylcclxuICAgICAgICAgICAgLmZvckVhY2goKFtuYW1lLCBhdHRyaWJ1dGVdKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZEF0dHIgPSB7XHJcbiAgICAgICAgICAgICAgICAuLi5kZWZhdWx0QXR0cmlidXRlLFxyXG4gICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIChtZXJnZWRBdHRyID09PSBudWxsIHx8IG1lcmdlZEF0dHIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1lcmdlZEF0dHIuZGVmYXVsdCkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlZEF0dHIuZGVmYXVsdCA9IG1lcmdlZEF0dHIuZGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgobWVyZ2VkQXR0ciA9PT0gbnVsbCB8fCBtZXJnZWRBdHRyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtZXJnZWRBdHRyLmlzUmVxdWlyZWQpICYmIChtZXJnZWRBdHRyID09PSBudWxsIHx8IG1lcmdlZEF0dHIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1lcmdlZEF0dHIuZGVmYXVsdCkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lcmdlZEF0dHIuZGVmYXVsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBleHRlbnNpb25BdHRyaWJ1dGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlOiBtZXJnZWRBdHRyLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGV4dGVuc2lvbkF0dHJpYnV0ZXM7XHJcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZVR5cGUobmFtZU9yVHlwZSwgc2NoZW1hKSB7XHJcbiAgICBpZiAodHlwZW9mIG5hbWVPclR5cGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaWYgKCFzY2hlbWEubm9kZXNbbmFtZU9yVHlwZV0pIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFRoZXJlIGlzIG5vIG5vZGUgdHlwZSBuYW1lZCAnJHtuYW1lT3JUeXBlfScuIE1heWJlIHlvdSBmb3Jnb3QgdG8gYWRkIHRoZSBleHRlbnNpb24/YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY2hlbWEubm9kZXNbbmFtZU9yVHlwZV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZU9yVHlwZTtcclxufVxuXG5mdW5jdGlvbiBtZXJnZUF0dHJpYnV0ZXMoLi4ub2JqZWN0cykge1xyXG4gICAgcmV0dXJuIG9iamVjdHNcclxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKVxyXG4gICAgICAgIC5yZWR1Y2UoKGl0ZW1zLCBpdGVtKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWVyZ2VkQXR0cmlidXRlcyA9IHsgLi4uaXRlbXMgfTtcclxuICAgICAgICBPYmplY3QuZW50cmllcyhpdGVtKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RzID0gbWVyZ2VkQXR0cmlidXRlc1trZXldO1xyXG4gICAgICAgICAgICBpZiAoIWV4aXN0cykge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VkQXR0cmlidXRlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVDbGFzc2VzID0gdmFsdWUgPyB2YWx1ZS5zcGxpdCgnICcpIDogW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ0NsYXNzZXMgPSBtZXJnZWRBdHRyaWJ1dGVzW2tleV0gPyBtZXJnZWRBdHRyaWJ1dGVzW2tleV0uc3BsaXQoJyAnKSA6IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5zZXJ0Q2xhc3NlcyA9IHZhbHVlQ2xhc3Nlcy5maWx0ZXIodmFsdWVDbGFzcyA9PiAhZXhpc3RpbmdDbGFzc2VzLmluY2x1ZGVzKHZhbHVlQ2xhc3MpKTtcclxuICAgICAgICAgICAgICAgIG1lcmdlZEF0dHJpYnV0ZXNba2V5XSA9IFsuLi5leGlzdGluZ0NsYXNzZXMsIC4uLmluc2VydENsYXNzZXNdLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlZEF0dHJpYnV0ZXNba2V5XSA9IFttZXJnZWRBdHRyaWJ1dGVzW2tleV0sIHZhbHVlXS5qb2luKCc7ICcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VkQXR0cmlidXRlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbWVyZ2VkQXR0cmlidXRlcztcclxuICAgIH0sIHt9KTtcclxufVxuXG5mdW5jdGlvbiBnZXRSZW5kZXJlZEF0dHJpYnV0ZXMobm9kZU9yTWFyaywgZXh0ZW5zaW9uQXR0cmlidXRlcykge1xyXG4gICAgcmV0dXJuIGV4dGVuc2lvbkF0dHJpYnV0ZXNcclxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbS5hdHRyaWJ1dGUucmVuZGVyZWQpXHJcbiAgICAgICAgLm1hcChpdGVtID0+IHtcclxuICAgICAgICBpZiAoIWl0ZW0uYXR0cmlidXRlLnJlbmRlckhUTUwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIFtpdGVtLm5hbWVdOiBub2RlT3JNYXJrLmF0dHJzW2l0ZW0ubmFtZV0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtLmF0dHJpYnV0ZS5yZW5kZXJIVE1MKG5vZGVPck1hcmsuYXR0cnMpIHx8IHt9O1xyXG4gICAgfSlcclxuICAgICAgICAucmVkdWNlKChhdHRyaWJ1dGVzLCBhdHRyaWJ1dGUpID0+IG1lcmdlQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCBhdHRyaWJ1dGUpLCB7fSk7XHJcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcclxufVxuXG4vKipcclxuICogT3B0aW9uYWxseSBjYWxscyBgdmFsdWVgIGFzIGEgZnVuY3Rpb24uXHJcbiAqIE90aGVyd2lzZSBpdCBpcyByZXR1cm5lZCBkaXJlY3RseS5cclxuICogQHBhcmFtIHZhbHVlIEZ1bmN0aW9uIG9yIGFueSB2YWx1ZS5cclxuICogQHBhcmFtIGNvbnRleHQgT3B0aW9uYWwgY29udGV4dCB0byBiaW5kIHRvIGZ1bmN0aW9uLlxyXG4gKiBAcGFyYW0gcHJvcHMgT3B0aW9uYWwgcHJvcHMgdG8gcGFzcyB0byBmdW5jdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIGNhbGxPclJldHVybih2YWx1ZSwgY29udGV4dCA9IHVuZGVmaW5lZCwgLi4ucHJvcHMpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICAgIGlmIChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5iaW5kKGNvbnRleHQpKC4uLnByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlKC4uLnByb3BzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxuXG5mdW5jdGlvbiBpc0VtcHR5T2JqZWN0KHZhbHVlID0ge30pIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XHJcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUubWF0Y2goL15bKy1dPyg/OlxcZCpcXC4pP1xcZCskLykpIHtcclxuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgPT09ICdmYWxzZScpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cblxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gbWVyZ2VzIGV4dGVuc2lvbiBhdHRyaWJ1dGVzIGludG8gcGFyc2VydWxlIGF0dHJpYnV0ZXMgKGBhdHRyc2Agb3IgYGdldEF0dHJzYCkuXHJcbiAqIENhbmNlbHMgd2hlbiBgZ2V0QXR0cnNgIHJldHVybmVkIGBmYWxzZWAuXHJcbiAqIEBwYXJhbSBwYXJzZVJ1bGUgUHJvc2VNaXJyb3IgUGFyc2VSdWxlXHJcbiAqIEBwYXJhbSBleHRlbnNpb25BdHRyaWJ1dGVzIExpc3Qgb2YgYXR0cmlidXRlcyB0byBpbmplY3RcclxuICovXHJcbmZ1bmN0aW9uIGluamVjdEV4dGVuc2lvbkF0dHJpYnV0ZXNUb1BhcnNlUnVsZShwYXJzZVJ1bGUsIGV4dGVuc2lvbkF0dHJpYnV0ZXMpIHtcclxuICAgIGlmIChwYXJzZVJ1bGUuc3R5bGUpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VSdWxlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5wYXJzZVJ1bGUsXHJcbiAgICAgICAgZ2V0QXR0cnM6IG5vZGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRBdHRyaWJ1dGVzID0gcGFyc2VSdWxlLmdldEF0dHJzID8gcGFyc2VSdWxlLmdldEF0dHJzKG5vZGUpIDogcGFyc2VSdWxlLmF0dHJzO1xyXG4gICAgICAgICAgICBpZiAob2xkQXR0cmlidXRlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBuZXdBdHRyaWJ1dGVzID0gZXh0ZW5zaW9uQXR0cmlidXRlcy5yZWR1Y2UoKGl0ZW1zLCBpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGl0ZW0uYXR0cmlidXRlLnBhcnNlSFRNTFxyXG4gICAgICAgICAgICAgICAgICAgID8gaXRlbS5hdHRyaWJ1dGUucGFyc2VIVE1MKG5vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBmcm9tU3RyaW5nKG5vZGUuZ2V0QXR0cmlidXRlKGl0ZW0ubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLml0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgIFtpdGVtLm5hbWVdOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4ub2xkQXR0cmlidXRlcywgLi4ubmV3QXR0cmlidXRlcyB9O1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIGNsZWFuVXBTY2hlbWFJdGVtKGRhdGEpIHtcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBPYmplY3QuZW50cmllcyhkYXRhKS5maWx0ZXIoKFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICAgIGlmIChrZXkgPT09ICdhdHRycycgJiYgaXNFbXB0eU9iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcclxuICAgIH0pKTtcclxufVxyXG5mdW5jdGlvbiBnZXRTY2hlbWFCeVJlc29sdmVkRXh0ZW5zaW9ucyhleHRlbnNpb25zLCBlZGl0b3IpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IGFsbEF0dHJpYnV0ZXMgPSBnZXRBdHRyaWJ1dGVzRnJvbUV4dGVuc2lvbnMoZXh0ZW5zaW9ucyk7XHJcbiAgICBjb25zdCB7IG5vZGVFeHRlbnNpb25zLCBtYXJrRXh0ZW5zaW9ucyB9ID0gc3BsaXRFeHRlbnNpb25zKGV4dGVuc2lvbnMpO1xyXG4gICAgY29uc3QgdG9wTm9kZSA9IChfYSA9IG5vZGVFeHRlbnNpb25zLmZpbmQoZXh0ZW5zaW9uID0+IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ3RvcE5vZGUnKSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lO1xyXG4gICAgY29uc3Qgbm9kZXMgPSBPYmplY3QuZnJvbUVudHJpZXMobm9kZUV4dGVuc2lvbnMubWFwKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uQXR0cmlidXRlcyA9IGFsbEF0dHJpYnV0ZXMuZmlsdGVyKGF0dHJpYnV0ZSA9PiBhdHRyaWJ1dGUudHlwZSA9PT0gZXh0ZW5zaW9uLm5hbWUpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2UsXHJcbiAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGV4dHJhTm9kZUZpZWxkcyA9IGV4dGVuc2lvbnMucmVkdWNlKChmaWVsZHMsIGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXh0ZW5kTm9kZVNjaGVtYSA9IGdldEV4dGVuc2lvbkZpZWxkKGUsICdleHRlbmROb2RlU2NoZW1hJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5maWVsZHMsXHJcbiAgICAgICAgICAgICAgICAuLi4oZXh0ZW5kTm9kZVNjaGVtYSA/IGV4dGVuZE5vZGVTY2hlbWEoZXh0ZW5zaW9uKSA6IHt9KSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gY2xlYW5VcFNjaGVtYUl0ZW0oe1xyXG4gICAgICAgICAgICAuLi5leHRyYU5vZGVGaWVsZHMsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdjb250ZW50JywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBtYXJrczogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ21hcmtzJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBncm91cDogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2dyb3VwJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBpbmxpbmU6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdpbmxpbmUnLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIGF0b206IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhdG9tJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnc2VsZWN0YWJsZScsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnZHJhZ2dhYmxlJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBjb2RlOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnY29kZScsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgZGVmaW5pbmc6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdkZWZpbmluZycsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgaXNvbGF0aW5nOiBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnaXNvbGF0aW5nJywgY29udGV4dCkpLFxyXG4gICAgICAgICAgICBhdHRyczogT2JqZWN0LmZyb21FbnRyaWVzKGV4dGVuc2lvbkF0dHJpYnV0ZXMubWFwKGV4dGVuc2lvbkF0dHJpYnV0ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2V4dGVuc2lvbkF0dHJpYnV0ZS5uYW1lLCB7IGRlZmF1bHQ6IChfYSA9IGV4dGVuc2lvbkF0dHJpYnV0ZSA9PT0gbnVsbCB8fCBleHRlbnNpb25BdHRyaWJ1dGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4dGVuc2lvbkF0dHJpYnV0ZS5hdHRyaWJ1dGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWZhdWx0IH1dO1xyXG4gICAgICAgICAgICB9KSksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgcGFyc2VIVE1MID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ3BhcnNlSFRNTCcsIGNvbnRleHQpKTtcclxuICAgICAgICBpZiAocGFyc2VIVE1MKSB7XHJcbiAgICAgICAgICAgIHNjaGVtYS5wYXJzZURPTSA9IHBhcnNlSFRNTC5tYXAocGFyc2VSdWxlID0+IGluamVjdEV4dGVuc2lvbkF0dHJpYnV0ZXNUb1BhcnNlUnVsZShwYXJzZVJ1bGUsIGV4dGVuc2lvbkF0dHJpYnV0ZXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVuZGVySFRNTCA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ3JlbmRlckhUTUwnLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAocmVuZGVySFRNTCkge1xyXG4gICAgICAgICAgICBzY2hlbWEudG9ET00gPSBub2RlID0+IHJlbmRlckhUTUwoe1xyXG4gICAgICAgICAgICAgICAgbm9kZSxcclxuICAgICAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiBnZXRSZW5kZXJlZEF0dHJpYnV0ZXMobm9kZSwgZXh0ZW5zaW9uQXR0cmlidXRlcyksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZW5kZXJUZXh0ID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAncmVuZGVyVGV4dCcsIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChyZW5kZXJUZXh0KSB7XHJcbiAgICAgICAgICAgIHNjaGVtYS50b1RleHQgPSByZW5kZXJUZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2V4dGVuc2lvbi5uYW1lLCBzY2hlbWFdO1xyXG4gICAgfSkpO1xyXG4gICAgY29uc3QgbWFya3MgPSBPYmplY3QuZnJvbUVudHJpZXMobWFya0V4dGVuc2lvbnMubWFwKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uQXR0cmlidXRlcyA9IGFsbEF0dHJpYnV0ZXMuZmlsdGVyKGF0dHJpYnV0ZSA9PiBhdHRyaWJ1dGUudHlwZSA9PT0gZXh0ZW5zaW9uLm5hbWUpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2UsXHJcbiAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGV4dHJhTWFya0ZpZWxkcyA9IGV4dGVuc2lvbnMucmVkdWNlKChmaWVsZHMsIGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXh0ZW5kTWFya1NjaGVtYSA9IGdldEV4dGVuc2lvbkZpZWxkKGUsICdleHRlbmRNYXJrU2NoZW1hJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5maWVsZHMsXHJcbiAgICAgICAgICAgICAgICAuLi4oZXh0ZW5kTWFya1NjaGVtYSA/IGV4dGVuZE1hcmtTY2hlbWEoZXh0ZW5zaW9uKSA6IHt9KSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gY2xlYW5VcFNjaGVtYUl0ZW0oe1xyXG4gICAgICAgICAgICAuLi5leHRyYU1hcmtGaWVsZHMsXHJcbiAgICAgICAgICAgIGluY2x1c2l2ZTogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2luY2x1c2l2ZScsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgZXhjbHVkZXM6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdleGNsdWRlcycsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgZ3JvdXA6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdncm91cCcsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgc3Bhbm5pbmc6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdzcGFubmluZycsIGNvbnRleHQpKSxcclxuICAgICAgICAgICAgY29kZTogY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2NvZGUnLCBjb250ZXh0KSksXHJcbiAgICAgICAgICAgIGF0dHJzOiBPYmplY3QuZnJvbUVudHJpZXMoZXh0ZW5zaW9uQXR0cmlidXRlcy5tYXAoZXh0ZW5zaW9uQXR0cmlidXRlID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZXh0ZW5zaW9uQXR0cmlidXRlLm5hbWUsIHsgZGVmYXVsdDogKF9hID0gZXh0ZW5zaW9uQXR0cmlidXRlID09PSBudWxsIHx8IGV4dGVuc2lvbkF0dHJpYnV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXh0ZW5zaW9uQXR0cmlidXRlLmF0dHJpYnV0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlZmF1bHQgfV07XHJcbiAgICAgICAgICAgIH0pKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBwYXJzZUhUTUwgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAncGFyc2VIVE1MJywgY29udGV4dCkpO1xyXG4gICAgICAgIGlmIChwYXJzZUhUTUwpIHtcclxuICAgICAgICAgICAgc2NoZW1hLnBhcnNlRE9NID0gcGFyc2VIVE1MLm1hcChwYXJzZVJ1bGUgPT4gaW5qZWN0RXh0ZW5zaW9uQXR0cmlidXRlc1RvUGFyc2VSdWxlKHBhcnNlUnVsZSwgZXh0ZW5zaW9uQXR0cmlidXRlcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZW5kZXJIVE1MID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAncmVuZGVySFRNTCcsIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChyZW5kZXJIVE1MKSB7XHJcbiAgICAgICAgICAgIHNjaGVtYS50b0RPTSA9IG1hcmsgPT4gcmVuZGVySFRNTCh7XHJcbiAgICAgICAgICAgICAgICBtYXJrLFxyXG4gICAgICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IGdldFJlbmRlcmVkQXR0cmlidXRlcyhtYXJrLCBleHRlbnNpb25BdHRyaWJ1dGVzKSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbZXh0ZW5zaW9uLm5hbWUsIHNjaGVtYV07XHJcbiAgICB9KSk7XHJcbiAgICByZXR1cm4gbmV3IFNjaGVtYSh7XHJcbiAgICAgICAgdG9wTm9kZSxcclxuICAgICAgICBub2RlcyxcclxuICAgICAgICBtYXJrcyxcclxuICAgIH0pO1xyXG59XG5cbmZ1bmN0aW9uIGdldFNjaGVtYVR5cGVCeU5hbWUobmFtZSwgc2NoZW1hKSB7XHJcbiAgICByZXR1cm4gc2NoZW1hLm5vZGVzW25hbWVdIHx8IHNjaGVtYS5tYXJrc1tuYW1lXSB8fCBudWxsO1xyXG59XG5cbmZ1bmN0aW9uIGlzRXh0ZW5zaW9uUnVsZXNFbmFibGVkKGV4dGVuc2lvbiwgZW5hYmxlZCkge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZW5hYmxlZCkpIHtcclxuICAgICAgICByZXR1cm4gZW5hYmxlZC5zb21lKGVuYWJsZWRFeHRlbnNpb24gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdHlwZW9mIGVuYWJsZWRFeHRlbnNpb24gPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICA/IGVuYWJsZWRFeHRlbnNpb25cclxuICAgICAgICAgICAgICAgIDogZW5hYmxlZEV4dGVuc2lvbi5uYW1lO1xyXG4gICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gZXh0ZW5zaW9uLm5hbWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW5hYmxlZDtcclxufVxuXG5jb25zdCBnZXRUZXh0Q29udGVudEZyb21Ob2RlcyA9ICgkZnJvbSwgbWF4TWF0Y2ggPSA1MDApID0+IHtcclxuICAgIGxldCB0ZXh0QmVmb3JlID0gJyc7XHJcbiAgICBjb25zdCBzbGljZUVuZFBvcyA9ICRmcm9tLnBhcmVudE9mZnNldDtcclxuICAgICRmcm9tLnBhcmVudC5ub2Rlc0JldHdlZW4oTWF0aC5tYXgoMCwgc2xpY2VFbmRQb3MgLSBtYXhNYXRjaCksIHNsaWNlRW5kUG9zLCAobm9kZSwgcG9zLCBwYXJlbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgdmFyIF9hLCBfYjtcclxuICAgICAgICBjb25zdCBjaHVuayA9ICgoX2IgPSAoX2EgPSBub2RlLnR5cGUuc3BlYykudG9UZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwge1xyXG4gICAgICAgICAgICBub2RlLFxyXG4gICAgICAgICAgICBwb3MsXHJcbiAgICAgICAgICAgIHBhcmVudCxcclxuICAgICAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgfSkpXHJcbiAgICAgICAgICAgIHx8IG5vZGUudGV4dENvbnRlbnRcclxuICAgICAgICAgICAgfHwgJyVsZWFmJSc7XHJcbiAgICAgICAgdGV4dEJlZm9yZSArPSBjaHVuay5zbGljZSgwLCBNYXRoLm1heCgwLCBzbGljZUVuZFBvcyAtIHBvcykpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGV4dEJlZm9yZTtcclxufTtcblxuZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJztcclxufVxuXG5jbGFzcyBJbnB1dFJ1bGUge1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5maW5kID0gY29uZmlnLmZpbmQ7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gY29uZmlnLmhhbmRsZXI7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgaW5wdXRSdWxlTWF0Y2hlckhhbmRsZXIgPSAodGV4dCwgZmluZCkgPT4ge1xyXG4gICAgaWYgKGlzUmVnRXhwKGZpbmQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbmQuZXhlYyh0ZXh0KTtcclxuICAgIH1cclxuICAgIGNvbnN0IGlucHV0UnVsZU1hdGNoID0gZmluZCh0ZXh0KTtcclxuICAgIGlmICghaW5wdXRSdWxlTWF0Y2gpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlc3VsdCA9IFtpbnB1dFJ1bGVNYXRjaC50ZXh0XTtcclxuICAgIHJlc3VsdC5pbmRleCA9IGlucHV0UnVsZU1hdGNoLmluZGV4O1xyXG4gICAgcmVzdWx0LmlucHV0ID0gdGV4dDtcclxuICAgIHJlc3VsdC5kYXRhID0gaW5wdXRSdWxlTWF0Y2guZGF0YTtcclxuICAgIGlmIChpbnB1dFJ1bGVNYXRjaC5yZXBsYWNlV2l0aCkge1xyXG4gICAgICAgIGlmICghaW5wdXRSdWxlTWF0Y2gudGV4dC5pbmNsdWRlcyhpbnB1dFJ1bGVNYXRjaC5yZXBsYWNlV2l0aCkpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdGlwdGFwIHdhcm5dOiBcImlucHV0UnVsZU1hdGNoLnJlcGxhY2VXaXRoXCIgbXVzdCBiZSBwYXJ0IG9mIFwiaW5wdXRSdWxlTWF0Y2gudGV4dFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQucHVzaChpbnB1dFJ1bGVNYXRjaC5yZXBsYWNlV2l0aCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5mdW5jdGlvbiBydW4kMShjb25maWcpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IHsgZWRpdG9yLCBmcm9tLCB0bywgdGV4dCwgcnVsZXMsIHBsdWdpbiwgfSA9IGNvbmZpZztcclxuICAgIGNvbnN0IHsgdmlldyB9ID0gZWRpdG9yO1xyXG4gICAgaWYgKHZpZXcuY29tcG9zaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgJGZyb20gPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGZyb20pO1xyXG4gICAgaWYgKFxyXG4gICAgLy8gY2hlY2sgZm9yIGNvZGUgbm9kZVxyXG4gICAgJGZyb20ucGFyZW50LnR5cGUuc3BlYy5jb2RlXHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIGNvZGUgbWFya1xyXG4gICAgICAgIHx8ICEhKChfYSA9ICgkZnJvbS5ub2RlQmVmb3JlIHx8ICRmcm9tLm5vZGVBZnRlcikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXJrcy5maW5kKG1hcmsgPT4gbWFyay50eXBlLnNwZWMuY29kZSkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IG1hdGNoZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0IHRleHRCZWZvcmUgPSBnZXRUZXh0Q29udGVudEZyb21Ob2RlcygkZnJvbSkgKyB0ZXh0O1xyXG4gICAgcnVsZXMuZm9yRWFjaChydWxlID0+IHtcclxuICAgICAgICBpZiAobWF0Y2hlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gaW5wdXRSdWxlTWF0Y2hlckhhbmRsZXIodGV4dEJlZm9yZSwgcnVsZS5maW5kKTtcclxuICAgICAgICBpZiAoIW1hdGNoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdHIgPSB2aWV3LnN0YXRlLnRyO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gY3JlYXRlQ2hhaW5hYmxlU3RhdGUoe1xyXG4gICAgICAgICAgICBzdGF0ZTogdmlldy5zdGF0ZSxcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRyLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHJhbmdlID0ge1xyXG4gICAgICAgICAgICBmcm9tOiBmcm9tIC0gKG1hdGNoWzBdLmxlbmd0aCAtIHRleHQubGVuZ3RoKSxcclxuICAgICAgICAgICAgdG8sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCB7IGNvbW1hbmRzLCBjaGFpbiwgY2FuIH0gPSBuZXcgQ29tbWFuZE1hbmFnZXIoe1xyXG4gICAgICAgICAgICBlZGl0b3IsXHJcbiAgICAgICAgICAgIHN0YXRlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBydWxlLmhhbmRsZXIoe1xyXG4gICAgICAgICAgICBzdGF0ZSxcclxuICAgICAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgICAgIG1hdGNoLFxyXG4gICAgICAgICAgICBjb21tYW5kcyxcclxuICAgICAgICAgICAgY2hhaW4sXHJcbiAgICAgICAgICAgIGNhbixcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBzdG9wIGlmIHRoZXJlIGFyZSBubyBjaGFuZ2VzXHJcbiAgICAgICAgaWYgKGhhbmRsZXIgPT09IG51bGwgfHwgIXRyLnN0ZXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHN0b3JlIHRyYW5zZm9ybSBhcyBtZXRhIGRhdGFcclxuICAgICAgICAvLyBzbyB3ZSBjYW4gdW5kbyBpbnB1dCBydWxlcyB3aXRoaW4gdGhlIGB1bmRvSW5wdXRSdWxlc2AgY29tbWFuZFxyXG4gICAgICAgIHRyLnNldE1ldGEocGx1Z2luLCB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHIsXHJcbiAgICAgICAgICAgIGZyb20sXHJcbiAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICB0ZXh0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZpZXcuZGlzcGF0Y2godHIpO1xyXG4gICAgICAgIG1hdGNoZWQgPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbWF0Y2hlZDtcclxufVxyXG4vKipcclxuICogQ3JlYXRlIGFuIGlucHV0IHJ1bGVzIHBsdWdpbi4gV2hlbiBlbmFibGVkLCBpdCB3aWxsIGNhdXNlIHRleHRcclxuICogaW5wdXQgdGhhdCBtYXRjaGVzIGFueSBvZiB0aGUgZ2l2ZW4gcnVsZXMgdG8gdHJpZ2dlciB0aGUgcnVsZeKAmXNcclxuICogYWN0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gaW5wdXRSdWxlc1BsdWdpbihwcm9wcykge1xyXG4gICAgY29uc3QgeyBlZGl0b3IsIHJ1bGVzIH0gPSBwcm9wcztcclxuICAgIGNvbnN0IHBsdWdpbiA9IG5ldyBQbHVnaW4oe1xyXG4gICAgICAgIHN0YXRlOiB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXBwbHkodHIsIHByZXYpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JlZCA9IHRyLmdldE1ldGEocGx1Z2luKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdG9yZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyLnNlbGVjdGlvblNldCB8fCB0ci5kb2NDaGFuZ2VkID8gbnVsbCA6IHByZXY7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICBoYW5kbGVUZXh0SW5wdXQodmlldywgZnJvbSwgdG8sIHRleHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBydW4kMSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGZyb20sXHJcbiAgICAgICAgICAgICAgICAgICAgdG8sXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBydWxlcyxcclxuICAgICAgICAgICAgICAgICAgICBwbHVnaW4sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFuZGxlRE9NRXZlbnRzOiB7XHJcbiAgICAgICAgICAgICAgICBjb21wb3NpdGlvbmVuZDogdmlldyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgJGN1cnNvciB9ID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW4kMSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206ICRjdXJzb3IucG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAkY3Vyc29yLnBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIGFkZCBzdXBwb3J0IGZvciBpbnB1dCBydWxlcyB0byB0cmlnZ2VyIG9uIGVudGVyXHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdXNlZnVsIGZvciBleGFtcGxlIGZvciBjb2RlIGJsb2Nrc1xyXG4gICAgICAgICAgICBoYW5kbGVLZXlEb3duKHZpZXcsIGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ICE9PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgeyAkY3Vyc29yIH0gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGlmICgkY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1biQxKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAkY3Vyc29yLnBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86ICRjdXJzb3IucG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnXFxuJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbixcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpc0lucHV0UnVsZXM6IHRydWUsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwbHVnaW47XHJcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xyXG59XG5cbmNsYXNzIFBhc3RlUnVsZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcclxuICAgICAgICB0aGlzLmZpbmQgPSBjb25maWcuZmluZDtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBjb25maWcuaGFuZGxlcjtcclxuICAgIH1cclxufVxyXG5jb25zdCBwYXN0ZVJ1bGVNYXRjaGVySGFuZGxlciA9ICh0ZXh0LCBmaW5kKSA9PiB7XHJcbiAgICBpZiAoaXNSZWdFeHAoZmluZCkpIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRleHQubWF0Y2hBbGwoZmluZCldO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWF0Y2hlcyA9IGZpbmQodGV4dCk7XHJcbiAgICBpZiAoIW1hdGNoZXMpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF0Y2hlcy5tYXAocGFzdGVSdWxlTWF0Y2ggPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtwYXN0ZVJ1bGVNYXRjaC50ZXh0XTtcclxuICAgICAgICByZXN1bHQuaW5kZXggPSBwYXN0ZVJ1bGVNYXRjaC5pbmRleDtcclxuICAgICAgICByZXN1bHQuaW5wdXQgPSB0ZXh0O1xyXG4gICAgICAgIHJlc3VsdC5kYXRhID0gcGFzdGVSdWxlTWF0Y2guZGF0YTtcclxuICAgICAgICBpZiAocGFzdGVSdWxlTWF0Y2gucmVwbGFjZVdpdGgpIHtcclxuICAgICAgICAgICAgaWYgKCFwYXN0ZVJ1bGVNYXRjaC50ZXh0LmluY2x1ZGVzKHBhc3RlUnVsZU1hdGNoLnJlcGxhY2VXaXRoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdGlwdGFwIHdhcm5dOiBcInBhc3RlUnVsZU1hdGNoLnJlcGxhY2VXaXRoXCIgbXVzdCBiZSBwYXJ0IG9mIFwicGFzdGVSdWxlTWF0Y2gudGV4dFwiLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhc3RlUnVsZU1hdGNoLnJlcGxhY2VXaXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBydW4oY29uZmlnKSB7XHJcbiAgICBjb25zdCB7IGVkaXRvciwgc3RhdGUsIGZyb20sIHRvLCBydWxlLCBwYXN0ZUV2ZW50LCBkcm9wRXZlbnQsIH0gPSBjb25maWc7XHJcbiAgICBjb25zdCB7IGNvbW1hbmRzLCBjaGFpbiwgY2FuIH0gPSBuZXcgQ29tbWFuZE1hbmFnZXIoe1xyXG4gICAgICAgIGVkaXRvcixcclxuICAgICAgICBzdGF0ZSxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaGFuZGxlcnMgPSBbXTtcclxuICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICBpZiAoIW5vZGUuaXNUZXh0YmxvY2sgfHwgbm9kZS50eXBlLnNwZWMuY29kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkRnJvbSA9IE1hdGgubWF4KGZyb20sIHBvcyk7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRUbyA9IE1hdGgubWluKHRvLCBwb3MgKyBub2RlLmNvbnRlbnQuc2l6ZSk7XHJcbiAgICAgICAgY29uc3QgdGV4dFRvTWF0Y2ggPSBub2RlLnRleHRCZXR3ZWVuKHJlc29sdmVkRnJvbSAtIHBvcywgcmVzb2x2ZWRUbyAtIHBvcywgdW5kZWZpbmVkLCAnXFx1ZmZmYycpO1xyXG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBwYXN0ZVJ1bGVNYXRjaGVySGFuZGxlcih0ZXh0VG9NYXRjaCwgcnVsZS5maW5kKTtcclxuICAgICAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xyXG4gICAgICAgICAgICBpZiAobWF0Y2guaW5kZXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gcmVzb2x2ZWRGcm9tICsgbWF0Y2guaW5kZXggKyAxO1xyXG4gICAgICAgICAgICBjb25zdCBlbmQgPSBzdGFydCArIG1hdGNoWzBdLmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICBmcm9tOiBzdGF0ZS50ci5tYXBwaW5nLm1hcChzdGFydCksXHJcbiAgICAgICAgICAgICAgICB0bzogc3RhdGUudHIubWFwcGluZy5tYXAoZW5kKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHJ1bGUuaGFuZGxlcih7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSxcclxuICAgICAgICAgICAgICAgIHJhbmdlLFxyXG4gICAgICAgICAgICAgICAgbWF0Y2gsXHJcbiAgICAgICAgICAgICAgICBjb21tYW5kcyxcclxuICAgICAgICAgICAgICAgIGNoYWluLFxyXG4gICAgICAgICAgICAgICAgY2FuLFxyXG4gICAgICAgICAgICAgICAgcGFzdGVFdmVudCxcclxuICAgICAgICAgICAgICAgIGRyb3BFdmVudCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHN1Y2Nlc3MgPSBoYW5kbGVycy5ldmVyeShoYW5kbGVyID0+IGhhbmRsZXIgIT09IG51bGwpO1xyXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSBhbiBwYXN0ZSBydWxlcyBwbHVnaW4uIFdoZW4gZW5hYmxlZCwgaXQgd2lsbCBjYXVzZSBwYXN0ZWRcclxuICogdGV4dCB0aGF0IG1hdGNoZXMgYW55IG9mIHRoZSBnaXZlbiBydWxlcyB0byB0cmlnZ2VyIHRoZSBydWxl4oCZc1xyXG4gKiBhY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXN0ZVJ1bGVzUGx1Z2luKHByb3BzKSB7XHJcbiAgICBjb25zdCB7IGVkaXRvciwgcnVsZXMgfSA9IHByb3BzO1xyXG4gICAgbGV0IGRyYWdTb3VyY2VFbGVtZW50ID0gbnVsbDtcclxuICAgIGxldCBpc1Bhc3RlZEZyb21Qcm9zZU1pcnJvciA9IGZhbHNlO1xyXG4gICAgbGV0IGlzRHJvcHBlZEZyb21Qcm9zZU1pcnJvciA9IGZhbHNlO1xyXG4gICAgbGV0IHBhc3RlRXZlbnQgPSBuZXcgQ2xpcGJvYXJkRXZlbnQoJ3Bhc3RlJyk7XHJcbiAgICBsZXQgZHJvcEV2ZW50ID0gbmV3IERyYWdFdmVudCgnZHJvcCcpO1xyXG4gICAgY29uc3QgcGx1Z2lucyA9IHJ1bGVzLm1hcChydWxlID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFBsdWdpbih7XHJcbiAgICAgICAgICAgIC8vIHdlIHJlZ2lzdGVyIGEgZ2xvYmFsIGRyYWcgaGFuZGxlciB0byB0cmFjayB0aGUgY3VycmVudCBkcmFnIHNvdXJjZSBlbGVtZW50XHJcbiAgICAgICAgICAgIHZpZXcodmlldykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlRHJhZ3N0YXJ0ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdTb3VyY2VFbGVtZW50ID0gKChfYSA9IHZpZXcuZG9tLnBhcmVudEVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb250YWlucyhldmVudC50YXJnZXQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHZpZXcuZG9tLnBhcmVudEVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBoYW5kbGVEcmFnc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgaGFuZGxlRHJhZ3N0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZURPTUV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyb3A6ICh2aWV3LCBldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0Ryb3BwZWRGcm9tUHJvc2VNaXJyb3IgPSBkcmFnU291cmNlRWxlbWVudCA9PT0gdmlldy5kb20ucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcEV2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3RlOiAoX3ZpZXcsIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaHRtbCA9IChfYSA9IGV2ZW50LmNsaXBib2FyZERhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXREYXRhKCd0ZXh0L2h0bWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFzdGVFdmVudCA9IGV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Bhc3RlZEZyb21Qcm9zZU1pcnJvciA9ICEhKGh0bWwgPT09IG51bGwgfHwgaHRtbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaHRtbC5pbmNsdWRlcygnZGF0YS1wbS1zbGljZScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhcHBlbmRUcmFuc2FjdGlvbjogKHRyYW5zYWN0aW9ucywgb2xkU3RhdGUsIHN0YXRlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uc1swXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzUGFzdGUgPSB0cmFuc2FjdGlvbi5nZXRNZXRhKCd1aUV2ZW50JykgPT09ICdwYXN0ZScgJiYgIWlzUGFzdGVkRnJvbVByb3NlTWlycm9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNEcm9wID0gdHJhbnNhY3Rpb24uZ2V0TWV0YSgndWlFdmVudCcpID09PSAnZHJvcCcgJiYgIWlzRHJvcHBlZEZyb21Qcm9zZU1pcnJvcjtcclxuICAgICAgICAgICAgICAgIGlmICghaXNQYXN0ZSAmJiAhaXNEcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gc3RvcCBpZiB0aGVyZSBpcyBubyBjaGFuZ2VkIHJhbmdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmcm9tID0gb2xkU3RhdGUuZG9jLmNvbnRlbnQuZmluZERpZmZTdGFydChzdGF0ZS5kb2MuY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0byA9IG9sZFN0YXRlLmRvYy5jb250ZW50LmZpbmREaWZmRW5kKHN0YXRlLmRvYy5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNOdW1iZXIoZnJvbSkgfHwgIXRvIHx8IGZyb20gPT09IHRvLmIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBhIGNoYWluYWJsZSBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgY2FuIHVzZSBhIHNpbmdsZSB0cmFuc2FjdGlvbiBmb3IgYWxsIHBhc3RlIHJ1bGVzXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ciA9IHN0YXRlLnRyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hhaW5hYmxlU3RhdGUgPSBjcmVhdGVDaGFpbmFibGVTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRyLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gcnVuKHtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGNoYWluYWJsZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZyb206IE1hdGgubWF4KGZyb20gLSAxLCAwKSxcclxuICAgICAgICAgICAgICAgICAgICB0bzogdG8uYiAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZSxcclxuICAgICAgICAgICAgICAgICAgICBwYXN0ZUV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGRyb3BFdmVudCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gc3RvcCBpZiB0aGVyZSBhcmUgbm8gY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVyIHx8ICF0ci5zdGVwcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkcm9wRXZlbnQgPSBuZXcgRHJhZ0V2ZW50KCdkcm9wJyk7XHJcbiAgICAgICAgICAgICAgICBwYXN0ZUV2ZW50ID0gbmV3IENsaXBib2FyZEV2ZW50KCdwYXN0ZScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcGx1Z2lucztcclxufVxuXG5mdW5jdGlvbiBmaW5kRHVwbGljYXRlcyhpdGVtcykge1xyXG4gICAgY29uc3QgZmlsdGVyZWQgPSBpdGVtcy5maWx0ZXIoKGVsLCBpbmRleCkgPT4gaXRlbXMuaW5kZXhPZihlbCkgIT09IGluZGV4KTtcclxuICAgIHJldHVybiBbLi4ubmV3IFNldChmaWx0ZXJlZCldO1xyXG59XG5cbmNsYXNzIEV4dGVuc2lvbk1hbmFnZXIge1xyXG4gICAgY29uc3RydWN0b3IoZXh0ZW5zaW9ucywgZWRpdG9yKSB7XHJcbiAgICAgICAgdGhpcy5zcGxpdHRhYmxlTWFya3MgPSBbXTtcclxuICAgICAgICB0aGlzLmVkaXRvciA9IGVkaXRvcjtcclxuICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSBFeHRlbnNpb25NYW5hZ2VyLnJlc29sdmUoZXh0ZW5zaW9ucyk7XHJcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBnZXRTY2hlbWFCeVJlc29sdmVkRXh0ZW5zaW9ucyh0aGlzLmV4dGVuc2lvbnMsIGVkaXRvcik7XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb25zLmZvckVhY2goZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAvLyBzdG9yZSBleHRlbnNpb24gc3RvcmFnZSBpbiBlZGl0b3JcclxuICAgICAgICAgICAgdGhpcy5lZGl0b3IuZXh0ZW5zaW9uU3RvcmFnZVtleHRlbnNpb24ubmFtZV0gPSBleHRlbnNpb24uc3RvcmFnZTtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcy5lZGl0b3IsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBnZXRTY2hlbWFUeXBlQnlOYW1lKGV4dGVuc2lvbi5uYW1lLCB0aGlzLnNjaGVtYSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChleHRlbnNpb24udHlwZSA9PT0gJ21hcmsnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZWVwT25TcGxpdCA9IChfYSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdrZWVwT25TcGxpdCcsIGNvbnRleHQpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChrZWVwT25TcGxpdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BsaXR0YWJsZU1hcmtzLnB1c2goZXh0ZW5zaW9uLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uQmVmb3JlQ3JlYXRlID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25CZWZvcmVDcmVhdGUnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uQmVmb3JlQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbignYmVmb3JlQ3JlYXRlJywgb25CZWZvcmVDcmVhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uQ3JlYXRlID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25DcmVhdGUnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbignY3JlYXRlJywgb25DcmVhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uVXBkYXRlID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25VcGRhdGUnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uVXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbigndXBkYXRlJywgb25VcGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uU2VsZWN0aW9uVXBkYXRlID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25TZWxlY3Rpb25VcGRhdGUnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uU2VsZWN0aW9uVXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbignc2VsZWN0aW9uVXBkYXRlJywgb25TZWxlY3Rpb25VcGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uVHJhbnNhY3Rpb24gPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdvblRyYW5zYWN0aW9uJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvblRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5vbigndHJhbnNhY3Rpb24nLCBvblRyYW5zYWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvbkZvY3VzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25Gb2N1cycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAob25Gb2N1cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oJ2ZvY3VzJywgb25Gb2N1cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgb25CbHVyID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnb25CbHVyJywgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvbkJsdXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLm9uKCdibHVyJywgb25CbHVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvbkRlc3Ryb3kgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdvbkRlc3Ryb3knLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKG9uRGVzdHJveSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oJ2Rlc3Ryb3knLCBvbkRlc3Ryb3kpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgcmVzb2x2ZShleHRlbnNpb25zKSB7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRFeHRlbnNpb25zID0gRXh0ZW5zaW9uTWFuYWdlci5zb3J0KEV4dGVuc2lvbk1hbmFnZXIuZmxhdHRlbihleHRlbnNpb25zKSk7XHJcbiAgICAgICAgY29uc3QgZHVwbGljYXRlZE5hbWVzID0gZmluZER1cGxpY2F0ZXMocmVzb2x2ZWRFeHRlbnNpb25zLm1hcChleHRlbnNpb24gPT4gZXh0ZW5zaW9uLm5hbWUpKTtcclxuICAgICAgICBpZiAoZHVwbGljYXRlZE5hbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFt0aXB0YXAgd2Fybl06IER1cGxpY2F0ZSBleHRlbnNpb24gbmFtZXMgZm91bmQ6IFske2R1cGxpY2F0ZWROYW1lc1xyXG4gICAgICAgICAgICAgICAgLm1hcChpdGVtID0+IGAnJHtpdGVtfSdgKVxyXG4gICAgICAgICAgICAgICAgLmpvaW4oJywgJyl9XS4gVGhpcyBjYW4gbGVhZCB0byBpc3N1ZXMuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNvbHZlZEV4dGVuc2lvbnM7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZmxhdHRlbihleHRlbnNpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIChleHRlbnNpb25zXHJcbiAgICAgICAgICAgIC5tYXAoZXh0ZW5zaW9uID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgYWRkRXh0ZW5zaW9ucyA9IGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZEV4dGVuc2lvbnMnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKGFkZEV4dGVuc2lvbnMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZXh0ZW5zaW9uLCAuLi50aGlzLmZsYXR0ZW4oYWRkRXh0ZW5zaW9ucygpKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAvLyBgSW5maW5pdHlgIHdpbGwgYnJlYWsgVHlwZVNjcmlwdCBzbyB3ZSBzZXQgYSBudW1iZXIgdGhhdCBpcyBwcm9iYWJseSBoaWdoIGVub3VnaFxyXG4gICAgICAgICAgICAuZmxhdCgxMCkpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHNvcnQoZXh0ZW5zaW9ucykge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRQcmlvcml0eSA9IDEwMDtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9ucy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5QSA9IGdldEV4dGVuc2lvbkZpZWxkKGEsICdwcmlvcml0eScpIHx8IGRlZmF1bHRQcmlvcml0eTtcclxuICAgICAgICAgICAgY29uc3QgcHJpb3JpdHlCID0gZ2V0RXh0ZW5zaW9uRmllbGQoYiwgJ3ByaW9yaXR5JykgfHwgZGVmYXVsdFByaW9yaXR5O1xyXG4gICAgICAgICAgICBpZiAocHJpb3JpdHlBID4gcHJpb3JpdHlCKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByaW9yaXR5QSA8IHByaW9yaXR5Qikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBnZXQgY29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5yZWR1Y2UoKGNvbW1hbmRzLCBleHRlbnNpb24pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcy5lZGl0b3IsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBnZXRTY2hlbWFUeXBlQnlOYW1lKGV4dGVuc2lvbi5uYW1lLCB0aGlzLnNjaGVtYSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZENvbW1hbmRzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkQ29tbWFuZHMnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKCFhZGRDb21tYW5kcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5jb21tYW5kcyxcclxuICAgICAgICAgICAgICAgIC4uLmFkZENvbW1hbmRzKCksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSwge30pO1xyXG4gICAgfVxyXG4gICAgZ2V0IHBsdWdpbnMoKSB7XHJcbiAgICAgICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXM7XHJcbiAgICAgICAgLy8gV2l0aCBQcm9zZU1pcnJvciwgZmlyc3QgcGx1Z2lucyB3aXRoaW4gYW4gYXJyYXkgYXJlIGV4ZWN1dGVkIGZpcnN0LlxyXG4gICAgICAgIC8vIEluIFRpcHRhcCwgd2UgcHJvdmlkZSB0aGUgYWJpbGl0eSB0byBvdmVycmlkZSBwbHVnaW5zLFxyXG4gICAgICAgIC8vIHNvIGl0IGZlZWxzIG1vcmUgbmF0dXJhbCB0byBydW4gcGx1Z2lucyBhdCB0aGUgZW5kIG9mIGFuIGFycmF5IGZpcnN0LlxyXG4gICAgICAgIC8vIFRoYXTigJlzIHdoeSB3ZSBoYXZlIHRvIHJldmVyc2UgdGhlIGBleHRlbnNpb25zYCBhcnJheSBhbmQgc29ydCBhZ2FpblxyXG4gICAgICAgIC8vIGJhc2VkIG9uIHRoZSBgcHJpb3JpdHlgIG9wdGlvbi5cclxuICAgICAgICBjb25zdCBleHRlbnNpb25zID0gRXh0ZW5zaW9uTWFuYWdlci5zb3J0KFsuLi50aGlzLmV4dGVuc2lvbnNdLnJldmVyc2UoKSk7XHJcbiAgICAgICAgY29uc3QgaW5wdXRSdWxlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHBhc3RlUnVsZXMgPSBbXTtcclxuICAgICAgICBjb25zdCBhbGxQbHVnaW5zID0gZXh0ZW5zaW9uc1xyXG4gICAgICAgICAgICAubWFwKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2UsXHJcbiAgICAgICAgICAgICAgICBlZGl0b3IsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBnZXRTY2hlbWFUeXBlQnlOYW1lKGV4dGVuc2lvbi5uYW1lLCB0aGlzLnNjaGVtYSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbnMgPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgYWRkS2V5Ym9hcmRTaG9ydGN1dHMgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRLZXlib2FyZFNob3J0Y3V0cycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBsZXQgZGVmYXVsdEJpbmRpbmdzID0ge307XHJcbiAgICAgICAgICAgIC8vIGJpbmQgZXhpdCBoYW5kbGluZ1xyXG4gICAgICAgICAgICBpZiAoZXh0ZW5zaW9uLnR5cGUgPT09ICdtYXJrJyAmJiBleHRlbnNpb24uY29uZmlnLmV4aXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0QmluZGluZ3MuQXJyb3dSaWdodCA9ICgpID0+IE1hcmsuaGFuZGxlRXhpdCh7IGVkaXRvciwgbWFyazogZXh0ZW5zaW9uIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhZGRLZXlib2FyZFNob3J0Y3V0cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmluZGluZ3MgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSkubWFwKChbc2hvcnRjdXQsIG1ldGhvZF0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3Nob3J0Y3V0LCAoKSA9PiBtZXRob2QoeyBlZGl0b3IgfSldO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdEJpbmRpbmdzID0geyAuLi5kZWZhdWx0QmluZGluZ3MsIC4uLmJpbmRpbmdzIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qga2V5TWFwUGx1Z2luID0ga2V5bWFwKGRlZmF1bHRCaW5kaW5ncyk7XHJcbiAgICAgICAgICAgIHBsdWdpbnMucHVzaChrZXlNYXBQbHVnaW4pO1xyXG4gICAgICAgICAgICBjb25zdCBhZGRJbnB1dFJ1bGVzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkSW5wdXRSdWxlcycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoaXNFeHRlbnNpb25SdWxlc0VuYWJsZWQoZXh0ZW5zaW9uLCBlZGl0b3Iub3B0aW9ucy5lbmFibGVJbnB1dFJ1bGVzKSAmJiBhZGRJbnB1dFJ1bGVzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFJ1bGVzLnB1c2goLi4uYWRkSW5wdXRSdWxlcygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhZGRQYXN0ZVJ1bGVzID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkUGFzdGVSdWxlcycsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoaXNFeHRlbnNpb25SdWxlc0VuYWJsZWQoZXh0ZW5zaW9uLCBlZGl0b3Iub3B0aW9ucy5lbmFibGVQYXN0ZVJ1bGVzKSAmJiBhZGRQYXN0ZVJ1bGVzKSB7XHJcbiAgICAgICAgICAgICAgICBwYXN0ZVJ1bGVzLnB1c2goLi4uYWRkUGFzdGVSdWxlcygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhZGRQcm9zZU1pcnJvclBsdWdpbnMgPSBnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRQcm9zZU1pcnJvclBsdWdpbnMnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKGFkZFByb3NlTWlycm9yUGx1Z2lucykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvc2VNaXJyb3JQbHVnaW5zID0gYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCk7XHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zLnB1c2goLi4ucHJvc2VNaXJyb3JQbHVnaW5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcGx1Z2lucztcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuZmxhdCgpO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGlucHV0UnVsZXNQbHVnaW4oe1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLFxyXG4gICAgICAgICAgICAgICAgcnVsZXM6IGlucHV0UnVsZXMsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAuLi5wYXN0ZVJ1bGVzUGx1Z2luKHtcclxuICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgIHJ1bGVzOiBwYXN0ZVJ1bGVzLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgLi4uYWxsUGx1Z2lucyxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgZ2V0IGF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZXNGcm9tRXh0ZW5zaW9ucyh0aGlzLmV4dGVuc2lvbnMpO1xyXG4gICAgfVxyXG4gICAgZ2V0IG5vZGVWaWV3cygpIHtcclxuICAgICAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcztcclxuICAgICAgICBjb25zdCB7IG5vZGVFeHRlbnNpb25zIH0gPSBzcGxpdEV4dGVuc2lvbnModGhpcy5leHRlbnNpb25zKTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKG5vZGVFeHRlbnNpb25zXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZXh0ZW5zaW9uID0+ICEhZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkTm9kZVZpZXcnKSlcclxuICAgICAgICAgICAgLm1hcChleHRlbnNpb24gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb25BdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzLmZpbHRlcihhdHRyaWJ1dGUgPT4gYXR0cmlidXRlLnR5cGUgPT09IGV4dGVuc2lvbi5uYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgIHR5cGU6IGdldE5vZGVUeXBlKGV4dGVuc2lvbi5uYW1lLCB0aGlzLnNjaGVtYSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZE5vZGVWaWV3ID0gZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkTm9kZVZpZXcnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKCFhZGROb2RlVmlldykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGV2aWV3ID0gKG5vZGUsIHZpZXcsIGdldFBvcywgZGVjb3JhdGlvbnMpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEhUTUxBdHRyaWJ1dGVzID0gZ2V0UmVuZGVyZWRBdHRyaWJ1dGVzKG5vZGUsIGV4dGVuc2lvbkF0dHJpYnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVWaWV3KCkoe1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICAgICAgICAgICAgICBub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldFBvcyxcclxuICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICBIVE1MQXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb24sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIFtleHRlbnNpb24ubmFtZSwgbm9kZXZpZXddO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxuXG4vLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tZXNxdWVlYi9pcy13aGF0L2Jsb2IvODhkNmU0Y2E5MmZiMmJhYWI2MDAzYzU0ZTAyZWVkZjRlNzI5ZTVhYi9zcmMvaW5kZXgudHNcclxuZnVuY3Rpb24gZ2V0VHlwZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpO1xyXG59XHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcclxuICAgIGlmIChnZXRUeXBlKHZhbHVlKSAhPT0gJ09iamVjdCcpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBPYmplY3QucHJvdG90eXBlO1xyXG59XG5cbmZ1bmN0aW9uIG1lcmdlRGVlcCh0YXJnZXQsIHNvdXJjZSkge1xyXG4gICAgY29uc3Qgb3V0cHV0ID0geyAuLi50YXJnZXQgfTtcclxuICAgIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG91dHB1dCwgeyBba2V5XTogc291cmNlW2tleV0gfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRba2V5XSA9IG1lcmdlRGVlcCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvdXRwdXQsIHsgW2tleV06IHNvdXJjZVtrZXldIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0cHV0O1xyXG59XG5cbmNsYXNzIEV4dGVuc2lvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9ICdleHRlbnNpb24nO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdleHRlbnNpb24nO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNoaWxkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBkZWZhdWx0T3B0aW9uczoge30sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgICAgLi4udGhpcy5jb25maWcsXHJcbiAgICAgICAgICAgIC4uLmNvbmZpZyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uZmlnLm5hbWU7XHJcbiAgICAgICAgaWYgKGNvbmZpZy5kZWZhdWx0T3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFt0aXB0YXAgd2Fybl06IEJSRUFLSU5HIENIQU5HRTogXCJkZWZhdWx0T3B0aW9uc1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCJhZGRPcHRpb25zXCIgaW5zdGVhZC4gRm91bmQgaW4gZXh0ZW5zaW9uOiBcIiR7dGhpcy5uYW1lfVwiLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgYGFkZE9wdGlvbnNgIGZhbGxiYWNrXHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5jb25maWcuZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFkZE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKHRoaXMsICdhZGRPcHRpb25zJywge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZCh0aGlzLCAnYWRkU3RvcmFnZScsIHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXHJcbiAgICAgICAgfSkpIHx8IHt9O1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGNyZWF0ZShjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRXh0ZW5zaW9uKGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBjb25maWd1cmUob3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIGEgbmV3IGluc3RhbmNlIHNvIHdlIGNhbiB1c2UgdGhlIHNhbWUgZXh0ZW5zaW9uXHJcbiAgICAgICAgLy8gd2l0aCBkaWZmZXJlbnQgY2FsbHMgb2YgYGNvbmZpZ3VyZWBcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSB0aGlzLmV4dGVuZCgpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5vcHRpb25zID0gbWVyZ2VEZWVwKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLnN0b3JhZ2UgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkU3RvcmFnZScsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uO1xyXG4gICAgfVxyXG4gICAgZXh0ZW5kKGV4dGVuZGVkQ29uZmlnID0ge30pIHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSBuZXcgRXh0ZW5zaW9uKGV4dGVuZGVkQ29uZmlnKTtcclxuICAgICAgICBleHRlbnNpb24ucGFyZW50ID0gdGhpcztcclxuICAgICAgICB0aGlzLmNoaWxkID0gZXh0ZW5zaW9uO1xyXG4gICAgICAgIGV4dGVuc2lvbi5uYW1lID0gZXh0ZW5kZWRDb25maWcubmFtZSA/IGV4dGVuZGVkQ29uZmlnLm5hbWUgOiBleHRlbnNpb24ucGFyZW50Lm5hbWU7XHJcbiAgICAgICAgaWYgKGV4dGVuZGVkQ29uZmlnLmRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW3RpcHRhcCB3YXJuXTogQlJFQUtJTkcgQ0hBTkdFOiBcImRlZmF1bHRPcHRpb25zXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcImFkZE9wdGlvbnNcIiBpbnN0ZWFkLiBGb3VuZCBpbiBleHRlbnNpb246IFwiJHtleHRlbnNpb24ubmFtZX1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXh0ZW5zaW9uLm9wdGlvbnMgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkT3B0aW9ucycsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5zdG9yYWdlID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZFN0b3JhZ2UnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBnZXRUZXh0QmV0d2VlbihzdGFydE5vZGUsIHJhbmdlLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCB7IGZyb20sIHRvIH0gPSByYW5nZTtcclxuICAgIGNvbnN0IHsgYmxvY2tTZXBhcmF0b3IgPSAnXFxuXFxuJywgdGV4dFNlcmlhbGl6ZXJzID0ge30gfSA9IG9wdGlvbnMgfHwge307XHJcbiAgICBsZXQgdGV4dCA9ICcnO1xyXG4gICAgbGV0IHNlcGFyYXRlZCA9IHRydWU7XHJcbiAgICBzdGFydE5vZGUubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zLCBwYXJlbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IHRleHRTZXJpYWxpemVyID0gdGV4dFNlcmlhbGl6ZXJzID09PSBudWxsIHx8IHRleHRTZXJpYWxpemVycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGV4dFNlcmlhbGl6ZXJzW25vZGUudHlwZS5uYW1lXTtcclxuICAgICAgICBpZiAodGV4dFNlcmlhbGl6ZXIpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUuaXNCbG9jayAmJiAhc2VwYXJhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0ICs9IGJsb2NrU2VwYXJhdG9yO1xyXG4gICAgICAgICAgICAgICAgc2VwYXJhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0ICs9IHRleHRTZXJpYWxpemVyKHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvcyxcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChub2RlLmlzVGV4dCkge1xyXG4gICAgICAgICAgICB0ZXh0ICs9IChfYSA9IG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZS50ZXh0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2xpY2UoTWF0aC5tYXgoZnJvbSwgcG9zKSAtIHBvcywgdG8gLSBwb3MpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICAgICAgICAgIHNlcGFyYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChub2RlLmlzQmxvY2sgJiYgIXNlcGFyYXRlZCkge1xyXG4gICAgICAgICAgICB0ZXh0ICs9IGJsb2NrU2VwYXJhdG9yO1xyXG4gICAgICAgICAgICBzZXBhcmF0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dFNlcmlhbGl6ZXJzRnJvbVNjaGVtYShzY2hlbWEpIHtcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoc2NoZW1hLm5vZGVzKVxyXG4gICAgICAgIC5maWx0ZXIoKFssIG5vZGVdKSA9PiBub2RlLnNwZWMudG9UZXh0KVxyXG4gICAgICAgIC5tYXAoKFtuYW1lLCBub2RlXSkgPT4gW25hbWUsIG5vZGUuc3BlYy50b1RleHRdKSk7XHJcbn1cblxuY29uc3QgQ2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXIgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdjbGlwYm9hcmRUZXh0U2VyaWFsaXplcicsXHJcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbmV3IFBsdWdpbih7XHJcbiAgICAgICAgICAgICAgICBrZXk6IG5ldyBQbHVnaW5LZXkoJ2NsaXBib2FyZFRleHRTZXJpYWxpemVyJyksXHJcbiAgICAgICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXBib2FyZFRleHRTZXJpYWxpemVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHN0YXRlLCBzY2hlbWEgfSA9IGVkaXRvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkb2MsIHNlbGVjdGlvbiB9ID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb20gPSBNYXRoLm1pbiguLi5yYW5nZXMubWFwKHJhbmdlID0+IHJhbmdlLiRmcm9tLnBvcykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0byA9IE1hdGgubWF4KC4uLnJhbmdlcy5tYXAocmFuZ2UgPT4gcmFuZ2UuJHRvLnBvcykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0U2VyaWFsaXplcnMgPSBnZXRUZXh0U2VyaWFsaXplcnNGcm9tU2NoZW1hKHNjaGVtYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0geyBmcm9tLCB0byB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VGV4dEJldHdlZW4oZG9jLCByYW5nZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFNlcmlhbGl6ZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5jb25zdCBibHVyID0gKCkgPT4gKHsgZWRpdG9yLCB2aWV3IH0pID0+IHtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmICghZWRpdG9yLmlzRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgIHZpZXcuZG9tLmJsdXIoKTtcclxuICAgICAgICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIHJlbW92ZSB0aGUgY2FyZXQgb24gYmx1ciBidXQgc2FmYXJpIGRvZXMgbm90LlxyXG4gICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS91ZWJlcmRvc2lzL3RpcHRhcC9pc3N1ZXMvMjQwNVxyXG4gICAgICAgICAgICAoX2EgPSB3aW5kb3cgPT09IG51bGwgfHwgd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBjbGVhckNvbnRlbnQgPSAoZW1pdFVwZGF0ZSA9IGZhbHNlKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICByZXR1cm4gY29tbWFuZHMuc2V0Q29udGVudCgnJywgZW1pdFVwZGF0ZSk7XHJcbn07XG5cbmNvbnN0IGNsZWFyTm9kZXMgPSAoKSA9PiAoeyBzdGF0ZSwgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSB0cjtcclxuICAgIGNvbnN0IHsgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICBpZiAoIWRpc3BhdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByYW5nZXMuZm9yRWFjaCgoeyAkZnJvbSwgJHRvIH0pID0+IHtcclxuICAgICAgICBzdGF0ZS5kb2Mubm9kZXNCZXR3ZWVuKCRmcm9tLnBvcywgJHRvLnBvcywgKG5vZGUsIHBvcykgPT4ge1xyXG4gICAgICAgICAgICBpZiAobm9kZS50eXBlLmlzVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZG9jLCBtYXBwaW5nIH0gPSB0cjtcclxuICAgICAgICAgICAgY29uc3QgJG1hcHBlZEZyb20gPSBkb2MucmVzb2x2ZShtYXBwaW5nLm1hcChwb3MpKTtcclxuICAgICAgICAgICAgY29uc3QgJG1hcHBlZFRvID0gZG9jLnJlc29sdmUobWFwcGluZy5tYXAocG9zICsgbm9kZS5ub2RlU2l6ZSkpO1xyXG4gICAgICAgICAgICBjb25zdCBub2RlUmFuZ2UgPSAkbWFwcGVkRnJvbS5ibG9ja1JhbmdlKCRtYXBwZWRUbyk7XHJcbiAgICAgICAgICAgIGlmICghbm9kZVJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0TGlmdERlcHRoID0gbGlmdFRhcmdldChub2RlUmFuZ2UpO1xyXG4gICAgICAgICAgICBpZiAobm9kZS50eXBlLmlzVGV4dGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRlZmF1bHRUeXBlIH0gPSAkbWFwcGVkRnJvbS5wYXJlbnQuY29udGVudE1hdGNoQXQoJG1hcHBlZEZyb20uaW5kZXgoKSk7XHJcbiAgICAgICAgICAgICAgICB0ci5zZXROb2RlTWFya3VwKG5vZGVSYW5nZS5zdGFydCwgZGVmYXVsdFR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRMaWZ0RGVwdGggfHwgdGFyZ2V0TGlmdERlcHRoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5saWZ0KG5vZGVSYW5nZSwgdGFyZ2V0TGlmdERlcHRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3QgY29tbWFuZCA9IGZuID0+IHByb3BzID0+IHtcclxuICAgIHJldHVybiBmbihwcm9wcyk7XHJcbn07XG5cbmNvbnN0IGNyZWF0ZVBhcmFncmFwaE5lYXIgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVBhcmFncmFwaE5lYXIkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG5jb25zdCBjdXQgPSAob3JpZ2luUmFuZ2UsIHRhcmdldFBvcykgPT4gKHsgZWRpdG9yLCB0ciB9KSA9PiB7XHJcbiAgICBjb25zdCB7IHN0YXRlIH0gPSBlZGl0b3I7XHJcbiAgICBjb25zdCBjb250ZW50U2xpY2UgPSBzdGF0ZS5kb2Muc2xpY2Uob3JpZ2luUmFuZ2UuZnJvbSwgb3JpZ2luUmFuZ2UudG8pO1xyXG4gICAgdHIuZGVsZXRlUmFuZ2Uob3JpZ2luUmFuZ2UuZnJvbSwgb3JpZ2luUmFuZ2UudG8pO1xyXG4gICAgY29uc3QgbmV3UG9zID0gdHIubWFwcGluZy5tYXAodGFyZ2V0UG9zKTtcclxuICAgIHRyLmluc2VydChuZXdQb3MsIGNvbnRlbnRTbGljZS5jb250ZW50KTtcclxuICAgIHRyLnNldFNlbGVjdGlvbihuZXcgVGV4dFNlbGVjdGlvbih0ci5kb2MucmVzb2x2ZShuZXdQb3MgLSAxKSkpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IGRlbGV0ZUN1cnJlbnROb2RlID0gKCkgPT4gKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSB0cjtcclxuICAgIGNvbnN0IGN1cnJlbnROb2RlID0gc2VsZWN0aW9uLiRhbmNob3Iubm9kZSgpO1xyXG4gICAgLy8gaWYgdGhlcmUgaXMgY29udGVudCBpbnNpZGUgdGhlIGN1cnJlbnQgbm9kZSwgYnJlYWsgb3V0IG9mIHRoaXMgY29tbWFuZFxyXG4gICAgaWYgKGN1cnJlbnROb2RlLmNvbnRlbnQuc2l6ZSA+IDApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCAkcG9zID0gdHIuc2VsZWN0aW9uLiRhbmNob3I7XHJcbiAgICBmb3IgKGxldCBkZXB0aCA9ICRwb3MuZGVwdGg7IGRlcHRoID4gMDsgZGVwdGggLT0gMSkge1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSAkcG9zLm5vZGUoZGVwdGgpO1xyXG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09IGN1cnJlbnROb2RlLnR5cGUpIHtcclxuICAgICAgICAgICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmcm9tID0gJHBvcy5iZWZvcmUoZGVwdGgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG8gPSAkcG9zLmFmdGVyKGRlcHRoKTtcclxuICAgICAgICAgICAgICAgIHRyLmRlbGV0ZShmcm9tLCB0bykuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn07XG5cbmNvbnN0IGRlbGV0ZU5vZGUgPSB0eXBlT3JOYW1lID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCAkcG9zID0gdHIuc2VsZWN0aW9uLiRhbmNob3I7XHJcbiAgICBmb3IgKGxldCBkZXB0aCA9ICRwb3MuZGVwdGg7IGRlcHRoID4gMDsgZGVwdGggLT0gMSkge1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSAkcG9zLm5vZGUoZGVwdGgpO1xyXG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09IHR5cGUpIHtcclxuICAgICAgICAgICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmcm9tID0gJHBvcy5iZWZvcmUoZGVwdGgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG8gPSAkcG9zLmFmdGVyKGRlcHRoKTtcclxuICAgICAgICAgICAgICAgIHRyLmRlbGV0ZShmcm9tLCB0bykuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn07XG5cbmNvbnN0IGRlbGV0ZVJhbmdlID0gcmFuZ2UgPT4gKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHsgZnJvbSwgdG8gfSA9IHJhbmdlO1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgdHIuZGVsZXRlKGZyb20sIHRvKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBkZWxldGVTZWxlY3Rpb24gPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIGRlbGV0ZVNlbGVjdGlvbiQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmNvbnN0IGVudGVyID0gKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgcmV0dXJuIGNvbW1hbmRzLmtleWJvYXJkU2hvcnRjdXQoJ0VudGVyJyk7XHJcbn07XG5cbmNvbnN0IGV4aXRDb2RlID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBleGl0Q29kZSQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbi8qKlxyXG4gKiBDaGVjayBpZiBvYmplY3QxIGluY2x1ZGVzIG9iamVjdDJcclxuICogQHBhcmFtIG9iamVjdDEgT2JqZWN0XHJcbiAqIEBwYXJhbSBvYmplY3QyIE9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gb2JqZWN0SW5jbHVkZXMob2JqZWN0MSwgb2JqZWN0Miwgb3B0aW9ucyA9IHsgc3RyaWN0OiB0cnVlIH0pIHtcclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QyKTtcclxuICAgIGlmICgha2V5cy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBrZXlzLmV2ZXJ5KGtleSA9PiB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RyaWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QyW2tleV0gPT09IG9iamVjdDFba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUmVnRXhwKG9iamVjdDJba2V5XSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDJba2V5XS50ZXN0KG9iamVjdDFba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYmplY3QyW2tleV0gPT09IG9iamVjdDFba2V5XTtcclxuICAgIH0pO1xyXG59XG5cbmZ1bmN0aW9uIGZpbmRNYXJrSW5TZXQobWFya3MsIHR5cGUsIGF0dHJpYnV0ZXMgPSB7fSkge1xyXG4gICAgcmV0dXJuIG1hcmtzLmZpbmQoaXRlbSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0udHlwZSA9PT0gdHlwZSAmJiBvYmplY3RJbmNsdWRlcyhpdGVtLmF0dHJzLCBhdHRyaWJ1dGVzKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGlzTWFya0luU2V0KG1hcmtzLCB0eXBlLCBhdHRyaWJ1dGVzID0ge30pIHtcclxuICAgIHJldHVybiAhIWZpbmRNYXJrSW5TZXQobWFya3MsIHR5cGUsIGF0dHJpYnV0ZXMpO1xyXG59XHJcbmZ1bmN0aW9uIGdldE1hcmtSYW5nZSgkcG9zLCB0eXBlLCBhdHRyaWJ1dGVzID0ge30pIHtcclxuICAgIGlmICghJHBvcyB8fCAhdHlwZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBzdGFydCA9ICRwb3MucGFyZW50LmNoaWxkQWZ0ZXIoJHBvcy5wYXJlbnRPZmZzZXQpO1xyXG4gICAgaWYgKCRwb3MucGFyZW50T2Zmc2V0ID09PSBzdGFydC5vZmZzZXQgJiYgc3RhcnQub2Zmc2V0ICE9PSAwKSB7XHJcbiAgICAgICAgc3RhcnQgPSAkcG9zLnBhcmVudC5jaGlsZEJlZm9yZSgkcG9zLnBhcmVudE9mZnNldCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXN0YXJ0Lm5vZGUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBtYXJrID0gZmluZE1hcmtJblNldChbLi4uc3RhcnQubm9kZS5tYXJrc10sIHR5cGUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgaWYgKCFtYXJrKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IHN0YXJ0SW5kZXggPSBzdGFydC5pbmRleDtcclxuICAgIGxldCBzdGFydFBvcyA9ICRwb3Muc3RhcnQoKSArIHN0YXJ0Lm9mZnNldDtcclxuICAgIGxldCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyAxO1xyXG4gICAgbGV0IGVuZFBvcyA9IHN0YXJ0UG9zICsgc3RhcnQubm9kZS5ub2RlU2l6ZTtcclxuICAgIGZpbmRNYXJrSW5TZXQoWy4uLnN0YXJ0Lm5vZGUubWFya3NdLCB0eXBlLCBhdHRyaWJ1dGVzKTtcclxuICAgIHdoaWxlIChzdGFydEluZGV4ID4gMCAmJiBtYXJrLmlzSW5TZXQoJHBvcy5wYXJlbnQuY2hpbGQoc3RhcnRJbmRleCAtIDEpLm1hcmtzKSkge1xyXG4gICAgICAgIHN0YXJ0SW5kZXggLT0gMTtcclxuICAgICAgICBzdGFydFBvcyAtPSAkcG9zLnBhcmVudC5jaGlsZChzdGFydEluZGV4KS5ub2RlU2l6ZTtcclxuICAgIH1cclxuICAgIHdoaWxlIChlbmRJbmRleCA8ICRwb3MucGFyZW50LmNoaWxkQ291bnRcclxuICAgICAgICAmJiBpc01hcmtJblNldChbLi4uJHBvcy5wYXJlbnQuY2hpbGQoZW5kSW5kZXgpLm1hcmtzXSwgdHlwZSwgYXR0cmlidXRlcykpIHtcclxuICAgICAgICBlbmRQb3MgKz0gJHBvcy5wYXJlbnQuY2hpbGQoZW5kSW5kZXgpLm5vZGVTaXplO1xyXG4gICAgICAgIGVuZEluZGV4ICs9IDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGZyb206IHN0YXJ0UG9zLFxyXG4gICAgICAgIHRvOiBlbmRQb3MsXHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIGdldE1hcmtUeXBlKG5hbWVPclR5cGUsIHNjaGVtYSkge1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lT3JUeXBlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGlmICghc2NoZW1hLm1hcmtzW25hbWVPclR5cGVdKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBUaGVyZSBpcyBubyBtYXJrIHR5cGUgbmFtZWQgJyR7bmFtZU9yVHlwZX0nLiBNYXliZSB5b3UgZm9yZ290IHRvIGFkZCB0aGUgZXh0ZW5zaW9uP2ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2NoZW1hLm1hcmtzW25hbWVPclR5cGVdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVPclR5cGU7XHJcbn1cblxuY29uc3QgZXh0ZW5kTWFya1JhbmdlID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSkgPT4gKHsgdHIsIHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0TWFya1R5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IHsgZG9jLCBzZWxlY3Rpb24gfSA9IHRyO1xyXG4gICAgY29uc3QgeyAkZnJvbSwgZnJvbSwgdG8gfSA9IHNlbGVjdGlvbjtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IHJhbmdlID0gZ2V0TWFya1JhbmdlKCRmcm9tLCB0eXBlLCBhdHRyaWJ1dGVzKTtcclxuICAgICAgICBpZiAocmFuZ2UgJiYgcmFuZ2UuZnJvbSA8PSBmcm9tICYmIHJhbmdlLnRvID49IHRvKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1NlbGVjdGlvbiA9IFRleHRTZWxlY3Rpb24uY3JlYXRlKGRvYywgcmFuZ2UuZnJvbSwgcmFuZ2UudG8pO1xyXG4gICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24obmV3U2VsZWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3QgZmlyc3QgPSBjb21tYW5kcyA9PiBwcm9wcyA9PiB7XHJcbiAgICBjb25zdCBpdGVtcyA9IHR5cGVvZiBjb21tYW5kcyA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgID8gY29tbWFuZHMocHJvcHMpXHJcbiAgICAgICAgOiBjb21tYW5kcztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICBpZiAoaXRlbXNbaV0ocHJvcHMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufTtcblxuZnVuY3Rpb24gaXNUZXh0U2VsZWN0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uO1xyXG59XG5cbmZ1bmN0aW9uIG1pbk1heCh2YWx1ZSA9IDAsIG1pbiA9IDAsIG1heCA9IDApIHtcclxuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgbWluKSwgbWF4KTtcclxufVxuXG5mdW5jdGlvbiByZXNvbHZlRm9jdXNQb3NpdGlvbihkb2MsIHBvc2l0aW9uID0gbnVsbCkge1xyXG4gICAgaWYgKCFwb3NpdGlvbikge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VsZWN0aW9uQXRTdGFydCA9IFNlbGVjdGlvbi5hdFN0YXJ0KGRvYyk7XHJcbiAgICBjb25zdCBzZWxlY3Rpb25BdEVuZCA9IFNlbGVjdGlvbi5hdEVuZChkb2MpO1xyXG4gICAgaWYgKHBvc2l0aW9uID09PSAnc3RhcnQnIHx8IHBvc2l0aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbkF0U3RhcnQ7XHJcbiAgICB9XHJcbiAgICBpZiAocG9zaXRpb24gPT09ICdlbmQnKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbkF0RW5kO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWluUG9zID0gc2VsZWN0aW9uQXRTdGFydC5mcm9tO1xyXG4gICAgY29uc3QgbWF4UG9zID0gc2VsZWN0aW9uQXRFbmQudG87XHJcbiAgICBpZiAocG9zaXRpb24gPT09ICdhbGwnKSB7XHJcbiAgICAgICAgcmV0dXJuIFRleHRTZWxlY3Rpb24uY3JlYXRlKGRvYywgbWluTWF4KDAsIG1pblBvcywgbWF4UG9zKSwgbWluTWF4KGRvYy5jb250ZW50LnNpemUsIG1pblBvcywgbWF4UG9zKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVGV4dFNlbGVjdGlvbi5jcmVhdGUoZG9jLCBtaW5NYXgocG9zaXRpb24sIG1pblBvcywgbWF4UG9zKSwgbWluTWF4KHBvc2l0aW9uLCBtaW5Qb3MsIG1heFBvcykpO1xyXG59XG5cbmZ1bmN0aW9uIGlzaU9TKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICAnaVBhZCBTaW11bGF0b3InLFxyXG4gICAgICAgICdpUGhvbmUgU2ltdWxhdG9yJyxcclxuICAgICAgICAnaVBvZCBTaW11bGF0b3InLFxyXG4gICAgICAgICdpUGFkJyxcclxuICAgICAgICAnaVBob25lJyxcclxuICAgICAgICAnaVBvZCcsXHJcbiAgICBdLmluY2x1ZGVzKG5hdmlnYXRvci5wbGF0Zm9ybSlcclxuICAgICAgICAvLyBpUGFkIG9uIGlPUyAxMyBkZXRlY3Rpb25cclxuICAgICAgICB8fCAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnTWFjJykgJiYgJ29udG91Y2hlbmQnIGluIGRvY3VtZW50KTtcclxufVxuXG5jb25zdCBmb2N1cyA9IChwb3NpdGlvbiA9IG51bGwsIG9wdGlvbnMgPSB7fSkgPT4gKHsgZWRpdG9yLCB2aWV3LCB0ciwgZGlzcGF0Y2gsIH0pID0+IHtcclxuICAgIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IHRydWUsXHJcbiAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgIH07XHJcbiAgICBjb25zdCBkZWxheWVkRm9jdXMgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gZm9jdXMgd2l0aGluIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGJyZWFrcyBmb2N1cyBvbiBpT1NcclxuICAgICAgICAvLyBzbyB3ZSBoYXZlIHRvIGNhbGwgdGhpc1xyXG4gICAgICAgIGlmIChpc2lPUygpKSB7XHJcbiAgICAgICAgICAgIHZpZXcuZG9tLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZvciBSZWFjdCB3ZSBoYXZlIHRvIGZvY3VzIGFzeW5jaHJvbm91c2x5LiBPdGhlcndpc2Ugd2lsZCB0aGluZ3MgaGFwcGVuLlxyXG4gICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3VlYmVyZG9zaXMvdGlwdGFwL2lzc3Vlcy8xNTIwXHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFlZGl0b3IuaXNEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgICAgIHZpZXcuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2Nyb2xsSW50b1ZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IuY29tbWFuZHMuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGlmICgodmlldy5oYXNGb2N1cygpICYmIHBvc2l0aW9uID09PSBudWxsKSB8fCBwb3NpdGlvbiA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIHdlIGRvbuKAmXQgdHJ5IHRvIHJlc29sdmUgYSBOb2RlU2VsZWN0aW9uIG9yIENlbGxTZWxlY3Rpb25cclxuICAgIGlmIChkaXNwYXRjaCAmJiBwb3NpdGlvbiA9PT0gbnVsbCAmJiAhaXNUZXh0U2VsZWN0aW9uKGVkaXRvci5zdGF0ZS5zZWxlY3Rpb24pKSB7XHJcbiAgICAgICAgZGVsYXllZEZvY3VzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyBwYXNzIHRocm91Z2ggdHIuZG9jIGluc3RlYWQgb2YgZWRpdG9yLnN0YXRlLmRvY1xyXG4gICAgLy8gc2luY2UgdHJhbnNhY3Rpb25zIGNvdWxkIGNoYW5nZSB0aGUgZWRpdG9ycyBzdGF0ZSBiZWZvcmUgdGhpcyBjb21tYW5kIGhhcyBiZWVuIHJ1blxyXG4gICAgY29uc3Qgc2VsZWN0aW9uID0gcmVzb2x2ZUZvY3VzUG9zaXRpb24odHIuZG9jLCBwb3NpdGlvbikgfHwgZWRpdG9yLnN0YXRlLnNlbGVjdGlvbjtcclxuICAgIGNvbnN0IGlzU2FtZVNlbGVjdGlvbiA9IGVkaXRvci5zdGF0ZS5zZWxlY3Rpb24uZXEoc2VsZWN0aW9uKTtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGlmICghaXNTYW1lU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBgdHIuc2V0U2VsZWN0aW9uYCByZXNldHMgdGhlIHN0b3JlZCBtYXJrc1xyXG4gICAgICAgIC8vIHNvIHdl4oCZbGwgcmVzdG9yZSB0aGVtIGlmIHRoZSBzZWxlY3Rpb24gaXMgdGhlIHNhbWUgYXMgYmVmb3JlXHJcbiAgICAgICAgaWYgKGlzU2FtZVNlbGVjdGlvbiAmJiB0ci5zdG9yZWRNYXJrcykge1xyXG4gICAgICAgICAgICB0ci5zZXRTdG9yZWRNYXJrcyh0ci5zdG9yZWRNYXJrcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGF5ZWRGb2N1cygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IGZvckVhY2ggPSAoaXRlbXMsIGZuKSA9PiBwcm9wcyA9PiB7XHJcbiAgICByZXR1cm4gaXRlbXMuZXZlcnkoKGl0ZW0sIGluZGV4KSA9PiBmbihpdGVtLCB7IC4uLnByb3BzLCBpbmRleCB9KSk7XHJcbn07XG5cbmNvbnN0IGluc2VydENvbnRlbnQgPSAodmFsdWUsIG9wdGlvbnMpID0+ICh7IHRyLCBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICByZXR1cm4gY29tbWFuZHMuaW5zZXJ0Q29udGVudEF0KHsgZnJvbTogdHIuc2VsZWN0aW9uLmZyb20sIHRvOiB0ci5zZWxlY3Rpb24udG8gfSwgdmFsdWUsIG9wdGlvbnMpO1xyXG59O1xuXG5mdW5jdGlvbiBlbGVtZW50RnJvbVN0cmluZyh2YWx1ZSkge1xyXG4gICAgLy8gYWRkIGEgd3JhcHBlciB0byBwcmVzZXJ2ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlXHJcbiAgICBjb25zdCB3cmFwcGVkVmFsdWUgPSBgPGJvZHk+JHt2YWx1ZX08L2JvZHk+YDtcclxuICAgIHJldHVybiBuZXcgd2luZG93LkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh3cmFwcGVkVmFsdWUsICd0ZXh0L2h0bWwnKS5ib2R5O1xyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVGcm9tQ29udGVudChjb250ZW50LCBzY2hlbWEsIG9wdGlvbnMpIHtcclxuICAgIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgc2xpY2U6IHRydWUsXHJcbiAgICAgICAgcGFyc2VPcHRpb25zOiB7fSxcclxuICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgfTtcclxuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcgJiYgY29udGVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnQpICYmIGNvbnRlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEZyYWdtZW50LmZyb21BcnJheShjb250ZW50Lm1hcChpdGVtID0+IHNjaGVtYS5ub2RlRnJvbUpTT04oaXRlbSkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLm5vZGVGcm9tSlNPTihjb250ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW3RpcHRhcCB3YXJuXTogSW52YWxpZCBjb250ZW50LicsICdQYXNzZWQgdmFsdWU6JywgY29udGVudCwgJ0Vycm9yOicsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGVGcm9tQ29udGVudCgnJywgc2NoZW1hLCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VyID0gRE9NUGFyc2VyLmZyb21TY2hlbWEoc2NoZW1hKTtcclxuICAgICAgICByZXR1cm4gb3B0aW9ucy5zbGljZVxyXG4gICAgICAgICAgICA/IHBhcnNlci5wYXJzZVNsaWNlKGVsZW1lbnRGcm9tU3RyaW5nKGNvbnRlbnQpLCBvcHRpb25zLnBhcnNlT3B0aW9ucykuY29udGVudFxyXG4gICAgICAgICAgICA6IHBhcnNlci5wYXJzZShlbGVtZW50RnJvbVN0cmluZyhjb250ZW50KSwgb3B0aW9ucy5wYXJzZU9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZU5vZGVGcm9tQ29udGVudCgnJywgc2NoZW1hLCBvcHRpb25zKTtcclxufVxuXG4vLyBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9Qcm9zZU1pcnJvci9wcm9zZW1pcnJvci1zdGF0ZS9ibG9iL21hc3Rlci9zcmMvc2VsZWN0aW9uLmpzI0w0NjZcclxuZnVuY3Rpb24gc2VsZWN0aW9uVG9JbnNlcnRpb25FbmQodHIsIHN0YXJ0TGVuLCBiaWFzKSB7XHJcbiAgICBjb25zdCBsYXN0ID0gdHIuc3RlcHMubGVuZ3RoIC0gMTtcclxuICAgIGlmIChsYXN0IDwgc3RhcnRMZW4pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGVwID0gdHIuc3RlcHNbbGFzdF07XHJcbiAgICBpZiAoIShzdGVwIGluc3RhbmNlb2YgUmVwbGFjZVN0ZXAgfHwgc3RlcCBpbnN0YW5jZW9mIFJlcGxhY2VBcm91bmRTdGVwKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG1hcCA9IHRyLm1hcHBpbmcubWFwc1tsYXN0XTtcclxuICAgIGxldCBlbmQgPSAwO1xyXG4gICAgbWFwLmZvckVhY2goKF9mcm9tLCBfdG8sIF9uZXdGcm9tLCBuZXdUbykgPT4ge1xyXG4gICAgICAgIGlmIChlbmQgPT09IDApIHtcclxuICAgICAgICAgICAgZW5kID0gbmV3VG87XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0ci5zZXRTZWxlY3Rpb24oU2VsZWN0aW9uLm5lYXIodHIuZG9jLnJlc29sdmUoZW5kKSwgYmlhcykpO1xyXG59XG5cbmNvbnN0IGlzRnJhZ21lbnQgPSAobm9kZU9yRnJhZ21lbnQpID0+IHtcclxuICAgIHJldHVybiBub2RlT3JGcmFnbWVudC50b1N0cmluZygpLnN0YXJ0c1dpdGgoJzwnKTtcclxufTtcclxuY29uc3QgaW5zZXJ0Q29udGVudEF0ID0gKHBvc2l0aW9uLCB2YWx1ZSwgb3B0aW9ucykgPT4gKHsgdHIsIGRpc3BhdGNoLCBlZGl0b3IgfSkgPT4ge1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgcGFyc2VPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgdXBkYXRlU2VsZWN0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IGNyZWF0ZU5vZGVGcm9tQ29udGVudCh2YWx1ZSwgZWRpdG9yLnNjaGVtYSwge1xyXG4gICAgICAgICAgICBwYXJzZU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHByZXNlcnZlV2hpdGVzcGFjZTogJ2Z1bGwnLFxyXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5wYXJzZU9wdGlvbnMsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gZG9u4oCZdCBkaXNwYXRjaCBhbiBlbXB0eSBmcmFnbWVudCBiZWNhdXNlIHRoaXMgY2FuIGxlYWQgdG8gc3RyYW5nZSBlcnJvcnNcclxuICAgICAgICBpZiAoY29udGVudC50b1N0cmluZygpID09PSAnPD4nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeyBmcm9tLCB0byB9ID0gdHlwZW9mIHBvc2l0aW9uID09PSAnbnVtYmVyJyA/IHsgZnJvbTogcG9zaXRpb24sIHRvOiBwb3NpdGlvbiB9IDogeyBmcm9tOiBwb3NpdGlvbi5mcm9tLCB0bzogcG9zaXRpb24udG8gfTtcclxuICAgICAgICBsZXQgaXNPbmx5VGV4dENvbnRlbnQgPSB0cnVlO1xyXG4gICAgICAgIGxldCBpc09ubHlCbG9ja0NvbnRlbnQgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IG5vZGVzID0gaXNGcmFnbWVudChjb250ZW50KSA/IGNvbnRlbnQgOiBbY29udGVudF07XHJcbiAgICAgICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgYWRkZWQgbm9kZSBpcyB2YWxpZFxyXG4gICAgICAgICAgICBub2RlLmNoZWNrKCk7XHJcbiAgICAgICAgICAgIGlzT25seVRleHRDb250ZW50ID0gaXNPbmx5VGV4dENvbnRlbnQgPyBub2RlLmlzVGV4dCAmJiBub2RlLm1hcmtzLmxlbmd0aCA9PT0gMCA6IGZhbHNlO1xyXG4gICAgICAgICAgICBpc09ubHlCbG9ja0NvbnRlbnQgPSBpc09ubHlCbG9ja0NvbnRlbnQgPyBub2RlLmlzQmxvY2sgOiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBjaGVjayBpZiB3ZSBjYW4gcmVwbGFjZSB0aGUgd3JhcHBpbmcgbm9kZSBieVxyXG4gICAgICAgIC8vIHRoZSBuZXdseSBpbnNlcnRlZCBjb250ZW50XHJcbiAgICAgICAgLy8gZXhhbXBsZTpcclxuICAgICAgICAvLyByZXBsYWNlIGFuIGVtcHR5IHBhcmFncmFwaCBieSBhbiBpbnNlcnRlZCBpbWFnZVxyXG4gICAgICAgIC8vIGluc3RlYWQgb2YgaW5zZXJ0aW5nIHRoZSBpbWFnZSBiZWxvdyB0aGUgcGFyYWdyYXBoXHJcbiAgICAgICAgaWYgKGZyb20gPT09IHRvICYmIGlzT25seUJsb2NrQ29udGVudCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHBhcmVudCB9ID0gdHIuZG9jLnJlc29sdmUoZnJvbSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzRW1wdHlUZXh0QmxvY2sgPSBwYXJlbnQuaXNUZXh0YmxvY2sgJiYgIXBhcmVudC50eXBlLnNwZWMuY29kZSAmJiAhcGFyZW50LmNoaWxkQ291bnQ7XHJcbiAgICAgICAgICAgIGlmIChpc0VtcHR5VGV4dEJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBmcm9tIC09IDE7XHJcbiAgICAgICAgICAgICAgICB0byArPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG9ubHkgcGxhaW4gdGV4dCB3ZSBoYXZlIHRvIHVzZSBgaW5zZXJ0VGV4dGBcclxuICAgICAgICAvLyBiZWNhdXNlIHRoaXMgd2lsbCBrZWVwIHRoZSBjdXJyZW50IG1hcmtzXHJcbiAgICAgICAgaWYgKGlzT25seVRleHRDb250ZW50KSB7XHJcbiAgICAgICAgICAgIC8vIGlmIHZhbHVlIGlzIHN0cmluZywgd2UgY2FuIHVzZSBpdCBkaXJlY3RseVxyXG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgaWYgaXQgaXMgYW4gYXJyYXksIHdlIGhhdmUgdG8gam9pbiBpdFxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRyLmluc2VydFRleHQodmFsdWUubWFwKHYgPT4gdi50ZXh0IHx8ICcnKS5qb2luKCcnKSwgZnJvbSwgdG8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgISF2YWx1ZSAmJiAhIXZhbHVlLnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHRyLmluc2VydFRleHQodmFsdWUudGV4dCwgZnJvbSwgdG8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHIuaW5zZXJ0VGV4dCh2YWx1ZSwgZnJvbSwgdG8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0ci5yZXBsYWNlV2l0aChmcm9tLCB0bywgY29udGVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldCBjdXJzb3IgYXQgZW5kIG9mIGluc2VydGVkIGNvbnRlbnRcclxuICAgICAgICBpZiAob3B0aW9ucy51cGRhdGVTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgc2VsZWN0aW9uVG9JbnNlcnRpb25FbmQodHIsIHRyLnN0ZXBzLmxlbmd0aCAtIDEsIC0xKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3Qgam9pblVwID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBqb2luVXAkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xyXG5jb25zdCBqb2luRG93biA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gam9pbkRvd24kMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xyXG5jb25zdCBqb2luQmFja3dhcmQgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIGpvaW5CYWNrd2FyZCQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XHJcbmNvbnN0IGpvaW5Gb3J3YXJkID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBqb2luRm9yd2FyZCQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmNvbnN0IGpvaW5JdGVtQmFja3dhcmQgPSAoKSA9PiAoeyB0ciwgc3RhdGUsIGRpc3BhdGNoLCB9KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBvaW50ID0gam9pblBvaW50KHN0YXRlLmRvYywgc3RhdGUuc2VsZWN0aW9uLiRmcm9tLnBvcywgLTEpO1xyXG4gICAgICAgIGlmIChwb2ludCA9PT0gbnVsbCB8fCBwb2ludCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHIuam9pbihwb2ludCwgMik7XHJcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHRyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjYXRjaCB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59O1xuXG5jb25zdCBqb2luSXRlbUZvcndhcmQgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2gsIHRyLCB9KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBvaW50ID0gam9pblBvaW50KHN0YXRlLmRvYywgc3RhdGUuc2VsZWN0aW9uLiRmcm9tLnBvcywgKzEpO1xyXG4gICAgICAgIGlmIChwb2ludCA9PT0gbnVsbCB8fCBwb2ludCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHIuam9pbihwb2ludCwgMik7XHJcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHRyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufTtcblxuZnVuY3Rpb24gaXNNYWNPUygpIHtcclxuICAgIHJldHVybiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgID8gL01hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pXHJcbiAgICAgICAgOiBmYWxzZTtcclxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVLZXlOYW1lKG5hbWUpIHtcclxuICAgIGNvbnN0IHBhcnRzID0gbmFtZS5zcGxpdCgvLSg/ISQpLyk7XHJcbiAgICBsZXQgcmVzdWx0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XHJcbiAgICBpZiAocmVzdWx0ID09PSAnU3BhY2UnKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gJyAnO1xyXG4gICAgfVxyXG4gICAgbGV0IGFsdDtcclxuICAgIGxldCBjdHJsO1xyXG4gICAgbGV0IHNoaWZ0O1xyXG4gICAgbGV0IG1ldGE7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IG1vZCA9IHBhcnRzW2ldO1xyXG4gICAgICAgIGlmICgvXihjbWR8bWV0YXxtKSQvaS50ZXN0KG1vZCkpIHtcclxuICAgICAgICAgICAgbWV0YSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKC9eYShsdCk/JC9pLnRlc3QobW9kKSkge1xyXG4gICAgICAgICAgICBhbHQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgvXihjfGN0cmx8Y29udHJvbCkkL2kudGVzdChtb2QpKSB7XHJcbiAgICAgICAgICAgIGN0cmwgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgvXnMoaGlmdCk/JC9pLnRlc3QobW9kKSkge1xyXG4gICAgICAgICAgICBzaGlmdCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKC9ebW9kJC9pLnRlc3QobW9kKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNpT1MoKSB8fCBpc01hY09TKCkpIHtcclxuICAgICAgICAgICAgICAgIG1ldGEgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3RybCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIG1vZGlmaWVyIG5hbWU6ICR7bW9kfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChhbHQpIHtcclxuICAgICAgICByZXN1bHQgPSBgQWx0LSR7cmVzdWx0fWA7XHJcbiAgICB9XHJcbiAgICBpZiAoY3RybCkge1xyXG4gICAgICAgIHJlc3VsdCA9IGBDdHJsLSR7cmVzdWx0fWA7XHJcbiAgICB9XHJcbiAgICBpZiAobWV0YSkge1xyXG4gICAgICAgIHJlc3VsdCA9IGBNZXRhLSR7cmVzdWx0fWA7XHJcbiAgICB9XHJcbiAgICBpZiAoc2hpZnQpIHtcclxuICAgICAgICByZXN1bHQgPSBgU2hpZnQtJHtyZXN1bHR9YDtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuY29uc3Qga2V5Ym9hcmRTaG9ydGN1dCA9IG5hbWUgPT4gKHsgZWRpdG9yLCB2aWV3LCB0ciwgZGlzcGF0Y2gsIH0pID0+IHtcclxuICAgIGNvbnN0IGtleXMgPSBub3JtYWxpemVLZXlOYW1lKG5hbWUpLnNwbGl0KC8tKD8hJCkvKTtcclxuICAgIGNvbnN0IGtleSA9IGtleXMuZmluZChpdGVtID0+ICFbJ0FsdCcsICdDdHJsJywgJ01ldGEnLCAnU2hpZnQnXS5pbmNsdWRlcyhpdGVtKSk7XHJcbiAgICBjb25zdCBldmVudCA9IG5ldyBLZXlib2FyZEV2ZW50KCdrZXlkb3duJywge1xyXG4gICAgICAgIGtleToga2V5ID09PSAnU3BhY2UnXHJcbiAgICAgICAgICAgID8gJyAnXHJcbiAgICAgICAgICAgIDoga2V5LFxyXG4gICAgICAgIGFsdEtleToga2V5cy5pbmNsdWRlcygnQWx0JyksXHJcbiAgICAgICAgY3RybEtleToga2V5cy5pbmNsdWRlcygnQ3RybCcpLFxyXG4gICAgICAgIG1ldGFLZXk6IGtleXMuaW5jbHVkZXMoJ01ldGEnKSxcclxuICAgICAgICBzaGlmdEtleToga2V5cy5pbmNsdWRlcygnU2hpZnQnKSxcclxuICAgICAgICBidWJibGVzOiB0cnVlLFxyXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGNhcHR1cmVkVHJhbnNhY3Rpb24gPSBlZGl0b3IuY2FwdHVyZVRyYW5zYWN0aW9uKCgpID0+IHtcclxuICAgICAgICB2aWV3LnNvbWVQcm9wKCdoYW5kbGVLZXlEb3duJywgZiA9PiBmKHZpZXcsIGV2ZW50KSk7XHJcbiAgICB9KTtcclxuICAgIGNhcHR1cmVkVHJhbnNhY3Rpb24gPT09IG51bGwgfHwgY2FwdHVyZWRUcmFuc2FjdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FwdHVyZWRUcmFuc2FjdGlvbi5zdGVwcy5mb3JFYWNoKHN0ZXAgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld1N0ZXAgPSBzdGVwLm1hcCh0ci5tYXBwaW5nKTtcclxuICAgICAgICBpZiAobmV3U3RlcCAmJiBkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICB0ci5tYXliZVN0ZXAobmV3U3RlcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuZnVuY3Rpb24gaXNOb2RlQWN0aXZlKHN0YXRlLCB0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pIHtcclxuICAgIGNvbnN0IHsgZnJvbSwgdG8sIGVtcHR5IH0gPSBzdGF0ZS5zZWxlY3Rpb247XHJcbiAgICBjb25zdCB0eXBlID0gdHlwZU9yTmFtZSA/IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSkgOiBudWxsO1xyXG4gICAgY29uc3Qgbm9kZVJhbmdlcyA9IFtdO1xyXG4gICAgc3RhdGUuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgKG5vZGUsIHBvcykgPT4ge1xyXG4gICAgICAgIGlmIChub2RlLmlzVGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlbGF0aXZlRnJvbSA9IE1hdGgubWF4KGZyb20sIHBvcyk7XHJcbiAgICAgICAgY29uc3QgcmVsYXRpdmVUbyA9IE1hdGgubWluKHRvLCBwb3MgKyBub2RlLm5vZGVTaXplKTtcclxuICAgICAgICBub2RlUmFuZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICBub2RlLFxyXG4gICAgICAgICAgICBmcm9tOiByZWxhdGl2ZUZyb20sXHJcbiAgICAgICAgICAgIHRvOiByZWxhdGl2ZVRvLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBzZWxlY3Rpb25SYW5nZSA9IHRvIC0gZnJvbTtcclxuICAgIGNvbnN0IG1hdGNoZWROb2RlUmFuZ2VzID0gbm9kZVJhbmdlc1xyXG4gICAgICAgIC5maWx0ZXIobm9kZVJhbmdlID0+IHtcclxuICAgICAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eXBlLm5hbWUgPT09IG5vZGVSYW5nZS5ub2RlLnR5cGUubmFtZTtcclxuICAgIH0pXHJcbiAgICAgICAgLmZpbHRlcihub2RlUmFuZ2UgPT4gb2JqZWN0SW5jbHVkZXMobm9kZVJhbmdlLm5vZGUuYXR0cnMsIGF0dHJpYnV0ZXMsIHsgc3RyaWN0OiBmYWxzZSB9KSk7XHJcbiAgICBpZiAoZW1wdHkpIHtcclxuICAgICAgICByZXR1cm4gISFtYXRjaGVkTm9kZVJhbmdlcy5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBjb25zdCByYW5nZSA9IG1hdGNoZWROb2RlUmFuZ2VzLnJlZHVjZSgoc3VtLCBub2RlUmFuZ2UpID0+IHN1bSArIG5vZGVSYW5nZS50byAtIG5vZGVSYW5nZS5mcm9tLCAwKTtcclxuICAgIHJldHVybiByYW5nZSA+PSBzZWxlY3Rpb25SYW5nZTtcclxufVxuXG5jb25zdCBsaWZ0ID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgaXNBY3RpdmUgPSBpc05vZGVBY3RpdmUoc3RhdGUsIHR5cGUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgaWYgKCFpc0FjdGl2ZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBsaWZ0JDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3QgbGlmdEVtcHR5QmxvY2sgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIGxpZnRFbXB0eUJsb2NrJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3QgbGlmdExpc3RJdGVtID0gdHlwZU9yTmFtZSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICByZXR1cm4gbGlmdExpc3RJdGVtJDEodHlwZSkoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3QgbmV3bGluZUluQ29kZSA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gbmV3bGluZUluQ29kZSQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmZ1bmN0aW9uIGdldFNjaGVtYVR5cGVOYW1lQnlOYW1lKG5hbWUsIHNjaGVtYSkge1xyXG4gICAgaWYgKHNjaGVtYS5ub2Rlc1tuYW1lXSkge1xyXG4gICAgICAgIHJldHVybiAnbm9kZSc7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hLm1hcmtzW25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuICdtYXJrJztcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XG5cbi8qKlxyXG4gKiBSZW1vdmUgYSBwcm9wZXJ0eSBvciBhbiBhcnJheSBvZiBwcm9wZXJ0aWVzIGZyb20gYW4gb2JqZWN0XHJcbiAqIEBwYXJhbSBvYmogT2JqZWN0XHJcbiAqIEBwYXJhbSBrZXkgS2V5IHRvIHJlbW92ZVxyXG4gKi9cclxuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqLCBwcm9wT3JQcm9wcykge1xyXG4gICAgY29uc3QgcHJvcHMgPSB0eXBlb2YgcHJvcE9yUHJvcHMgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgPyBbcHJvcE9yUHJvcHNdXHJcbiAgICAgICAgOiBwcm9wT3JQcm9wcztcclxuICAgIHJldHVybiBPYmplY3RcclxuICAgICAgICAua2V5cyhvYmopXHJcbiAgICAgICAgLnJlZHVjZSgobmV3T2JqLCBwcm9wKSA9PiB7XHJcbiAgICAgICAgaWYgKCFwcm9wcy5pbmNsdWRlcyhwcm9wKSkge1xyXG4gICAgICAgICAgICBuZXdPYmpbcHJvcF0gPSBvYmpbcHJvcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdPYmo7XHJcbiAgICB9LCB7fSk7XHJcbn1cblxuY29uc3QgcmVzZXRBdHRyaWJ1dGVzID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMpID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgbGV0IG5vZGVUeXBlID0gbnVsbDtcclxuICAgIGxldCBtYXJrVHlwZSA9IG51bGw7XHJcbiAgICBjb25zdCBzY2hlbWFUeXBlID0gZ2V0U2NoZW1hVHlwZU5hbWVCeU5hbWUodHlwZW9mIHR5cGVPck5hbWUgPT09ICdzdHJpbmcnID8gdHlwZU9yTmFtZSA6IHR5cGVPck5hbWUubmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGlmICghc2NoZW1hVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbm9kZScpIHtcclxuICAgICAgICBub2RlVHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hVHlwZSA9PT0gJ21hcmsnKSB7XHJcbiAgICAgICAgbWFya1R5cGUgPSBnZXRNYXJrVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgdHIuc2VsZWN0aW9uLnJhbmdlcy5mb3JFYWNoKHJhbmdlID0+IHtcclxuICAgICAgICAgICAgc3RhdGUuZG9jLm5vZGVzQmV0d2VlbihyYW5nZS4kZnJvbS5wb3MsIHJhbmdlLiR0by5wb3MsIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlVHlwZSAmJiBub2RlVHlwZSA9PT0gbm9kZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cChwb3MsIHVuZGVmaW5lZCwgZGVsZXRlUHJvcHMobm9kZS5hdHRycywgYXR0cmlidXRlcykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG1hcmtUeXBlICYmIG5vZGUubWFya3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5tYXJrcy5mb3JFYWNoKG1hcmsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFya1R5cGUgPT09IG1hcmsudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIuYWRkTWFyayhwb3MsIHBvcyArIG5vZGUubm9kZVNpemUsIG1hcmtUeXBlLmNyZWF0ZShkZWxldGVQcm9wcyhtYXJrLmF0dHJzLCBhdHRyaWJ1dGVzKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHNjcm9sbEludG9WaWV3ID0gKCkgPT4gKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIHRyLnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3Qgc2VsZWN0QWxsID0gKCkgPT4gKHsgdHIsIGNvbW1hbmRzIH0pID0+IHtcclxuICAgIHJldHVybiBjb21tYW5kcy5zZXRUZXh0U2VsZWN0aW9uKHtcclxuICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgIHRvOiB0ci5kb2MuY29udGVudC5zaXplLFxyXG4gICAgfSk7XHJcbn07XG5cbmNvbnN0IHNlbGVjdE5vZGVCYWNrd2FyZCA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gc2VsZWN0Tm9kZUJhY2t3YXJkJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3Qgc2VsZWN0Tm9kZUZvcndhcmQgPSAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgcmV0dXJuIHNlbGVjdE5vZGVGb3J3YXJkJDEoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3Qgc2VsZWN0UGFyZW50Tm9kZSA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICByZXR1cm4gc2VsZWN0UGFyZW50Tm9kZSQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbi8vIEB0cy1pZ25vcmVcclxuY29uc3Qgc2VsZWN0VGV4dGJsb2NrRW5kID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBzZWxlY3RUZXh0YmxvY2tFbmQkMShzdGF0ZSwgZGlzcGF0Y2gpO1xyXG59O1xuXG4vLyBAdHMtaWdub3JlXHJcbmNvbnN0IHNlbGVjdFRleHRibG9ja1N0YXJ0ID0gKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIHJldHVybiBzZWxlY3RUZXh0YmxvY2tTdGFydCQxKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZURvY3VtZW50KGNvbnRlbnQsIHNjaGVtYSwgcGFyc2VPcHRpb25zID0ge30pIHtcclxuICAgIHJldHVybiBjcmVhdGVOb2RlRnJvbUNvbnRlbnQoY29udGVudCwgc2NoZW1hLCB7IHNsaWNlOiBmYWxzZSwgcGFyc2VPcHRpb25zIH0pO1xyXG59XG5cbmNvbnN0IHNldENvbnRlbnQgPSAoY29udGVudCwgZW1pdFVwZGF0ZSA9IGZhbHNlLCBwYXJzZU9wdGlvbnMgPSB7fSkgPT4gKHsgdHIsIGVkaXRvciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgeyBkb2MgfSA9IHRyO1xyXG4gICAgY29uc3QgZG9jdW1lbnQgPSBjcmVhdGVEb2N1bWVudChjb250ZW50LCBlZGl0b3Iuc2NoZW1hLCBwYXJzZU9wdGlvbnMpO1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgdHIucmVwbGFjZVdpdGgoMCwgZG9jLmNvbnRlbnQuc2l6ZSwgZG9jdW1lbnQpLnNldE1ldGEoJ3ByZXZlbnRVcGRhdGUnLCAhZW1pdFVwZGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuZnVuY3Rpb24gZ2V0TWFya0F0dHJpYnV0ZXMoc3RhdGUsIHR5cGVPck5hbWUpIHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXRNYXJrVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgeyBmcm9tLCB0bywgZW1wdHkgfSA9IHN0YXRlLnNlbGVjdGlvbjtcclxuICAgIGNvbnN0IG1hcmtzID0gW107XHJcbiAgICBpZiAoZW1wdHkpIHtcclxuICAgICAgICBpZiAoc3RhdGUuc3RvcmVkTWFya3MpIHtcclxuICAgICAgICAgICAgbWFya3MucHVzaCguLi5zdGF0ZS5zdG9yZWRNYXJrcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1hcmtzLnB1c2goLi4uc3RhdGUuc2VsZWN0aW9uLiRoZWFkLm1hcmtzKCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc3RhdGUuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgbm9kZSA9PiB7XHJcbiAgICAgICAgICAgIG1hcmtzLnB1c2goLi4ubm9kZS5tYXJrcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtYXJrID0gbWFya3MuZmluZChtYXJrSXRlbSA9PiBtYXJrSXRlbS50eXBlLm5hbWUgPT09IHR5cGUubmFtZSk7XHJcbiAgICBpZiAoIW1hcmspIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyAuLi5tYXJrLmF0dHJzIH07XHJcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgYSBuZXcgYFRyYW5zZm9ybWAgYmFzZWQgb24gYWxsIHN0ZXBzIG9mIHRoZSBwYXNzZWQgdHJhbnNhY3Rpb25zLlxyXG4gKi9cclxuZnVuY3Rpb24gY29tYmluZVRyYW5zYWN0aW9uU3RlcHMob2xkRG9jLCB0cmFuc2FjdGlvbnMpIHtcclxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0ob2xkRG9jKTtcclxuICAgIHRyYW5zYWN0aW9ucy5mb3JFYWNoKHRyYW5zYWN0aW9uID0+IHtcclxuICAgICAgICB0cmFuc2FjdGlvbi5zdGVwcy5mb3JFYWNoKHN0ZXAgPT4ge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0uc3RlcChzdGVwKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRyYW5zZm9ybTtcclxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QmxvY2tBdChtYXRjaCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaC5lZGdlQ291bnQ7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSB9ID0gbWF0Y2guZWRnZShpKTtcclxuICAgICAgICBpZiAodHlwZS5pc1RleHRibG9jayAmJiAhdHlwZS5oYXNSZXF1aXJlZEF0dHJzKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cblxuZnVuY3Rpb24gZmluZENoaWxkcmVuKG5vZGUsIHByZWRpY2F0ZSkge1xyXG4gICAgY29uc3Qgbm9kZXNXaXRoUG9zID0gW107XHJcbiAgICBub2RlLmRlc2NlbmRhbnRzKChjaGlsZCwgcG9zKSA9PiB7XHJcbiAgICAgICAgaWYgKHByZWRpY2F0ZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgbm9kZXNXaXRoUG9zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbm9kZTogY2hpbGQsXHJcbiAgICAgICAgICAgICAgICBwb3MsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5vZGVzV2l0aFBvcztcclxufVxuXG4vKipcclxuICogU2FtZSBhcyBgZmluZENoaWxkcmVuYCBidXQgc2VhcmNoZXMgb25seSB3aXRoaW4gYSBgcmFuZ2VgLlxyXG4gKi9cclxuZnVuY3Rpb24gZmluZENoaWxkcmVuSW5SYW5nZShub2RlLCByYW5nZSwgcHJlZGljYXRlKSB7XHJcbiAgICBjb25zdCBub2Rlc1dpdGhQb3MgPSBbXTtcclxuICAgIC8vIGlmIChyYW5nZS5mcm9tID09PSByYW5nZS50bykge1xyXG4gICAgLy8gICBjb25zdCBub2RlQXQgPSBub2RlLm5vZGVBdChyYW5nZS5mcm9tKVxyXG4gICAgLy8gICBpZiAobm9kZUF0KSB7XHJcbiAgICAvLyAgICAgbm9kZXNXaXRoUG9zLnB1c2goe1xyXG4gICAgLy8gICAgICAgbm9kZTogbm9kZUF0LFxyXG4gICAgLy8gICAgICAgcG9zOiByYW5nZS5mcm9tLFxyXG4gICAgLy8gICAgIH0pXHJcbiAgICAvLyAgIH1cclxuICAgIC8vIH1cclxuICAgIG5vZGUubm9kZXNCZXR3ZWVuKHJhbmdlLmZyb20sIHJhbmdlLnRvLCAoY2hpbGQsIHBvcykgPT4ge1xyXG4gICAgICAgIGlmIChwcmVkaWNhdGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgIG5vZGVzV2l0aFBvcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5vZGU6IGNoaWxkLFxyXG4gICAgICAgICAgICAgICAgcG9zLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBub2Rlc1dpdGhQb3M7XHJcbn1cblxuZnVuY3Rpb24gZmluZFBhcmVudE5vZGVDbG9zZXN0VG9Qb3MoJHBvcywgcHJlZGljYXRlKSB7XHJcbiAgICBmb3IgKGxldCBpID0gJHBvcy5kZXB0aDsgaSA+IDA7IGkgLT0gMSkge1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSAkcG9zLm5vZGUoaSk7XHJcbiAgICAgICAgaWYgKHByZWRpY2F0ZShub2RlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcG9zOiBpID4gMCA/ICRwb3MuYmVmb3JlKGkpIDogMCxcclxuICAgICAgICAgICAgICAgIHN0YXJ0OiAkcG9zLnN0YXJ0KGkpLFxyXG4gICAgICAgICAgICAgICAgZGVwdGg6IGksXHJcbiAgICAgICAgICAgICAgICBub2RlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBmaW5kUGFyZW50Tm9kZShwcmVkaWNhdGUpIHtcclxuICAgIHJldHVybiAoc2VsZWN0aW9uKSA9PiBmaW5kUGFyZW50Tm9kZUNsb3Nlc3RUb1BvcyhzZWxlY3Rpb24uJGZyb20sIHByZWRpY2F0ZSk7XHJcbn1cblxuZnVuY3Rpb24gZ2V0SFRNTEZyb21GcmFnbWVudChmcmFnbWVudCwgc2NoZW1hKSB7XHJcbiAgICBjb25zdCBkb2N1bWVudEZyYWdtZW50ID0gRE9NU2VyaWFsaXplci5mcm9tU2NoZW1hKHNjaGVtYSkuc2VyaWFsaXplRnJhZ21lbnQoZnJhZ21lbnQpO1xyXG4gICAgY29uc3QgdGVtcG9yYXJ5RG9jdW1lbnQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoKTtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRlbXBvcmFyeURvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRvY3VtZW50RnJhZ21lbnQpO1xyXG4gICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUw7XHJcbn1cblxuZnVuY3Rpb24gZ2V0U2NoZW1hKGV4dGVuc2lvbnMsIGVkaXRvcikge1xyXG4gICAgY29uc3QgcmVzb2x2ZWRFeHRlbnNpb25zID0gRXh0ZW5zaW9uTWFuYWdlci5yZXNvbHZlKGV4dGVuc2lvbnMpO1xyXG4gICAgcmV0dXJuIGdldFNjaGVtYUJ5UmVzb2x2ZWRFeHRlbnNpb25zKHJlc29sdmVkRXh0ZW5zaW9ucywgZWRpdG9yKTtcclxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUhUTUwoZG9jLCBleHRlbnNpb25zKSB7XHJcbiAgICBjb25zdCBzY2hlbWEgPSBnZXRTY2hlbWEoZXh0ZW5zaW9ucyk7XHJcbiAgICBjb25zdCBjb250ZW50Tm9kZSA9IE5vZGUkMS5mcm9tSlNPTihzY2hlbWEsIGRvYyk7XHJcbiAgICByZXR1cm4gZ2V0SFRNTEZyb21GcmFnbWVudChjb250ZW50Tm9kZS5jb250ZW50LCBzY2hlbWEpO1xyXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSlNPTihodG1sLCBleHRlbnNpb25zKSB7XHJcbiAgICBjb25zdCBzY2hlbWEgPSBnZXRTY2hlbWEoZXh0ZW5zaW9ucyk7XHJcbiAgICBjb25zdCBkb20gPSBlbGVtZW50RnJvbVN0cmluZyhodG1sKTtcclxuICAgIHJldHVybiBET01QYXJzZXIuZnJvbVNjaGVtYShzY2hlbWEpLnBhcnNlKGRvbSkudG9KU09OKCk7XHJcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dChub2RlLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCByYW5nZSA9IHtcclxuICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgIHRvOiBub2RlLmNvbnRlbnQuc2l6ZSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gZ2V0VGV4dEJldHdlZW4obm9kZSwgcmFuZ2UsIG9wdGlvbnMpO1xyXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGV4dChkb2MsIGV4dGVuc2lvbnMsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHsgYmxvY2tTZXBhcmF0b3IgPSAnXFxuXFxuJywgdGV4dFNlcmlhbGl6ZXJzID0ge30gfSA9IG9wdGlvbnMgfHwge307XHJcbiAgICBjb25zdCBzY2hlbWEgPSBnZXRTY2hlbWEoZXh0ZW5zaW9ucyk7XHJcbiAgICBjb25zdCBjb250ZW50Tm9kZSA9IE5vZGUkMS5mcm9tSlNPTihzY2hlbWEsIGRvYyk7XHJcbiAgICByZXR1cm4gZ2V0VGV4dChjb250ZW50Tm9kZSwge1xyXG4gICAgICAgIGJsb2NrU2VwYXJhdG9yLFxyXG4gICAgICAgIHRleHRTZXJpYWxpemVyczoge1xyXG4gICAgICAgICAgICAuLi5nZXRUZXh0U2VyaWFsaXplcnNGcm9tU2NoZW1hKHNjaGVtYSksXHJcbiAgICAgICAgICAgIC4uLnRleHRTZXJpYWxpemVycyxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZUF0dHJpYnV0ZXMoc3RhdGUsIHR5cGVPck5hbWUpIHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgeyBmcm9tLCB0byB9ID0gc3RhdGUuc2VsZWN0aW9uO1xyXG4gICAgY29uc3Qgbm9kZXMgPSBbXTtcclxuICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIG5vZGUgPT4ge1xyXG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IG5vZGUgPSBub2Rlcy5yZXZlcnNlKCkuZmluZChub2RlSXRlbSA9PiBub2RlSXRlbS50eXBlLm5hbWUgPT09IHR5cGUubmFtZSk7XHJcbiAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyAuLi5ub2RlLmF0dHJzIH07XHJcbn1cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlcyhzdGF0ZSwgdHlwZU9yTmFtZSkge1xyXG4gICAgY29uc3Qgc2NoZW1hVHlwZSA9IGdldFNjaGVtYVR5cGVOYW1lQnlOYW1lKHR5cGVvZiB0eXBlT3JOYW1lID09PSAnc3RyaW5nJyA/IHR5cGVPck5hbWUgOiB0eXBlT3JOYW1lLm5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBpZiAoc2NoZW1hVHlwZSA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldE5vZGVBdHRyaWJ1dGVzKHN0YXRlLCB0eXBlT3JOYW1lKTtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbWFyaycpIHtcclxuICAgICAgICByZXR1cm4gZ2V0TWFya0F0dHJpYnV0ZXMoc3RhdGUsIHR5cGVPck5hbWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHt9O1xyXG59XG5cbi8qKlxyXG4gKiBSZW1vdmVzIGR1cGxpY2F0ZWQgdmFsdWVzIHdpdGhpbiBhbiBhcnJheS5cclxuICogU3VwcG9ydHMgbnVtYmVycywgc3RyaW5ncyBhbmQgb2JqZWN0cy5cclxuICovXHJcbmZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZXMoYXJyYXksIGJ5ID0gSlNPTi5zdHJpbmdpZnkpIHtcclxuICAgIGNvbnN0IHNlZW4gPSB7fTtcclxuICAgIHJldHVybiBhcnJheS5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYnkoaXRlbSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZWVuLCBrZXkpXHJcbiAgICAgICAgICAgID8gZmFsc2VcclxuICAgICAgICAgICAgOiAoc2VlbltrZXldID0gdHJ1ZSk7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogUmVtb3ZlcyBkdXBsaWNhdGVkIHJhbmdlcyBhbmQgcmFuZ2VzIHRoYXQgYXJlXHJcbiAqIGZ1bGx5IGNhcHR1cmVkIGJ5IG90aGVyIHJhbmdlcy5cclxuICovXHJcbmZ1bmN0aW9uIHNpbXBsaWZ5Q2hhbmdlZFJhbmdlcyhjaGFuZ2VzKSB7XHJcbiAgICBjb25zdCB1bmlxdWVDaGFuZ2VzID0gcmVtb3ZlRHVwbGljYXRlcyhjaGFuZ2VzKTtcclxuICAgIHJldHVybiB1bmlxdWVDaGFuZ2VzLmxlbmd0aCA9PT0gMVxyXG4gICAgICAgID8gdW5pcXVlQ2hhbmdlc1xyXG4gICAgICAgIDogdW5pcXVlQ2hhbmdlcy5maWx0ZXIoKGNoYW5nZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdCA9IHVuaXF1ZUNoYW5nZXMuZmlsdGVyKChfLCBpKSA9PiBpICE9PSBpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiAhcmVzdC5zb21lKG90aGVyQ2hhbmdlID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2Uub2xkUmFuZ2UuZnJvbSA+PSBvdGhlckNoYW5nZS5vbGRSYW5nZS5mcm9tXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgY2hhbmdlLm9sZFJhbmdlLnRvIDw9IG90aGVyQ2hhbmdlLm9sZFJhbmdlLnRvXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgY2hhbmdlLm5ld1JhbmdlLmZyb20gPj0gb3RoZXJDaGFuZ2UubmV3UmFuZ2UuZnJvbVxyXG4gICAgICAgICAgICAgICAgICAgICYmIGNoYW5nZS5uZXdSYW5nZS50byA8PSBvdGhlckNoYW5nZS5uZXdSYW5nZS50bztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgYSBsaXN0IG9mIGNoYW5nZWQgcmFuZ2VzXHJcbiAqIGJhc2VkIG9uIHRoZSBmaXJzdCBhbmQgbGFzdCBzdGF0ZSBvZiBhbGwgc3RlcHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDaGFuZ2VkUmFuZ2VzKHRyYW5zZm9ybSkge1xyXG4gICAgY29uc3QgeyBtYXBwaW5nLCBzdGVwcyB9ID0gdHJhbnNmb3JtO1xyXG4gICAgY29uc3QgY2hhbmdlcyA9IFtdO1xyXG4gICAgbWFwcGluZy5tYXBzLmZvckVhY2goKHN0ZXBNYXAsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmFuZ2VzID0gW107XHJcbiAgICAgICAgLy8gVGhpcyBhY2NvdW50cyBmb3Igc3RlcCBjaGFuZ2VzIHdoZXJlIG5vIHJhbmdlIHdhcyBhY3R1YWxseSBhbHRlcmVkXHJcbiAgICAgICAgLy8gZS5nLiB3aGVuIHNldHRpbmcgYSBtYXJrLCBub2RlIGF0dHJpYnV0ZSwgZXRjLlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoIXN0ZXBNYXAucmFuZ2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGZyb20sIHRvIH0gPSBzdGVwc1tpbmRleF07XHJcbiAgICAgICAgICAgIGlmIChmcm9tID09PSB1bmRlZmluZWQgfHwgdG8gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKHsgZnJvbSwgdG8gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdGVwTWFwLmZvckVhY2goKGZyb20sIHRvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByYW5nZXMucHVzaCh7IGZyb20sIHRvIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmFuZ2VzLmZvckVhY2goKHsgZnJvbSwgdG8gfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdTdGFydCA9IG1hcHBpbmcuc2xpY2UoaW5kZXgpLm1hcChmcm9tLCAtMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0VuZCA9IG1hcHBpbmcuc2xpY2UoaW5kZXgpLm1hcCh0byk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFN0YXJ0ID0gbWFwcGluZy5pbnZlcnQoKS5tYXAobmV3U3RhcnQsIC0xKTtcclxuICAgICAgICAgICAgY29uc3Qgb2xkRW5kID0gbWFwcGluZy5pbnZlcnQoKS5tYXAobmV3RW5kKTtcclxuICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG9sZFJhbmdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogb2xkU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdG86IG9sZEVuZCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBuZXdSYW5nZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb206IG5ld1N0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvOiBuZXdFbmQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNpbXBsaWZ5Q2hhbmdlZFJhbmdlcyhjaGFuZ2VzKTtcclxufVxuXG5mdW5jdGlvbiBnZXREZWJ1Z0pTT04obm9kZSwgc3RhcnRPZmZzZXQgPSAwKSB7XHJcbiAgICBjb25zdCBpc1RvcE5vZGUgPSBub2RlLnR5cGUgPT09IG5vZGUudHlwZS5zY2hlbWEudG9wTm9kZVR5cGU7XHJcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBpc1RvcE5vZGUgPyAwIDogMTtcclxuICAgIGNvbnN0IGZyb20gPSBzdGFydE9mZnNldDtcclxuICAgIGNvbnN0IHRvID0gZnJvbSArIG5vZGUubm9kZVNpemU7XHJcbiAgICBjb25zdCBtYXJrcyA9IG5vZGUubWFya3MubWFwKG1hcmsgPT4ge1xyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IHtcclxuICAgICAgICAgICAgdHlwZTogbWFyay50eXBlLm5hbWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXMobWFyay5hdHRycykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG91dHB1dC5hdHRycyA9IHsgLi4ubWFyay5hdHRycyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBhdHRycyA9IHsgLi4ubm9kZS5hdHRycyB9O1xyXG4gICAgY29uc3Qgb3V0cHV0ID0ge1xyXG4gICAgICAgIHR5cGU6IG5vZGUudHlwZS5uYW1lLFxyXG4gICAgICAgIGZyb20sXHJcbiAgICAgICAgdG8sXHJcbiAgICB9O1xyXG4gICAgaWYgKE9iamVjdC5rZXlzKGF0dHJzKS5sZW5ndGgpIHtcclxuICAgICAgICBvdXRwdXQuYXR0cnMgPSBhdHRycztcclxuICAgIH1cclxuICAgIGlmIChtYXJrcy5sZW5ndGgpIHtcclxuICAgICAgICBvdXRwdXQubWFya3MgPSBtYXJrcztcclxuICAgIH1cclxuICAgIGlmIChub2RlLmNvbnRlbnQuY2hpbGRDb3VudCkge1xyXG4gICAgICAgIG91dHB1dC5jb250ZW50ID0gW107XHJcbiAgICAgICAgbm9kZS5mb3JFYWNoKChjaGlsZCwgb2Zmc2V0KSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgKF9hID0gb3V0cHV0LmNvbnRlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wdXNoKGdldERlYnVnSlNPTihjaGlsZCwgc3RhcnRPZmZzZXQgKyBvZmZzZXQgKyBpbmNyZW1lbnQpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChub2RlLnRleHQpIHtcclxuICAgICAgICBvdXRwdXQudGV4dCA9IG5vZGUudGV4dDtcclxuICAgIH1cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbn1cblxuZnVuY3Rpb24gZ2V0TWFya3NCZXR3ZWVuKGZyb20sIHRvLCBkb2MpIHtcclxuICAgIGNvbnN0IG1hcmtzID0gW107XHJcbiAgICAvLyBnZXQgYWxsIGluY2x1c2l2ZSBtYXJrcyBvbiBlbXB0eSBzZWxlY3Rpb25cclxuICAgIGlmIChmcm9tID09PSB0bykge1xyXG4gICAgICAgIGRvY1xyXG4gICAgICAgICAgICAucmVzb2x2ZShmcm9tKVxyXG4gICAgICAgICAgICAubWFya3MoKVxyXG4gICAgICAgICAgICAuZm9yRWFjaChtYXJrID0+IHtcclxuICAgICAgICAgICAgY29uc3QgJHBvcyA9IGRvYy5yZXNvbHZlKGZyb20gLSAxKTtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBnZXRNYXJrUmFuZ2UoJHBvcywgbWFyay50eXBlKTtcclxuICAgICAgICAgICAgaWYgKCFyYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1hcmtzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbWFyayxcclxuICAgICAgICAgICAgICAgIC4uLnJhbmdlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgbWFya3MucHVzaCguLi5ub2RlLm1hcmtzLm1hcChtYXJrID0+ICh7XHJcbiAgICAgICAgICAgICAgICBmcm9tOiBwb3MsXHJcbiAgICAgICAgICAgICAgICB0bzogcG9zICsgbm9kZS5ub2RlU2l6ZSxcclxuICAgICAgICAgICAgICAgIG1hcmssXHJcbiAgICAgICAgICAgIH0pKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFya3M7XHJcbn1cblxuLyoqXHJcbiAqIEZpbmRzIHRoZSBmaXJzdCBub2RlIG9mIGEgZ2l2ZW4gdHlwZSBvciBuYW1lIGluIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cclxuICogQHBhcmFtIHN0YXRlIFRoZSBlZGl0b3Igc3RhdGUuXHJcbiAqIEBwYXJhbSB0eXBlT3JOYW1lIFRoZSBub2RlIHR5cGUgb3IgbmFtZS5cclxuICogQHBhcmFtIHBvcyBUaGUgcG9zaXRpb24gdG8gc3RhcnQgc2VhcmNoaW5nIGZyb20uXHJcbiAqIEBwYXJhbSBtYXhEZXB0aCBUaGUgbWF4aW11bSBkZXB0aCB0byBzZWFyY2guXHJcbiAqIEByZXR1cm5zIFRoZSBub2RlIGFuZCB0aGUgZGVwdGggYXMgYW4gYXJyYXkuXHJcbiAqL1xyXG5jb25zdCBnZXROb2RlQXRQb3NpdGlvbiA9IChzdGF0ZSwgdHlwZU9yTmFtZSwgcG9zLCBtYXhEZXB0aCA9IDIwKSA9PiB7XHJcbiAgICBjb25zdCAkcG9zID0gc3RhdGUuZG9jLnJlc29sdmUocG9zKTtcclxuICAgIGxldCBjdXJyZW50RGVwdGggPSBtYXhEZXB0aDtcclxuICAgIGxldCBub2RlID0gbnVsbDtcclxuICAgIHdoaWxlIChjdXJyZW50RGVwdGggPiAwICYmIG5vZGUgPT09IG51bGwpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50Tm9kZSA9ICRwb3Mubm9kZShjdXJyZW50RGVwdGgpO1xyXG4gICAgICAgIGlmICgoY3VycmVudE5vZGUgPT09IG51bGwgfHwgY3VycmVudE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1cnJlbnROb2RlLnR5cGUubmFtZSkgPT09IHR5cGVPck5hbWUpIHtcclxuICAgICAgICAgICAgbm9kZSA9IGN1cnJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY3VycmVudERlcHRoIC09IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtub2RlLCBjdXJyZW50RGVwdGhdO1xyXG59O1xuXG5mdW5jdGlvbiBnZXRTcGxpdHRlZEF0dHJpYnV0ZXMoZXh0ZW5zaW9uQXR0cmlidXRlcywgdHlwZU5hbWUsIGF0dHJpYnV0ZXMpIHtcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0XHJcbiAgICAgICAgLmVudHJpZXMoYXR0cmlidXRlcylcclxuICAgICAgICAuZmlsdGVyKChbbmFtZV0pID0+IHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb25BdHRyaWJ1dGUgPSBleHRlbnNpb25BdHRyaWJ1dGVzLmZpbmQoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnR5cGUgPT09IHR5cGVOYW1lICYmIGl0ZW0ubmFtZSA9PT0gbmFtZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoIWV4dGVuc2lvbkF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBleHRlbnNpb25BdHRyaWJ1dGUuYXR0cmlidXRlLmtlZXBPblNwbGl0O1xyXG4gICAgfSkpO1xyXG59XG5cbmZ1bmN0aW9uIGlzTWFya0FjdGl2ZShzdGF0ZSwgdHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSB7XHJcbiAgICBjb25zdCB7IGVtcHR5LCByYW5nZXMgfSA9IHN0YXRlLnNlbGVjdGlvbjtcclxuICAgIGNvbnN0IHR5cGUgPSB0eXBlT3JOYW1lID8gZ2V0TWFya1R5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKSA6IG51bGw7XHJcbiAgICBpZiAoZW1wdHkpIHtcclxuICAgICAgICByZXR1cm4gISEoc3RhdGUuc3RvcmVkTWFya3MgfHwgc3RhdGUuc2VsZWN0aW9uLiRmcm9tLm1hcmtzKCkpXHJcbiAgICAgICAgICAgIC5maWx0ZXIobWFyayA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHR5cGUubmFtZSA9PT0gbWFyay50eXBlLm5hbWU7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbmQobWFyayA9PiBvYmplY3RJbmNsdWRlcyhtYXJrLmF0dHJzLCBhdHRyaWJ1dGVzLCB7IHN0cmljdDogZmFsc2UgfSkpO1xyXG4gICAgfVxyXG4gICAgbGV0IHNlbGVjdGlvblJhbmdlID0gMDtcclxuICAgIGNvbnN0IG1hcmtSYW5nZXMgPSBbXTtcclxuICAgIHJhbmdlcy5mb3JFYWNoKCh7ICRmcm9tLCAkdG8gfSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZyb20gPSAkZnJvbS5wb3M7XHJcbiAgICAgICAgY29uc3QgdG8gPSAkdG8ucG9zO1xyXG4gICAgICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFub2RlLmlzVGV4dCAmJiAhbm9kZS5tYXJrcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByZWxhdGl2ZUZyb20gPSBNYXRoLm1heChmcm9tLCBwb3MpO1xyXG4gICAgICAgICAgICBjb25zdCByZWxhdGl2ZVRvID0gTWF0aC5taW4odG8sIHBvcyArIG5vZGUubm9kZVNpemUpO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHJlbGF0aXZlVG8gLSByZWxhdGl2ZUZyb207XHJcbiAgICAgICAgICAgIHNlbGVjdGlvblJhbmdlICs9IHJhbmdlO1xyXG4gICAgICAgICAgICBtYXJrUmFuZ2VzLnB1c2goLi4ubm9kZS5tYXJrcy5tYXAobWFyayA9PiAoe1xyXG4gICAgICAgICAgICAgICAgbWFyayxcclxuICAgICAgICAgICAgICAgIGZyb206IHJlbGF0aXZlRnJvbSxcclxuICAgICAgICAgICAgICAgIHRvOiByZWxhdGl2ZVRvLFxyXG4gICAgICAgICAgICB9KSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoc2VsZWN0aW9uUmFuZ2UgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBjYWxjdWxhdGUgcmFuZ2Ugb2YgbWF0Y2hlZCBtYXJrXHJcbiAgICBjb25zdCBtYXRjaGVkUmFuZ2UgPSBtYXJrUmFuZ2VzXHJcbiAgICAgICAgLmZpbHRlcihtYXJrUmFuZ2UgPT4ge1xyXG4gICAgICAgIGlmICghdHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHR5cGUubmFtZSA9PT0gbWFya1JhbmdlLm1hcmsudHlwZS5uYW1lO1xyXG4gICAgfSlcclxuICAgICAgICAuZmlsdGVyKG1hcmtSYW5nZSA9PiBvYmplY3RJbmNsdWRlcyhtYXJrUmFuZ2UubWFyay5hdHRycywgYXR0cmlidXRlcywgeyBzdHJpY3Q6IGZhbHNlIH0pKVxyXG4gICAgICAgIC5yZWR1Y2UoKHN1bSwgbWFya1JhbmdlKSA9PiBzdW0gKyBtYXJrUmFuZ2UudG8gLSBtYXJrUmFuZ2UuZnJvbSwgMCk7XHJcbiAgICAvLyBjYWxjdWxhdGUgcmFuZ2Ugb2YgbWFya3MgdGhhdCBleGNsdWRlcyB0aGUgc2VhcmNoZWQgbWFya1xyXG4gICAgLy8gZm9yIGV4YW1wbGUgYGNvZGVgIGRvZXNu4oCZdCBhbGxvdyBhbnkgb3RoZXIgbWFya3NcclxuICAgIGNvbnN0IGV4Y2x1ZGVkUmFuZ2UgPSBtYXJrUmFuZ2VzXHJcbiAgICAgICAgLmZpbHRlcihtYXJrUmFuZ2UgPT4ge1xyXG4gICAgICAgIGlmICghdHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1hcmtSYW5nZS5tYXJrLnR5cGUgIT09IHR5cGUgJiYgbWFya1JhbmdlLm1hcmsudHlwZS5leGNsdWRlcyh0eXBlKTtcclxuICAgIH0pXHJcbiAgICAgICAgLnJlZHVjZSgoc3VtLCBtYXJrUmFuZ2UpID0+IHN1bSArIG1hcmtSYW5nZS50byAtIG1hcmtSYW5nZS5mcm9tLCAwKTtcclxuICAgIC8vIHdlIG9ubHkgaW5jbHVkZSB0aGUgcmVzdWx0IG9mIGBleGNsdWRlZFJhbmdlYFxyXG4gICAgLy8gaWYgdGhlcmUgaXMgYSBtYXRjaCBhdCBhbGxcclxuICAgIGNvbnN0IHJhbmdlID0gbWF0Y2hlZFJhbmdlID4gMCA/IG1hdGNoZWRSYW5nZSArIGV4Y2x1ZGVkUmFuZ2UgOiBtYXRjaGVkUmFuZ2U7XHJcbiAgICByZXR1cm4gcmFuZ2UgPj0gc2VsZWN0aW9uUmFuZ2U7XHJcbn1cblxuZnVuY3Rpb24gaXNBY3RpdmUoc3RhdGUsIG5hbWUsIGF0dHJpYnV0ZXMgPSB7fSkge1xyXG4gICAgaWYgKCFuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzTm9kZUFjdGl2ZShzdGF0ZSwgbnVsbCwgYXR0cmlidXRlcykgfHwgaXNNYXJrQWN0aXZlKHN0YXRlLCBudWxsLCBhdHRyaWJ1dGVzKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHNjaGVtYVR5cGUgPSBnZXRTY2hlbWFUeXBlTmFtZUJ5TmFtZShuYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgaWYgKHNjaGVtYVR5cGUgPT09ICdub2RlJykge1xyXG4gICAgICAgIHJldHVybiBpc05vZGVBY3RpdmUoc3RhdGUsIG5hbWUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNjaGVtYVR5cGUgPT09ICdtYXJrJykge1xyXG4gICAgICAgIHJldHVybiBpc01hcmtBY3RpdmUoc3RhdGUsIG5hbWUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XG5cbmNvbnN0IGlzQXRFbmRPZk5vZGUgPSAoc3RhdGUsIG5vZGVUeXBlKSA9PiB7XHJcbiAgICBjb25zdCB7ICRmcm9tLCAkdG8sICRhbmNob3IgfSA9IHN0YXRlLnNlbGVjdGlvbjtcclxuICAgIGlmIChub2RlVHlwZSkge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBmaW5kUGFyZW50Tm9kZShub2RlID0+IG5vZGUudHlwZS5uYW1lID09PSBub2RlVHlwZSkoc3RhdGUuc2VsZWN0aW9uKTtcclxuICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCAkcGFyZW50UG9zID0gc3RhdGUuZG9jLnJlc29sdmUocGFyZW50Tm9kZS5wb3MgKyAxKTtcclxuICAgICAgICBpZiAoJGFuY2hvci5wb3MgKyAxID09PSAkcGFyZW50UG9zLmVuZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoJHRvLnBhcmVudE9mZnNldCA8ICR0by5wYXJlbnQubm9kZVNpemUgLSAyIHx8ICRmcm9tLnBvcyAhPT0gJHRvLnBvcykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBpc0F0U3RhcnRPZk5vZGUgPSAoc3RhdGUpID0+IHtcclxuICAgIGNvbnN0IHsgJGZyb20sICR0byB9ID0gc3RhdGUuc2VsZWN0aW9uO1xyXG4gICAgaWYgKCRmcm9tLnBhcmVudE9mZnNldCA+IDAgfHwgJGZyb20ucG9zICE9PSAkdG8ucG9zKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmZ1bmN0aW9uIGlzTGlzdChuYW1lLCBleHRlbnNpb25zKSB7XHJcbiAgICBjb25zdCB7IG5vZGVFeHRlbnNpb25zIH0gPSBzcGxpdEV4dGVuc2lvbnMoZXh0ZW5zaW9ucyk7XHJcbiAgICBjb25zdCBleHRlbnNpb24gPSBub2RlRXh0ZW5zaW9ucy5maW5kKGl0ZW0gPT4gaXRlbS5uYW1lID09PSBuYW1lKTtcclxuICAgIGlmICghZXh0ZW5zaW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgIH07XHJcbiAgICBjb25zdCBncm91cCA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdncm91cCcsIGNvbnRleHQpKTtcclxuICAgIGlmICh0eXBlb2YgZ3JvdXAgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdyb3VwLnNwbGl0KCcgJykuaW5jbHVkZXMoJ2xpc3QnKTtcclxufVxuXG5mdW5jdGlvbiBpc05vZGVFbXB0eShub2RlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBkZWZhdWx0Q29udGVudCA9IChfYSA9IG5vZGUudHlwZS5jcmVhdGVBbmRGaWxsKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b0pTT04oKTtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBub2RlLnRvSlNPTigpO1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRlZmF1bHRDb250ZW50KSA9PT0gSlNPTi5zdHJpbmdpZnkoY29udGVudCk7XHJcbn1cblxuZnVuY3Rpb24gaXNOb2RlU2VsZWN0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uO1xyXG59XG5cbmZ1bmN0aW9uIHBvc1RvRE9NUmVjdCh2aWV3LCBmcm9tLCB0bykge1xyXG4gICAgY29uc3QgbWluUG9zID0gMDtcclxuICAgIGNvbnN0IG1heFBvcyA9IHZpZXcuc3RhdGUuZG9jLmNvbnRlbnQuc2l6ZTtcclxuICAgIGNvbnN0IHJlc29sdmVkRnJvbSA9IG1pbk1heChmcm9tLCBtaW5Qb3MsIG1heFBvcyk7XHJcbiAgICBjb25zdCByZXNvbHZlZEVuZCA9IG1pbk1heCh0bywgbWluUG9zLCBtYXhQb3MpO1xyXG4gICAgY29uc3Qgc3RhcnQgPSB2aWV3LmNvb3Jkc0F0UG9zKHJlc29sdmVkRnJvbSk7XHJcbiAgICBjb25zdCBlbmQgPSB2aWV3LmNvb3Jkc0F0UG9zKHJlc29sdmVkRW5kLCAtMSk7XHJcbiAgICBjb25zdCB0b3AgPSBNYXRoLm1pbihzdGFydC50b3AsIGVuZC50b3ApO1xyXG4gICAgY29uc3QgYm90dG9tID0gTWF0aC5tYXgoc3RhcnQuYm90dG9tLCBlbmQuYm90dG9tKTtcclxuICAgIGNvbnN0IGxlZnQgPSBNYXRoLm1pbihzdGFydC5sZWZ0LCBlbmQubGVmdCk7XHJcbiAgICBjb25zdCByaWdodCA9IE1hdGgubWF4KHN0YXJ0LnJpZ2h0LCBlbmQucmlnaHQpO1xyXG4gICAgY29uc3Qgd2lkdGggPSByaWdodCAtIGxlZnQ7XHJcbiAgICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3A7XHJcbiAgICBjb25zdCB4ID0gbGVmdDtcclxuICAgIGNvbnN0IHkgPSB0b3A7XHJcbiAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgIHRvcCxcclxuICAgICAgICBib3R0b20sXHJcbiAgICAgICAgbGVmdCxcclxuICAgICAgICByaWdodCxcclxuICAgICAgICB3aWR0aCxcclxuICAgICAgICBoZWlnaHQsXHJcbiAgICAgICAgeCxcclxuICAgICAgICB5LFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uZGF0YSxcclxuICAgICAgICB0b0pTT046ICgpID0+IGRhdGEsXHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIGNhblNldE1hcmsoc3RhdGUsIHRyLCBuZXdNYXJrVHlwZSkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IHRyO1xyXG4gICAgbGV0IGN1cnNvciA9IG51bGw7XHJcbiAgICBpZiAoaXNUZXh0U2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcclxuICAgICAgICBjdXJzb3IgPSBzZWxlY3Rpb24uJGN1cnNvcjtcclxuICAgIH1cclxuICAgIGlmIChjdXJzb3IpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50TWFya3MgPSAoX2EgPSBzdGF0ZS5zdG9yZWRNYXJrcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY3Vyc29yLm1hcmtzKCk7XHJcbiAgICAgICAgLy8gVGhlcmUgY2FuIGJlIG5vIGN1cnJlbnQgbWFya3MgdGhhdCBleGNsdWRlIHRoZSBuZXcgbWFya1xyXG4gICAgICAgIHJldHVybiAoISFuZXdNYXJrVHlwZS5pc0luU2V0KGN1cnJlbnRNYXJrcylcclxuICAgICAgICAgICAgfHwgIWN1cnJlbnRNYXJrcy5zb21lKG1hcmsgPT4gbWFyay50eXBlLmV4Y2x1ZGVzKG5ld01hcmtUeXBlKSkpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyByYW5nZXMgfSA9IHNlbGVjdGlvbjtcclxuICAgIHJldHVybiByYW5nZXMuc29tZSgoeyAkZnJvbSwgJHRvIH0pID0+IHtcclxuICAgICAgICBsZXQgc29tZU5vZGVTdXBwb3J0c01hcmsgPSAkZnJvbS5kZXB0aCA9PT0gMFxyXG4gICAgICAgICAgICA/IHN0YXRlLmRvYy5pbmxpbmVDb250ZW50ICYmIHN0YXRlLmRvYy50eXBlLmFsbG93c01hcmtUeXBlKG5ld01hcmtUeXBlKVxyXG4gICAgICAgICAgICA6IGZhbHNlO1xyXG4gICAgICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oJGZyb20ucG9zLCAkdG8ucG9zLCAobm9kZSwgX3BvcywgcGFyZW50KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGFscmVhZHkgZm91bmQgYSBtYXJrIHRoYXQgd2UgY2FuIGVuYWJsZSwgcmV0dXJuIGZhbHNlIHRvIGJ5cGFzcyB0aGUgcmVtYWluaW5nIHNlYXJjaFxyXG4gICAgICAgICAgICBpZiAoc29tZU5vZGVTdXBwb3J0c01hcmspIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobm9kZS5pc0lubGluZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50QWxsb3dzTWFya1R5cGUgPSAhcGFyZW50IHx8IHBhcmVudC50eXBlLmFsbG93c01hcmtUeXBlKG5ld01hcmtUeXBlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNYXJrc0FsbG93TWFya1R5cGUgPSAhIW5ld01hcmtUeXBlLmlzSW5TZXQobm9kZS5tYXJrcylcclxuICAgICAgICAgICAgICAgICAgICB8fCAhbm9kZS5tYXJrcy5zb21lKG90aGVyTWFyayA9PiBvdGhlck1hcmsudHlwZS5leGNsdWRlcyhuZXdNYXJrVHlwZSkpO1xyXG4gICAgICAgICAgICAgICAgc29tZU5vZGVTdXBwb3J0c01hcmsgPSBwYXJlbnRBbGxvd3NNYXJrVHlwZSAmJiBjdXJyZW50TWFya3NBbGxvd01hcmtUeXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAhc29tZU5vZGVTdXBwb3J0c01hcms7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHNvbWVOb2RlU3VwcG9ydHNNYXJrO1xyXG4gICAgfSk7XHJcbn1cclxuY29uc3Qgc2V0TWFyayA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IHRyO1xyXG4gICAgY29uc3QgeyBlbXB0eSwgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0TWFya1R5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGlmIChlbXB0eSkge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRBdHRyaWJ1dGVzID0gZ2V0TWFya0F0dHJpYnV0ZXMoc3RhdGUsIHR5cGUpO1xyXG4gICAgICAgICAgICB0ci5hZGRTdG9yZWRNYXJrKHR5cGUuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIC4uLm9sZEF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAuLi5hdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByYW5nZXMuZm9yRWFjaChyYW5nZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmcm9tID0gcmFuZ2UuJGZyb20ucG9zO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG8gPSByYW5nZS4kdG8ucG9zO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgKG5vZGUsIHBvcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRGcm9tID0gTWF0aC5tYXgocG9zLCBmcm9tKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkVG8gPSBNYXRoLm1pbihwb3MgKyBub2RlLm5vZGVTaXplLCB0byk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29tZUhhc01hcmsgPSBub2RlLm1hcmtzLmZpbmQobWFyayA9PiBtYXJrLnR5cGUgPT09IHR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBtYXJrIG9mIHRoaXMgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGtub3cgdGhhdCB3ZSBoYXZlIHRvIG1lcmdlIGl0cyBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIGFkZCBhIGZyZXNoIG5ldyBtYXJrXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvbWVIYXNNYXJrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubWFya3MuZm9yRWFjaChtYXJrID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBtYXJrLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5hZGRNYXJrKHRyaW1tZWRGcm9tLCB0cmltbWVkVG8sIHR5cGUuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ubWFyay5hdHRycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHIuYWRkTWFyayh0cmltbWVkRnJvbSwgdHJpbW1lZFRvLCB0eXBlLmNyZWF0ZShhdHRyaWJ1dGVzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjYW5TZXRNYXJrKHN0YXRlLCB0ciwgdHlwZSk7XHJcbn07XG5cbmNvbnN0IHNldE1ldGEgPSAoa2V5LCB2YWx1ZSkgPT4gKHsgdHIgfSkgPT4ge1xyXG4gICAgdHIuc2V0TWV0YShrZXksIHZhbHVlKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBzZXROb2RlID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoLCBjaGFpbiB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIC8vIFRPRE86IHVzZSBhIGZhbGxiYWNrIGxpa2UgaW5zZXJ0Q29udGVudD9cclxuICAgIGlmICghdHlwZS5pc1RleHRibG9jaykge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignW3RpcHRhcCB3YXJuXTogQ3VycmVudGx5IFwic2V0Tm9kZSgpXCIgb25seSBzdXBwb3J0cyB0ZXh0IGJsb2NrIG5vZGVzLicpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiAoY2hhaW4oKVxyXG4gICAgICAgIC8vIHRyeSB0byBjb252ZXJ0IG5vZGUgdG8gZGVmYXVsdCBub2RlIGlmIG5lZWRlZFxyXG4gICAgICAgIC5jb21tYW5kKCh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICBjb25zdCBjYW5TZXRCbG9jayA9IHNldEJsb2NrVHlwZSh0eXBlLCBhdHRyaWJ1dGVzKShzdGF0ZSk7XHJcbiAgICAgICAgaWYgKGNhblNldEJsb2NrKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29tbWFuZHMuY2xlYXJOb2RlcygpO1xyXG4gICAgfSlcclxuICAgICAgICAuY29tbWFuZCgoeyBzdGF0ZTogdXBkYXRlZFN0YXRlIH0pID0+IHtcclxuICAgICAgICByZXR1cm4gc2V0QmxvY2tUeXBlKHR5cGUsIGF0dHJpYnV0ZXMpKHVwZGF0ZWRTdGF0ZSwgZGlzcGF0Y2gpO1xyXG4gICAgfSlcclxuICAgICAgICAucnVuKCkpO1xyXG59O1xuXG5jb25zdCBzZXROb2RlU2VsZWN0aW9uID0gcG9zaXRpb24gPT4gKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IHsgZG9jIH0gPSB0cjtcclxuICAgICAgICBjb25zdCBmcm9tID0gbWluTWF4KHBvc2l0aW9uLCAwLCBkb2MuY29udGVudC5zaXplKTtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBOb2RlU2VsZWN0aW9uLmNyZWF0ZShkb2MsIGZyb20pO1xyXG4gICAgICAgIHRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHNldFRleHRTZWxlY3Rpb24gPSBwb3NpdGlvbiA9PiAoeyB0ciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgY29uc3QgeyBkb2MgfSA9IHRyO1xyXG4gICAgICAgIGNvbnN0IHsgZnJvbSwgdG8gfSA9IHR5cGVvZiBwb3NpdGlvbiA9PT0gJ251bWJlcicgPyB7IGZyb206IHBvc2l0aW9uLCB0bzogcG9zaXRpb24gfSA6IHBvc2l0aW9uO1xyXG4gICAgICAgIGNvbnN0IG1pblBvcyA9IFRleHRTZWxlY3Rpb24uYXRTdGFydChkb2MpLmZyb207XHJcbiAgICAgICAgY29uc3QgbWF4UG9zID0gVGV4dFNlbGVjdGlvbi5hdEVuZChkb2MpLnRvO1xyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkRnJvbSA9IG1pbk1heChmcm9tLCBtaW5Qb3MsIG1heFBvcyk7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRFbmQgPSBtaW5NYXgodG8sIG1pblBvcywgbWF4UG9zKTtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBUZXh0U2VsZWN0aW9uLmNyZWF0ZShkb2MsIHJlc29sdmVkRnJvbSwgcmVzb2x2ZWRFbmQpO1xyXG4gICAgICAgIHRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHNpbmtMaXN0SXRlbSA9IHR5cGVPck5hbWUgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgcmV0dXJuIHNpbmtMaXN0SXRlbSQxKHR5cGUpKHN0YXRlLCBkaXNwYXRjaCk7XHJcbn07XG5cbmZ1bmN0aW9uIGVuc3VyZU1hcmtzKHN0YXRlLCBzcGxpdHRhYmxlTWFya3MpIHtcclxuICAgIGNvbnN0IG1hcmtzID0gc3RhdGUuc3RvcmVkTWFya3MgfHwgKHN0YXRlLnNlbGVjdGlvbi4kdG8ucGFyZW50T2Zmc2V0ICYmIHN0YXRlLnNlbGVjdGlvbi4kZnJvbS5tYXJrcygpKTtcclxuICAgIGlmIChtYXJrcykge1xyXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkTWFya3MgPSBtYXJrcy5maWx0ZXIobWFyayA9PiBzcGxpdHRhYmxlTWFya3MgPT09IG51bGwgfHwgc3BsaXR0YWJsZU1hcmtzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzcGxpdHRhYmxlTWFya3MuaW5jbHVkZXMobWFyay50eXBlLm5hbWUpKTtcclxuICAgICAgICBzdGF0ZS50ci5lbnN1cmVNYXJrcyhmaWx0ZXJlZE1hcmtzKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBzcGxpdEJsb2NrID0gKHsga2VlcE1hcmtzID0gdHJ1ZSB9ID0ge30pID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2gsIGVkaXRvciwgfSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZWxlY3Rpb24sIGRvYyB9ID0gdHI7XHJcbiAgICBjb25zdCB7ICRmcm9tLCAkdG8gfSA9IHNlbGVjdGlvbjtcclxuICAgIGNvbnN0IGV4dGVuc2lvbkF0dHJpYnV0ZXMgPSBlZGl0b3IuZXh0ZW5zaW9uTWFuYWdlci5hdHRyaWJ1dGVzO1xyXG4gICAgY29uc3QgbmV3QXR0cmlidXRlcyA9IGdldFNwbGl0dGVkQXR0cmlidXRlcyhleHRlbnNpb25BdHRyaWJ1dGVzLCAkZnJvbS5ub2RlKCkudHlwZS5uYW1lLCAkZnJvbS5ub2RlKCkuYXR0cnMpO1xyXG4gICAgaWYgKHNlbGVjdGlvbiBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24gJiYgc2VsZWN0aW9uLm5vZGUuaXNCbG9jaykge1xyXG4gICAgICAgIGlmICghJGZyb20ucGFyZW50T2Zmc2V0IHx8ICFjYW5TcGxpdChkb2MsICRmcm9tLnBvcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgaWYgKGtlZXBNYXJrcykge1xyXG4gICAgICAgICAgICAgICAgZW5zdXJlTWFya3Moc3RhdGUsIGVkaXRvci5leHRlbnNpb25NYW5hZ2VyLnNwbGl0dGFibGVNYXJrcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHIuc3BsaXQoJGZyb20ucG9zKS5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICghJGZyb20ucGFyZW50LmlzQmxvY2spIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICBjb25zdCBhdEVuZCA9ICR0by5wYXJlbnRPZmZzZXQgPT09ICR0by5wYXJlbnQuY29udGVudC5zaXplO1xyXG4gICAgICAgIGlmIChzZWxlY3Rpb24gaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRyLmRlbGV0ZVNlbGVjdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkZWZsdCA9ICRmcm9tLmRlcHRoID09PSAwXHJcbiAgICAgICAgICAgID8gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIDogZGVmYXVsdEJsb2NrQXQoJGZyb20ubm9kZSgtMSkuY29udGVudE1hdGNoQXQoJGZyb20uaW5kZXhBZnRlcigtMSkpKTtcclxuICAgICAgICBsZXQgdHlwZXMgPSBhdEVuZCAmJiBkZWZsdFxyXG4gICAgICAgICAgICA/IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBkZWZsdCxcclxuICAgICAgICAgICAgICAgICAgICBhdHRyczogbmV3QXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IGNhbiA9IGNhblNwbGl0KHRyLmRvYywgdHIubWFwcGluZy5tYXAoJGZyb20ucG9zKSwgMSwgdHlwZXMpO1xyXG4gICAgICAgIGlmICghdHlwZXNcclxuICAgICAgICAgICAgJiYgIWNhblxyXG4gICAgICAgICAgICAmJiBjYW5TcGxpdCh0ci5kb2MsIHRyLm1hcHBpbmcubWFwKCRmcm9tLnBvcyksIDEsIGRlZmx0ID8gW3sgdHlwZTogZGVmbHQgfV0gOiB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgIGNhbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHR5cGVzID0gZGVmbHRcclxuICAgICAgICAgICAgICAgID8gW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZGVmbHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiBuZXdBdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNhbikge1xyXG4gICAgICAgICAgICB0ci5zcGxpdCh0ci5tYXBwaW5nLm1hcCgkZnJvbS5wb3MpLCAxLCB0eXBlcyk7XHJcbiAgICAgICAgICAgIGlmIChkZWZsdCAmJiAhYXRFbmQgJiYgISRmcm9tLnBhcmVudE9mZnNldCAmJiAkZnJvbS5wYXJlbnQudHlwZSAhPT0gZGVmbHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gdHIubWFwcGluZy5tYXAoJGZyb20uYmVmb3JlKCkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgJGZpcnN0ID0gdHIuZG9jLnJlc29sdmUoZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRmcm9tLm5vZGUoLTEpLmNhblJlcGxhY2VXaXRoKCRmaXJzdC5pbmRleCgpLCAkZmlyc3QuaW5kZXgoKSArIDEsIGRlZmx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLnNldE5vZGVNYXJrdXAodHIubWFwcGluZy5tYXAoJGZyb20uYmVmb3JlKCkpLCBkZWZsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGtlZXBNYXJrcykge1xyXG4gICAgICAgICAgICBlbnN1cmVNYXJrcyhzdGF0ZSwgZWRpdG9yLmV4dGVuc2lvbk1hbmFnZXIuc3BsaXR0YWJsZU1hcmtzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHIuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCBzcGxpdExpc3RJdGVtID0gdHlwZU9yTmFtZSA9PiAoeyB0ciwgc3RhdGUsIGRpc3BhdGNoLCBlZGl0b3IsIH0pID0+IHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXROb2RlVHlwZSh0eXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgeyAkZnJvbSwgJHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIGNvbnN0IG5vZGUgPSBzdGF0ZS5zZWxlY3Rpb24ubm9kZTtcclxuICAgIGlmICgobm9kZSAmJiBub2RlLmlzQmxvY2spIHx8ICRmcm9tLmRlcHRoIDwgMiB8fCAhJGZyb20uc2FtZVBhcmVudCgkdG8pKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZ3JhbmRQYXJlbnQgPSAkZnJvbS5ub2RlKC0xKTtcclxuICAgIGlmIChncmFuZFBhcmVudC50eXBlICE9PSB0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXh0ZW5zaW9uQXR0cmlidXRlcyA9IGVkaXRvci5leHRlbnNpb25NYW5hZ2VyLmF0dHJpYnV0ZXM7XHJcbiAgICBpZiAoJGZyb20ucGFyZW50LmNvbnRlbnQuc2l6ZSA9PT0gMCAmJiAkZnJvbS5ub2RlKC0xKS5jaGlsZENvdW50ID09PSAkZnJvbS5pbmRleEFmdGVyKC0xKSkge1xyXG4gICAgICAgIC8vIEluIGFuIGVtcHR5IGJsb2NrLiBJZiB0aGlzIGlzIGEgbmVzdGVkIGxpc3QsIHRoZSB3cmFwcGluZ1xyXG4gICAgICAgIC8vIGxpc3QgaXRlbSBzaG91bGQgYmUgc3BsaXQuIE90aGVyd2lzZSwgYmFpbCBvdXQgYW5kIGxldCBuZXh0XHJcbiAgICAgICAgLy8gY29tbWFuZCBoYW5kbGUgbGlmdGluZy5cclxuICAgICAgICBpZiAoJGZyb20uZGVwdGggPT09IDJcclxuICAgICAgICAgICAgfHwgJGZyb20ubm9kZSgtMykudHlwZSAhPT0gdHlwZVxyXG4gICAgICAgICAgICB8fCAkZnJvbS5pbmRleCgtMikgIT09ICRmcm9tLm5vZGUoLTIpLmNoaWxkQ291bnQgLSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIGxldCB3cmFwID0gRnJhZ21lbnQuZW1wdHk7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgICBjb25zdCBkZXB0aEJlZm9yZSA9ICRmcm9tLmluZGV4KC0xKSA/IDEgOiAkZnJvbS5pbmRleCgtMikgPyAyIDogMztcclxuICAgICAgICAgICAgLy8gQnVpbGQgYSBmcmFnbWVudCBjb250YWluaW5nIGVtcHR5IHZlcnNpb25zIG9mIHRoZSBzdHJ1Y3R1cmVcclxuICAgICAgICAgICAgLy8gZnJvbSB0aGUgb3V0ZXIgbGlzdCBpdGVtIHRvIHRoZSBwYXJlbnQgbm9kZSBvZiB0aGUgY3Vyc29yXHJcbiAgICAgICAgICAgIGZvciAobGV0IGQgPSAkZnJvbS5kZXB0aCAtIGRlcHRoQmVmb3JlOyBkID49ICRmcm9tLmRlcHRoIC0gMzsgZCAtPSAxKSB7XHJcbiAgICAgICAgICAgICAgICB3cmFwID0gRnJhZ21lbnQuZnJvbSgkZnJvbS5ub2RlKGQpLmNvcHkod3JhcCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgICBjb25zdCBkZXB0aEFmdGVyID0gJGZyb20uaW5kZXhBZnRlcigtMSkgPCAkZnJvbS5ub2RlKC0yKS5jaGlsZENvdW50ID8gMSA6ICRmcm9tLmluZGV4QWZ0ZXIoLTIpIDwgJGZyb20ubm9kZSgtMykuY2hpbGRDb3VudCA/IDIgOiAzO1xyXG4gICAgICAgICAgICAvLyBBZGQgYSBzZWNvbmQgbGlzdCBpdGVtIHdpdGggYW4gZW1wdHkgZGVmYXVsdCBzdGFydCBub2RlXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld05leHRUeXBlQXR0cmlidXRlcyA9IGdldFNwbGl0dGVkQXR0cmlidXRlcyhleHRlbnNpb25BdHRyaWJ1dGVzLCAkZnJvbS5ub2RlKCkudHlwZS5uYW1lLCAkZnJvbS5ub2RlKCkuYXR0cnMpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0VHlwZSA9ICgoX2EgPSB0eXBlLmNvbnRlbnRNYXRjaC5kZWZhdWx0VHlwZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNyZWF0ZUFuZEZpbGwobmV3TmV4dFR5cGVBdHRyaWJ1dGVzKSkgfHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB3cmFwID0gd3JhcC5hcHBlbmQoRnJhZ21lbnQuZnJvbSh0eXBlLmNyZWF0ZUFuZEZpbGwobnVsbCwgbmV4dFR5cGUpIHx8IHVuZGVmaW5lZCkpO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9ICRmcm9tLmJlZm9yZSgkZnJvbS5kZXB0aCAtIChkZXB0aEJlZm9yZSAtIDEpKTtcclxuICAgICAgICAgICAgdHIucmVwbGFjZShzdGFydCwgJGZyb20uYWZ0ZXIoLWRlcHRoQWZ0ZXIpLCBuZXcgU2xpY2Uod3JhcCwgNCAtIGRlcHRoQmVmb3JlLCAwKSk7XHJcbiAgICAgICAgICAgIGxldCBzZWwgPSAtMTtcclxuICAgICAgICAgICAgdHIuZG9jLm5vZGVzQmV0d2VlbihzdGFydCwgdHIuZG9jLmNvbnRlbnQuc2l6ZSwgKG4sIHBvcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG4uaXNUZXh0YmxvY2sgJiYgbi5jb250ZW50LnNpemUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWwgPSBwb3MgKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHNlbCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24oVGV4dFNlbGVjdGlvbi5uZWFyKHRyLmRvYy5yZXNvbHZlKHNlbCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ci5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5leHRUeXBlID0gJHRvLnBvcyA9PT0gJGZyb20uZW5kKCkgPyBncmFuZFBhcmVudC5jb250ZW50TWF0Y2hBdCgwKS5kZWZhdWx0VHlwZSA6IG51bGw7XHJcbiAgICBjb25zdCBuZXdUeXBlQXR0cmlidXRlcyA9IGdldFNwbGl0dGVkQXR0cmlidXRlcyhleHRlbnNpb25BdHRyaWJ1dGVzLCBncmFuZFBhcmVudC50eXBlLm5hbWUsIGdyYW5kUGFyZW50LmF0dHJzKTtcclxuICAgIGNvbnN0IG5ld05leHRUeXBlQXR0cmlidXRlcyA9IGdldFNwbGl0dGVkQXR0cmlidXRlcyhleHRlbnNpb25BdHRyaWJ1dGVzLCAkZnJvbS5ub2RlKCkudHlwZS5uYW1lLCAkZnJvbS5ub2RlKCkuYXR0cnMpO1xyXG4gICAgdHIuZGVsZXRlKCRmcm9tLnBvcywgJHRvLnBvcyk7XHJcbiAgICBjb25zdCB0eXBlcyA9IG5leHRUeXBlXHJcbiAgICAgICAgPyBbXHJcbiAgICAgICAgICAgIHsgdHlwZSwgYXR0cnM6IG5ld1R5cGVBdHRyaWJ1dGVzIH0sXHJcbiAgICAgICAgICAgIHsgdHlwZTogbmV4dFR5cGUsIGF0dHJzOiBuZXdOZXh0VHlwZUF0dHJpYnV0ZXMgfSxcclxuICAgICAgICBdXHJcbiAgICAgICAgOiBbeyB0eXBlLCBhdHRyczogbmV3VHlwZUF0dHJpYnV0ZXMgfV07XHJcbiAgICBpZiAoIWNhblNwbGl0KHRyLmRvYywgJGZyb20ucG9zLCAyKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IHsgc2VsZWN0aW9uLCBzdG9yZWRNYXJrcyB9ID0gc3RhdGU7XHJcbiAgICAgICAgY29uc3QgeyBzcGxpdHRhYmxlTWFya3MgfSA9IGVkaXRvci5leHRlbnNpb25NYW5hZ2VyO1xyXG4gICAgICAgIGNvbnN0IG1hcmtzID0gc3RvcmVkTWFya3MgfHwgKHNlbGVjdGlvbi4kdG8ucGFyZW50T2Zmc2V0ICYmIHNlbGVjdGlvbi4kZnJvbS5tYXJrcygpKTtcclxuICAgICAgICB0ci5zcGxpdCgkZnJvbS5wb3MsIDIsIHR5cGVzKS5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgIGlmICghbWFya3MgfHwgIWRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmaWx0ZXJlZE1hcmtzID0gbWFya3MuZmlsdGVyKG1hcmsgPT4gc3BsaXR0YWJsZU1hcmtzLmluY2x1ZGVzKG1hcmsudHlwZS5uYW1lKSk7XHJcbiAgICAgICAgdHIuZW5zdXJlTWFya3MoZmlsdGVyZWRNYXJrcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuY29uc3Qgam9pbkxpc3RCYWNrd2FyZHMgPSAodHIsIGxpc3RUeXBlKSA9PiB7XHJcbiAgICBjb25zdCBsaXN0ID0gZmluZFBhcmVudE5vZGUobm9kZSA9PiBub2RlLnR5cGUgPT09IGxpc3RUeXBlKSh0ci5zZWxlY3Rpb24pO1xyXG4gICAgaWYgKCFsaXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiZWZvcmUgPSB0ci5kb2MucmVzb2x2ZShNYXRoLm1heCgwLCBsaXN0LnBvcyAtIDEpKS5iZWZvcmUobGlzdC5kZXB0aCk7XHJcbiAgICBpZiAoYmVmb3JlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5vZGVCZWZvcmUgPSB0ci5kb2Mubm9kZUF0KGJlZm9yZSk7XHJcbiAgICBjb25zdCBjYW5Kb2luQmFja3dhcmRzID0gbGlzdC5ub2RlLnR5cGUgPT09IChub2RlQmVmb3JlID09PSBudWxsIHx8IG5vZGVCZWZvcmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGVCZWZvcmUudHlwZSkgJiYgY2FuSm9pbih0ci5kb2MsIGxpc3QucG9zKTtcclxuICAgIGlmICghY2FuSm9pbkJhY2t3YXJkcykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgdHIuam9pbihsaXN0LnBvcyk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcclxuY29uc3Qgam9pbkxpc3RGb3J3YXJkcyA9ICh0ciwgbGlzdFR5cGUpID0+IHtcclxuICAgIGNvbnN0IGxpc3QgPSBmaW5kUGFyZW50Tm9kZShub2RlID0+IG5vZGUudHlwZSA9PT0gbGlzdFR5cGUpKHRyLnNlbGVjdGlvbik7XHJcbiAgICBpZiAoIWxpc3QpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGFmdGVyID0gdHIuZG9jLnJlc29sdmUobGlzdC5zdGFydCkuYWZ0ZXIobGlzdC5kZXB0aCk7XHJcbiAgICBpZiAoYWZ0ZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgbm9kZUFmdGVyID0gdHIuZG9jLm5vZGVBdChhZnRlcik7XHJcbiAgICBjb25zdCBjYW5Kb2luRm9yd2FyZHMgPSBsaXN0Lm5vZGUudHlwZSA9PT0gKG5vZGVBZnRlciA9PT0gbnVsbCB8fCBub2RlQWZ0ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGVBZnRlci50eXBlKSAmJiBjYW5Kb2luKHRyLmRvYywgYWZ0ZXIpO1xyXG4gICAgaWYgKCFjYW5Kb2luRm9yd2FyZHMpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRyLmpvaW4oYWZ0ZXIpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XHJcbmNvbnN0IHRvZ2dsZUxpc3QgPSAobGlzdFR5cGVPck5hbWUsIGl0ZW1UeXBlT3JOYW1lLCBrZWVwTWFya3MsIGF0dHJpYnV0ZXMgPSB7fSkgPT4gKHsgZWRpdG9yLCB0ciwgc3RhdGUsIGRpc3BhdGNoLCBjaGFpbiwgY29tbWFuZHMsIGNhbiwgfSkgPT4ge1xyXG4gICAgY29uc3QgeyBleHRlbnNpb25zLCBzcGxpdHRhYmxlTWFya3MgfSA9IGVkaXRvci5leHRlbnNpb25NYW5hZ2VyO1xyXG4gICAgY29uc3QgbGlzdFR5cGUgPSBnZXROb2RlVHlwZShsaXN0VHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IGl0ZW1UeXBlID0gZ2V0Tm9kZVR5cGUoaXRlbVR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCB7IHNlbGVjdGlvbiwgc3RvcmVkTWFya3MgfSA9IHN0YXRlO1xyXG4gICAgY29uc3QgeyAkZnJvbSwgJHRvIH0gPSBzZWxlY3Rpb247XHJcbiAgICBjb25zdCByYW5nZSA9ICRmcm9tLmJsb2NrUmFuZ2UoJHRvKTtcclxuICAgIGNvbnN0IG1hcmtzID0gc3RvcmVkTWFya3MgfHwgKHNlbGVjdGlvbi4kdG8ucGFyZW50T2Zmc2V0ICYmIHNlbGVjdGlvbi4kZnJvbS5tYXJrcygpKTtcclxuICAgIGlmICghcmFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXJlbnRMaXN0ID0gZmluZFBhcmVudE5vZGUobm9kZSA9PiBpc0xpc3Qobm9kZS50eXBlLm5hbWUsIGV4dGVuc2lvbnMpKShzZWxlY3Rpb24pO1xyXG4gICAgaWYgKHJhbmdlLmRlcHRoID49IDEgJiYgcGFyZW50TGlzdCAmJiByYW5nZS5kZXB0aCAtIHBhcmVudExpc3QuZGVwdGggPD0gMSkge1xyXG4gICAgICAgIC8vIHJlbW92ZSBsaXN0XHJcbiAgICAgICAgaWYgKHBhcmVudExpc3Qubm9kZS50eXBlID09PSBsaXN0VHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29tbWFuZHMubGlmdExpc3RJdGVtKGl0ZW1UeXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2hhbmdlIGxpc3QgdHlwZVxyXG4gICAgICAgIGlmIChpc0xpc3QocGFyZW50TGlzdC5ub2RlLnR5cGUubmFtZSwgZXh0ZW5zaW9ucylcclxuICAgICAgICAgICAgJiYgbGlzdFR5cGUudmFsaWRDb250ZW50KHBhcmVudExpc3Qubm9kZS5jb250ZW50KVxyXG4gICAgICAgICAgICAmJiBkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2hhaW4oKVxyXG4gICAgICAgICAgICAgICAgLmNvbW1hbmQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cChwYXJlbnRMaXN0LnBvcywgbGlzdFR5cGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY29tbWFuZCgoKSA9PiBqb2luTGlzdEJhY2t3YXJkcyh0ciwgbGlzdFR5cGUpKVxyXG4gICAgICAgICAgICAgICAgLmNvbW1hbmQoKCkgPT4gam9pbkxpc3RGb3J3YXJkcyh0ciwgbGlzdFR5cGUpKVxyXG4gICAgICAgICAgICAgICAgLnJ1bigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgha2VlcE1hcmtzIHx8ICFtYXJrcyB8fCAhZGlzcGF0Y2gpIHtcclxuICAgICAgICByZXR1cm4gY2hhaW4oKVxyXG4gICAgICAgICAgICAvLyB0cnkgdG8gY29udmVydCBub2RlIHRvIGRlZmF1bHQgbm9kZSBpZiBuZWVkZWRcclxuICAgICAgICAgICAgLmNvbW1hbmQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjYW5XcmFwSW5MaXN0ID0gY2FuKCkud3JhcEluTGlzdChsaXN0VHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIGlmIChjYW5XcmFwSW5MaXN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuY2xlYXJOb2RlcygpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC53cmFwSW5MaXN0KGxpc3RUeXBlLCBhdHRyaWJ1dGVzKVxyXG4gICAgICAgICAgICAuY29tbWFuZCgoKSA9PiBqb2luTGlzdEJhY2t3YXJkcyh0ciwgbGlzdFR5cGUpKVxyXG4gICAgICAgICAgICAuY29tbWFuZCgoKSA9PiBqb2luTGlzdEZvcndhcmRzKHRyLCBsaXN0VHlwZSkpXHJcbiAgICAgICAgICAgIC5ydW4oKTtcclxuICAgIH1cclxuICAgIHJldHVybiAoY2hhaW4oKVxyXG4gICAgICAgIC8vIHRyeSB0byBjb252ZXJ0IG5vZGUgdG8gZGVmYXVsdCBub2RlIGlmIG5lZWRlZFxyXG4gICAgICAgIC5jb21tYW5kKCgpID0+IHtcclxuICAgICAgICBjb25zdCBjYW5XcmFwSW5MaXN0ID0gY2FuKCkud3JhcEluTGlzdChsaXN0VHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyZWRNYXJrcyA9IG1hcmtzLmZpbHRlcihtYXJrID0+IHNwbGl0dGFibGVNYXJrcy5pbmNsdWRlcyhtYXJrLnR5cGUubmFtZSkpO1xyXG4gICAgICAgIHRyLmVuc3VyZU1hcmtzKGZpbHRlcmVkTWFya3MpO1xyXG4gICAgICAgIGlmIChjYW5XcmFwSW5MaXN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29tbWFuZHMuY2xlYXJOb2RlcygpO1xyXG4gICAgfSlcclxuICAgICAgICAud3JhcEluTGlzdChsaXN0VHlwZSwgYXR0cmlidXRlcylcclxuICAgICAgICAuY29tbWFuZCgoKSA9PiBqb2luTGlzdEJhY2t3YXJkcyh0ciwgbGlzdFR5cGUpKVxyXG4gICAgICAgIC5jb21tYW5kKCgpID0+IGpvaW5MaXN0Rm9yd2FyZHModHIsIGxpc3RUeXBlKSlcclxuICAgICAgICAucnVuKCkpO1xyXG59O1xuXG5jb25zdCB0b2dnbGVNYXJrID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSwgb3B0aW9ucyA9IHt9KSA9PiAoeyBzdGF0ZSwgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgY29uc3QgeyBleHRlbmRFbXB0eU1hcmtSYW5nZSA9IGZhbHNlIH0gPSBvcHRpb25zO1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE1hcmtUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGlzTWFya0FjdGl2ZShzdGF0ZSwgdHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICBpZiAoaXNBY3RpdmUpIHtcclxuICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHR5cGUsIHsgZXh0ZW5kRW1wdHlNYXJrUmFuZ2UgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29tbWFuZHMuc2V0TWFyayh0eXBlLCBhdHRyaWJ1dGVzKTtcclxufTtcblxuY29uc3QgdG9nZ2xlTm9kZSA9ICh0eXBlT3JOYW1lLCB0b2dnbGVUeXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHN0YXRlLCBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IHRvZ2dsZVR5cGUgPSBnZXROb2RlVHlwZSh0b2dnbGVUeXBlT3JOYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgY29uc3QgaXNBY3RpdmUgPSBpc05vZGVBY3RpdmUoc3RhdGUsIHR5cGUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgaWYgKGlzQWN0aXZlKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE5vZGUodG9nZ2xlVHlwZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29tbWFuZHMuc2V0Tm9kZSh0eXBlLCBhdHRyaWJ1dGVzKTtcclxufTtcblxuY29uc3QgdG9nZ2xlV3JhcCA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHN0YXRlLCBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIGNvbnN0IGlzQWN0aXZlID0gaXNOb2RlQWN0aXZlKHN0YXRlLCB0eXBlLCBhdHRyaWJ1dGVzKTtcclxuICAgIGlmIChpc0FjdGl2ZSkge1xyXG4gICAgICAgIHJldHVybiBjb21tYW5kcy5saWZ0KHR5cGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbW1hbmRzLndyYXBJbih0eXBlLCBhdHRyaWJ1dGVzKTtcclxufTtcblxuY29uc3QgdW5kb0lucHV0UnVsZSA9ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCBwbHVnaW5zID0gc3RhdGUucGx1Z2lucztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnNbaV07XHJcbiAgICAgICAgbGV0IHVuZG9hYmxlO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICBpZiAocGx1Z2luLnNwZWMuaXNJbnB1dFJ1bGVzICYmICh1bmRvYWJsZSA9IHBsdWdpbi5nZXRTdGF0ZShzdGF0ZSkpKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHIgPSBzdGF0ZS50cjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvVW5kbyA9IHVuZG9hYmxlLnRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSB0b1VuZG8uc3RlcHMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ci5zdGVwKHRvVW5kby5zdGVwc1tqXS5pbnZlcnQodG9VbmRvLmRvY3Nbal0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh1bmRvYWJsZS50ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya3MgPSB0ci5kb2MucmVzb2x2ZSh1bmRvYWJsZS5mcm9tKS5tYXJrcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLnJlcGxhY2VXaXRoKHVuZG9hYmxlLmZyb20sIHVuZG9hYmxlLnRvLCBzdGF0ZS5zY2hlbWEudGV4dCh1bmRvYWJsZS50ZXh0LCBtYXJrcykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuZGVsZXRlKHVuZG9hYmxlLmZyb20sIHVuZG9hYmxlLnRvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn07XG5cbmNvbnN0IHVuc2V0QWxsTWFya3MgPSAoKSA9PiAoeyB0ciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IHRyO1xyXG4gICAgY29uc3QgeyBlbXB0eSwgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICBpZiAoZW1wdHkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgIHJhbmdlcy5mb3JFYWNoKHJhbmdlID0+IHtcclxuICAgICAgICAgICAgdHIucmVtb3ZlTWFyayhyYW5nZS4kZnJvbS5wb3MsIHJhbmdlLiR0by5wb3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG5cbmNvbnN0IHVuc2V0TWFyayA9ICh0eXBlT3JOYW1lLCBvcHRpb25zID0ge30pID0+ICh7IHRyLCBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgeyBleHRlbmRFbXB0eU1hcmtSYW5nZSA9IGZhbHNlIH0gPSBvcHRpb25zO1xyXG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IHRyO1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE1hcmtUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICBjb25zdCB7ICRmcm9tLCBlbXB0eSwgcmFuZ2VzIH0gPSBzZWxlY3Rpb247XHJcbiAgICBpZiAoIWRpc3BhdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoZW1wdHkgJiYgZXh0ZW5kRW1wdHlNYXJrUmFuZ2UpIHtcclxuICAgICAgICBsZXQgeyBmcm9tLCB0byB9ID0gc2VsZWN0aW9uO1xyXG4gICAgICAgIGNvbnN0IGF0dHJzID0gKF9hID0gJGZyb20ubWFya3MoKS5maW5kKG1hcmsgPT4gbWFyay50eXBlID09PSB0eXBlKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJzO1xyXG4gICAgICAgIGNvbnN0IHJhbmdlID0gZ2V0TWFya1JhbmdlKCRmcm9tLCB0eXBlLCBhdHRycyk7XHJcbiAgICAgICAgaWYgKHJhbmdlKSB7XHJcbiAgICAgICAgICAgIGZyb20gPSByYW5nZS5mcm9tO1xyXG4gICAgICAgICAgICB0byA9IHJhbmdlLnRvO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0ci5yZW1vdmVNYXJrKGZyb20sIHRvLCB0eXBlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJhbmdlcy5mb3JFYWNoKHJhbmdlID0+IHtcclxuICAgICAgICAgICAgdHIucmVtb3ZlTWFyayhyYW5nZS4kZnJvbS5wb3MsIHJhbmdlLiR0by5wb3MsIHR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdHIucmVtb3ZlU3RvcmVkTWFyayh0eXBlKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCB1cGRhdGVBdHRyaWJ1dGVzID0gKHR5cGVPck5hbWUsIGF0dHJpYnV0ZXMgPSB7fSkgPT4gKHsgdHIsIHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBsZXQgbm9kZVR5cGUgPSBudWxsO1xyXG4gICAgbGV0IG1hcmtUeXBlID0gbnVsbDtcclxuICAgIGNvbnN0IHNjaGVtYVR5cGUgPSBnZXRTY2hlbWFUeXBlTmFtZUJ5TmFtZSh0eXBlb2YgdHlwZU9yTmFtZSA9PT0gJ3N0cmluZycgPyB0eXBlT3JOYW1lIDogdHlwZU9yTmFtZS5uYW1lLCBzdGF0ZS5zY2hlbWEpO1xyXG4gICAgaWYgKCFzY2hlbWFUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHNjaGVtYVR5cGUgPT09ICdub2RlJykge1xyXG4gICAgICAgIG5vZGVUeXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWFUeXBlID09PSAnbWFyaycpIHtcclxuICAgICAgICBtYXJrVHlwZSA9IGdldE1hcmtUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICB0ci5zZWxlY3Rpb24ucmFuZ2VzLmZvckVhY2gocmFuZ2UgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmcm9tID0gcmFuZ2UuJGZyb20ucG9zO1xyXG4gICAgICAgICAgICBjb25zdCB0byA9IHJhbmdlLiR0by5wb3M7XHJcbiAgICAgICAgICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlVHlwZSAmJiBub2RlVHlwZSA9PT0gbm9kZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cChwb3MsIHVuZGVmaW5lZCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5ub2RlLmF0dHJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5hdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG1hcmtUeXBlICYmIG5vZGUubWFya3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5tYXJrcy5mb3JFYWNoKG1hcmsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFya1R5cGUgPT09IG1hcmsudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJpbW1lZEZyb20gPSBNYXRoLm1heChwb3MsIGZyb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJpbW1lZFRvID0gTWF0aC5taW4ocG9zICsgbm9kZS5ub2RlU2l6ZSwgdG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIuYWRkTWFyayh0cmltbWVkRnJvbSwgdHJpbW1lZFRvLCBtYXJrVHlwZS5jcmVhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLm1hcmsuYXR0cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG5jb25zdCB3cmFwSW4gPSAodHlwZU9yTmFtZSwgYXR0cmlidXRlcyA9IHt9KSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlKHR5cGVPck5hbWUsIHN0YXRlLnNjaGVtYSk7XHJcbiAgICByZXR1cm4gd3JhcEluJDEodHlwZSwgYXR0cmlidXRlcykoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxuY29uc3Qgd3JhcEluTGlzdCA9ICh0eXBlT3JOYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0Tm9kZVR5cGUodHlwZU9yTmFtZSwgc3RhdGUuc2NoZW1hKTtcclxuICAgIHJldHVybiB3cmFwSW5MaXN0JDEodHlwZSwgYXR0cmlidXRlcykoc3RhdGUsIGRpc3BhdGNoKTtcclxufTtcblxudmFyIGNvbW1hbmRzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGJsdXI6IGJsdXIsXG4gIGNsZWFyQ29udGVudDogY2xlYXJDb250ZW50LFxuICBjbGVhck5vZGVzOiBjbGVhck5vZGVzLFxuICBjb21tYW5kOiBjb21tYW5kLFxuICBjcmVhdGVQYXJhZ3JhcGhOZWFyOiBjcmVhdGVQYXJhZ3JhcGhOZWFyLFxuICBjdXQ6IGN1dCxcbiAgZGVsZXRlQ3VycmVudE5vZGU6IGRlbGV0ZUN1cnJlbnROb2RlLFxuICBkZWxldGVOb2RlOiBkZWxldGVOb2RlLFxuICBkZWxldGVSYW5nZTogZGVsZXRlUmFuZ2UsXG4gIGRlbGV0ZVNlbGVjdGlvbjogZGVsZXRlU2VsZWN0aW9uLFxuICBlbnRlcjogZW50ZXIsXG4gIGV4aXRDb2RlOiBleGl0Q29kZSxcbiAgZXh0ZW5kTWFya1JhbmdlOiBleHRlbmRNYXJrUmFuZ2UsXG4gIGZpcnN0OiBmaXJzdCxcbiAgZm9jdXM6IGZvY3VzLFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBpbnNlcnRDb250ZW50OiBpbnNlcnRDb250ZW50LFxuICBpbnNlcnRDb250ZW50QXQ6IGluc2VydENvbnRlbnRBdCxcbiAgam9pblVwOiBqb2luVXAsXG4gIGpvaW5Eb3duOiBqb2luRG93bixcbiAgam9pbkJhY2t3YXJkOiBqb2luQmFja3dhcmQsXG4gIGpvaW5Gb3J3YXJkOiBqb2luRm9yd2FyZCxcbiAgam9pbkl0ZW1CYWNrd2FyZDogam9pbkl0ZW1CYWNrd2FyZCxcbiAgam9pbkl0ZW1Gb3J3YXJkOiBqb2luSXRlbUZvcndhcmQsXG4gIGtleWJvYXJkU2hvcnRjdXQ6IGtleWJvYXJkU2hvcnRjdXQsXG4gIGxpZnQ6IGxpZnQsXG4gIGxpZnRFbXB0eUJsb2NrOiBsaWZ0RW1wdHlCbG9jayxcbiAgbGlmdExpc3RJdGVtOiBsaWZ0TGlzdEl0ZW0sXG4gIG5ld2xpbmVJbkNvZGU6IG5ld2xpbmVJbkNvZGUsXG4gIHJlc2V0QXR0cmlidXRlczogcmVzZXRBdHRyaWJ1dGVzLFxuICBzY3JvbGxJbnRvVmlldzogc2Nyb2xsSW50b1ZpZXcsXG4gIHNlbGVjdEFsbDogc2VsZWN0QWxsLFxuICBzZWxlY3ROb2RlQmFja3dhcmQ6IHNlbGVjdE5vZGVCYWNrd2FyZCxcbiAgc2VsZWN0Tm9kZUZvcndhcmQ6IHNlbGVjdE5vZGVGb3J3YXJkLFxuICBzZWxlY3RQYXJlbnROb2RlOiBzZWxlY3RQYXJlbnROb2RlLFxuICBzZWxlY3RUZXh0YmxvY2tFbmQ6IHNlbGVjdFRleHRibG9ja0VuZCxcbiAgc2VsZWN0VGV4dGJsb2NrU3RhcnQ6IHNlbGVjdFRleHRibG9ja1N0YXJ0LFxuICBzZXRDb250ZW50OiBzZXRDb250ZW50LFxuICBzZXRNYXJrOiBzZXRNYXJrLFxuICBzZXRNZXRhOiBzZXRNZXRhLFxuICBzZXROb2RlOiBzZXROb2RlLFxuICBzZXROb2RlU2VsZWN0aW9uOiBzZXROb2RlU2VsZWN0aW9uLFxuICBzZXRUZXh0U2VsZWN0aW9uOiBzZXRUZXh0U2VsZWN0aW9uLFxuICBzaW5rTGlzdEl0ZW06IHNpbmtMaXN0SXRlbSxcbiAgc3BsaXRCbG9jazogc3BsaXRCbG9jayxcbiAgc3BsaXRMaXN0SXRlbTogc3BsaXRMaXN0SXRlbSxcbiAgdG9nZ2xlTGlzdDogdG9nZ2xlTGlzdCxcbiAgdG9nZ2xlTWFyazogdG9nZ2xlTWFyayxcbiAgdG9nZ2xlTm9kZTogdG9nZ2xlTm9kZSxcbiAgdG9nZ2xlV3JhcDogdG9nZ2xlV3JhcCxcbiAgdW5kb0lucHV0UnVsZTogdW5kb0lucHV0UnVsZSxcbiAgdW5zZXRBbGxNYXJrczogdW5zZXRBbGxNYXJrcyxcbiAgdW5zZXRNYXJrOiB1bnNldE1hcmssXG4gIHVwZGF0ZUF0dHJpYnV0ZXM6IHVwZGF0ZUF0dHJpYnV0ZXMsXG4gIHdyYXBJbjogd3JhcEluLFxuICB3cmFwSW5MaXN0OiB3cmFwSW5MaXN0XG59KTtcblxuY29uc3QgQ29tbWFuZHMgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdjb21tYW5kcycsXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAuLi5jb21tYW5kcyxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmNvbnN0IEVkaXRhYmxlID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnZWRpdGFibGUnLFxyXG4gICAgYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG5ldyBQbHVnaW4oe1xyXG4gICAgICAgICAgICAgICAga2V5OiBuZXcgUGx1Z2luS2V5KCdlZGl0YWJsZScpLFxyXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZTogKCkgPT4gdGhpcy5lZGl0b3Iub3B0aW9ucy5lZGl0YWJsZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuY29uc3QgRm9jdXNFdmVudHMgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdmb2N1c0V2ZW50cycsXHJcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XHJcbiAgICAgICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbmV3IFBsdWdpbih7XHJcbiAgICAgICAgICAgICAgICBrZXk6IG5ldyBQbHVnaW5LZXkoJ2ZvY3VzRXZlbnRzJyksXHJcbiAgICAgICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZURPTUV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1czogKHZpZXcsIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuaXNGb2N1c2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gZWRpdG9yLnN0YXRlLnRyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldE1ldGEoJ2ZvY3VzJywgeyBldmVudCB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRNZXRhKCdhZGRUb0hpc3RvcnknLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHRyYW5zYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmx1cjogKHZpZXcsIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuaXNGb2N1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGVkaXRvci5zdGF0ZS50clxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRNZXRhKCdibHVyJywgeyBldmVudCB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRNZXRhKCdhZGRUb0hpc3RvcnknLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHRyYW5zYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5jb25zdCBLZXltYXAgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdrZXltYXAnLFxyXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlQmFja3NwYWNlID0gKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuZmlyc3QoKHsgY29tbWFuZHMgfSkgPT4gW1xyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy51bmRvSW5wdXRSdWxlKCksXHJcbiAgICAgICAgICAgIC8vIG1heWJlIGNvbnZlcnQgZmlyc3QgdGV4dCBibG9jayBub2RlIHRvIGRlZmF1bHQgbm9kZVxyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5jb21tYW5kKCh7IHRyIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0aW9uLCBkb2MgfSA9IHRyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBlbXB0eSwgJGFuY2hvciB9ID0gc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBwb3MsIHBhcmVudCB9ID0gJGFuY2hvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0ICRwYXJlbnRQb3MgPSAkYW5jaG9yLnBhcmVudC5pc1RleHRibG9jayA/IHRyLmRvYy5yZXNvbHZlKHBvcyAtIDEpIDogJGFuY2hvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudElzSXNvbGF0aW5nID0gJHBhcmVudFBvcy5wYXJlbnQudHlwZS5zcGVjLmlzb2xhdGluZztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFBvcyA9ICRhbmNob3IucG9zIC0gJGFuY2hvci5wYXJlbnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0F0U3RhcnQgPSAocGFyZW50SXNJc29sYXRpbmcgJiYgJHBhcmVudFBvcy5wYXJlbnQuY2hpbGRDb3VudCA9PT0gMSlcclxuICAgICAgICAgICAgICAgICAgICA/IHBhcmVudFBvcyA9PT0gJGFuY2hvci5wb3NcclxuICAgICAgICAgICAgICAgICAgICA6IFNlbGVjdGlvbi5hdFN0YXJ0KGRvYykuZnJvbSA9PT0gcG9zO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlbXB0eSB8fCAhaXNBdFN0YXJ0IHx8ICFwYXJlbnQudHlwZS5pc1RleHRibG9jayB8fCBwYXJlbnQudGV4dENvbnRlbnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLmNsZWFyTm9kZXMoKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLmRlbGV0ZVNlbGVjdGlvbigpLFxyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5qb2luQmFja3dhcmQoKSxcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuc2VsZWN0Tm9kZUJhY2t3YXJkKCksXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlRGVsZXRlID0gKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuZmlyc3QoKHsgY29tbWFuZHMgfSkgPT4gW1xyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5kZWxldGVTZWxlY3Rpb24oKSxcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuZGVsZXRlQ3VycmVudE5vZGUoKSxcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuam9pbkZvcndhcmQoKSxcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuc2VsZWN0Tm9kZUZvcndhcmQoKSxcclxuICAgICAgICBdKTtcclxuICAgICAgICBjb25zdCBoYW5kbGVFbnRlciA9ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLmZpcnN0KCh7IGNvbW1hbmRzIH0pID0+IFtcclxuICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMubmV3bGluZUluQ29kZSgpLFxyXG4gICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5jcmVhdGVQYXJhZ3JhcGhOZWFyKCksXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLmxpZnRFbXB0eUJsb2NrKCksXHJcbiAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLnNwbGl0QmxvY2soKSxcclxuICAgICAgICBdKTtcclxuICAgICAgICBjb25zdCBiYXNlS2V5bWFwID0ge1xyXG4gICAgICAgICAgICBFbnRlcjogaGFuZGxlRW50ZXIsXHJcbiAgICAgICAgICAgICdNb2QtRW50ZXInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5leGl0Q29kZSgpLFxyXG4gICAgICAgICAgICBCYWNrc3BhY2U6IGhhbmRsZUJhY2tzcGFjZSxcclxuICAgICAgICAgICAgJ01vZC1CYWNrc3BhY2UnOiBoYW5kbGVCYWNrc3BhY2UsXHJcbiAgICAgICAgICAgICdTaGlmdC1CYWNrc3BhY2UnOiBoYW5kbGVCYWNrc3BhY2UsXHJcbiAgICAgICAgICAgIERlbGV0ZTogaGFuZGxlRGVsZXRlLFxyXG4gICAgICAgICAgICAnTW9kLURlbGV0ZSc6IGhhbmRsZURlbGV0ZSxcclxuICAgICAgICAgICAgJ01vZC1hJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2VsZWN0QWxsKCksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBwY0tleW1hcCA9IHtcclxuICAgICAgICAgICAgLi4uYmFzZUtleW1hcCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IG1hY0tleW1hcCA9IHtcclxuICAgICAgICAgICAgLi4uYmFzZUtleW1hcCxcclxuICAgICAgICAgICAgJ0N0cmwtaCc6IGhhbmRsZUJhY2tzcGFjZSxcclxuICAgICAgICAgICAgJ0FsdC1CYWNrc3BhY2UnOiBoYW5kbGVCYWNrc3BhY2UsXHJcbiAgICAgICAgICAgICdDdHJsLWQnOiBoYW5kbGVEZWxldGUsXHJcbiAgICAgICAgICAgICdDdHJsLUFsdC1CYWNrc3BhY2UnOiBoYW5kbGVEZWxldGUsXHJcbiAgICAgICAgICAgICdBbHQtRGVsZXRlJzogaGFuZGxlRGVsZXRlLFxyXG4gICAgICAgICAgICAnQWx0LWQnOiBoYW5kbGVEZWxldGUsXHJcbiAgICAgICAgICAgICdDdHJsLWEnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5zZWxlY3RUZXh0YmxvY2tTdGFydCgpLFxyXG4gICAgICAgICAgICAnQ3RybC1lJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2VsZWN0VGV4dGJsb2NrRW5kKCksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNpT1MoKSB8fCBpc01hY09TKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hY0tleW1hcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBjS2V5bWFwO1xyXG4gICAgfSxcclxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAvLyBXaXRoIHRoaXMgcGx1Z2luIHdlIGNoZWNrIGlmIHRoZSB3aG9sZSBkb2N1bWVudCB3YXMgc2VsZWN0ZWQgYW5kIGRlbGV0ZWQuXHJcbiAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSB3ZSB3aWxsIGFkZGl0aW9uYWxseSBjYWxsIGBjbGVhck5vZGVzKClgIHRvIGNvbnZlcnQgZS5nLiBhIGhlYWRpbmdcclxuICAgICAgICAgICAgLy8gdG8gYSBwYXJhZ3JhcGggaWYgbmVjZXNzYXJ5LlxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIHRvIFByb3NlTWlycm9yJ3MgYEFsbFNlbGVjdGlvbmAsIHdoaWNoIGRvZXNu4oCZdCB3b3JrIHdlbGxcclxuICAgICAgICAgICAgLy8gd2l0aCBtYW55IG90aGVyIGNvbW1hbmRzLlxyXG4gICAgICAgICAgICBuZXcgUGx1Z2luKHtcclxuICAgICAgICAgICAgICAgIGtleTogbmV3IFBsdWdpbktleSgnY2xlYXJEb2N1bWVudCcpLFxyXG4gICAgICAgICAgICAgICAgYXBwZW5kVHJhbnNhY3Rpb246ICh0cmFuc2FjdGlvbnMsIG9sZFN0YXRlLCBuZXdTdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvY0NoYW5nZXMgPSB0cmFuc2FjdGlvbnMuc29tZSh0cmFuc2FjdGlvbiA9PiB0cmFuc2FjdGlvbi5kb2NDaGFuZ2VkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiAhb2xkU3RhdGUuZG9jLmVxKG5ld1N0YXRlLmRvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb2NDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBlbXB0eSwgZnJvbSwgdG8gfSA9IG9sZFN0YXRlLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxGcm9tID0gU2VsZWN0aW9uLmF0U3RhcnQob2xkU3RhdGUuZG9jKS5mcm9tO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbEVuZCA9IFNlbGVjdGlvbi5hdEVuZChvbGRTdGF0ZS5kb2MpLnRvO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbFdhc1NlbGVjdGVkID0gZnJvbSA9PT0gYWxsRnJvbSAmJiB0byA9PT0gYWxsRW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbXB0eSB8fCAhYWxsV2FzU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0VtcHR5ID0gbmV3U3RhdGUuZG9jLnRleHRCZXR3ZWVuKDAsIG5ld1N0YXRlLmRvYy5jb250ZW50LnNpemUsICcgJywgJyAnKS5sZW5ndGggPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHIgPSBuZXdTdGF0ZS50cjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IGNyZWF0ZUNoYWluYWJsZVN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IG5ld1N0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHIsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBjb21tYW5kcyB9ID0gbmV3IENvbW1hbmRNYW5hZ2VyKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yOiB0aGlzLmVkaXRvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZHMuY2xlYXJOb2RlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdHIuc3RlcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5jb25zdCBUYWJpbmRleCA9IEV4dGVuc2lvbi5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ3RhYmluZGV4JyxcclxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBuZXcgUGx1Z2luKHtcclxuICAgICAgICAgICAgICAgIGtleTogbmV3IFBsdWdpbktleSgndGFiaW5kZXgnKSxcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdGhpcy5lZGl0b3IuaXNFZGl0YWJsZSA/IHsgdGFiaW5kZXg6ICcwJyB9IDoge30sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbnZhciBleHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIENsaXBib2FyZFRleHRTZXJpYWxpemVyOiBDbGlwYm9hcmRUZXh0U2VyaWFsaXplcixcbiAgQ29tbWFuZHM6IENvbW1hbmRzLFxuICBFZGl0YWJsZTogRWRpdGFibGUsXG4gIEZvY3VzRXZlbnRzOiBGb2N1c0V2ZW50cyxcbiAgS2V5bWFwOiBLZXltYXAsXG4gIFRhYmluZGV4OiBUYWJpbmRleFxufSk7XG5cbmNvbnN0IHN0eWxlID0gYC5Qcm9zZU1pcnJvciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLlByb3NlTWlycm9yIHtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gIHdoaXRlLXNwYWNlOiBicmVhay1zcGFjZXM7XG4gIC13ZWJraXQtZm9udC12YXJpYW50LWxpZ2F0dXJlczogbm9uZTtcbiAgZm9udC12YXJpYW50LWxpZ2F0dXJlczogbm9uZTtcbiAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBcImxpZ2FcIiAwOyAvKiB0aGUgYWJvdmUgZG9lc24ndCBzZWVtIHRvIHdvcmsgaW4gRWRnZSAqL1xufVxuXG4uUHJvc2VNaXJyb3IgW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdIHtcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbn1cblxuLlByb3NlTWlycm9yIFtjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiXSBbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXSB7XG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbn1cblxuLlByb3NlTWlycm9yIHByZSB7XG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbn1cblxuaW1nLlByb3NlTWlycm9yLXNlcGFyYXRvciB7XG4gIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xuICBib3JkZXI6IG5vbmUgIWltcG9ydGFudDtcbiAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XG4gIHdpZHRoOiAxcHggIWltcG9ydGFudDtcbiAgaGVpZ2h0OiAxcHggIWltcG9ydGFudDtcbn1cblxuLlByb3NlTWlycm9yLWdhcGN1cnNvciB7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIG1hcmdpbjogMDtcbn1cblxuLlByb3NlTWlycm9yLWdhcGN1cnNvcjphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTJweDtcbiAgd2lkdGg6IDIwcHg7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCBibGFjaztcbiAgYW5pbWF0aW9uOiBQcm9zZU1pcnJvci1jdXJzb3ItYmxpbmsgMS4xcyBzdGVwcygyLCBzdGFydCkgaW5maW5pdGU7XG59XG5cbkBrZXlmcmFtZXMgUHJvc2VNaXJyb3ItY3Vyc29yLWJsaW5rIHtcbiAgdG8ge1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxufVxuXG4uUHJvc2VNaXJyb3ItaGlkZXNlbGVjdGlvbiAqOjpzZWxlY3Rpb24ge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cblxuLlByb3NlTWlycm9yLWhpZGVzZWxlY3Rpb24gKjo6LW1vei1zZWxlY3Rpb24ge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cblxuLlByb3NlTWlycm9yLWhpZGVzZWxlY3Rpb24gKiB7XG4gIGNhcmV0LWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLlByb3NlTWlycm9yLWZvY3VzZWQgLlByb3NlTWlycm9yLWdhcGN1cnNvciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4udGlwcHktYm94W2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXSB7XG4gIG9wYWNpdHk6IDBcbn1gO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZVRhZyhzdHlsZSwgbm9uY2UsIHN1ZmZpeCkge1xyXG4gICAgY29uc3QgdGlwdGFwU3R5bGVUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBzdHlsZVtkYXRhLXRpcHRhcC1zdHlsZSR7c3VmZml4ID8gYC0ke3N1ZmZpeH1gIDogJyd9XWApO1xyXG4gICAgaWYgKHRpcHRhcFN0eWxlVGFnICE9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRpcHRhcFN0eWxlVGFnO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuICAgIGlmIChub25jZSkge1xyXG4gICAgICAgIHN0eWxlTm9kZS5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xyXG4gICAgfVxyXG4gICAgc3R5bGVOb2RlLnNldEF0dHJpYnV0ZShgZGF0YS10aXB0YXAtc3R5bGUke3N1ZmZpeCA/IGAtJHtzdWZmaXh9YCA6ICcnfWAsICcnKTtcclxuICAgIHN0eWxlTm9kZS5pbm5lckhUTUwgPSBzdHlsZTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcclxuICAgIHJldHVybiBzdHlsZU5vZGU7XHJcbn1cblxuY2xhc3MgRWRpdG9yIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmV4dGVuc2lvblN0b3JhZ2UgPSB7fTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxyXG4gICAgICAgICAgICBjb250ZW50OiAnJyxcclxuICAgICAgICAgICAgaW5qZWN0Q1NTOiB0cnVlLFxyXG4gICAgICAgICAgICBpbmplY3ROb25jZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBleHRlbnNpb25zOiBbXSxcclxuICAgICAgICAgICAgYXV0b2ZvY3VzOiBmYWxzZSxcclxuICAgICAgICAgICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVkaXRvclByb3BzOiB7fSxcclxuICAgICAgICAgICAgcGFyc2VPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgZW5hYmxlSW5wdXRSdWxlczogdHJ1ZSxcclxuICAgICAgICAgICAgZW5hYmxlUGFzdGVSdWxlczogdHJ1ZSxcclxuICAgICAgICAgICAgZW5hYmxlQ29yZUV4dGVuc2lvbnM6IHRydWUsXHJcbiAgICAgICAgICAgIG9uQmVmb3JlQ3JlYXRlOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBvbkNyZWF0ZTogKCkgPT4gbnVsbCxcclxuICAgICAgICAgICAgb25VcGRhdGU6ICgpID0+IG51bGwsXHJcbiAgICAgICAgICAgIG9uU2VsZWN0aW9uVXBkYXRlOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBvblRyYW5zYWN0aW9uOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBvbkZvY3VzOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBvbkJsdXI6ICgpID0+IG51bGwsXHJcbiAgICAgICAgICAgIG9uRGVzdHJveTogKCkgPT4gbnVsbCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaXNDYXB0dXJpbmdUcmFuc2FjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2FwdHVyZWRUcmFuc2FjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlRXh0ZW5zaW9uTWFuYWdlcigpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQ29tbWFuZE1hbmFnZXIoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVNjaGVtYSgpO1xyXG4gICAgICAgIHRoaXMub24oJ2JlZm9yZUNyZWF0ZScsIHRoaXMub3B0aW9ucy5vbkJlZm9yZUNyZWF0ZSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdiZWZvcmVDcmVhdGUnLCB7IGVkaXRvcjogdGhpcyB9KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVZpZXcoKTtcclxuICAgICAgICB0aGlzLmluamVjdENTUygpO1xyXG4gICAgICAgIHRoaXMub24oJ2NyZWF0ZScsIHRoaXMub3B0aW9ucy5vbkNyZWF0ZSk7XHJcbiAgICAgICAgdGhpcy5vbigndXBkYXRlJywgdGhpcy5vcHRpb25zLm9uVXBkYXRlKTtcclxuICAgICAgICB0aGlzLm9uKCdzZWxlY3Rpb25VcGRhdGUnLCB0aGlzLm9wdGlvbnMub25TZWxlY3Rpb25VcGRhdGUpO1xyXG4gICAgICAgIHRoaXMub24oJ3RyYW5zYWN0aW9uJywgdGhpcy5vcHRpb25zLm9uVHJhbnNhY3Rpb24pO1xyXG4gICAgICAgIHRoaXMub24oJ2ZvY3VzJywgdGhpcy5vcHRpb25zLm9uRm9jdXMpO1xyXG4gICAgICAgIHRoaXMub24oJ2JsdXInLCB0aGlzLm9wdGlvbnMub25CbHVyKTtcclxuICAgICAgICB0aGlzLm9uKCdkZXN0cm95JywgdGhpcy5vcHRpb25zLm9uRGVzdHJveSk7XHJcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Rlc3Ryb3llZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZHMuZm9jdXModGhpcy5vcHRpb25zLmF1dG9mb2N1cyk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY3JlYXRlJywgeyBlZGl0b3I6IHRoaXMgfSk7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGVkaXRvciBzdG9yYWdlLlxyXG4gICAgICovXHJcbiAgICBnZXQgc3RvcmFnZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25TdG9yYWdlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvYmplY3Qgb2YgYWxsIHJlZ2lzdGVyZWQgY29tbWFuZHMuXHJcbiAgICAgKi9cclxuICAgIGdldCBjb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kTWFuYWdlci5jb21tYW5kcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgY29tbWFuZCBjaGFpbiB0byBjYWxsIG11bHRpcGxlIGNvbW1hbmRzIGF0IG9uY2UuXHJcbiAgICAgKi9cclxuICAgIGNoYWluKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRNYW5hZ2VyLmNoYWluKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGEgY29tbWFuZCBvciBhIGNvbW1hbmQgY2hhaW4gY2FuIGJlIGV4ZWN1dGVkLiBXaXRob3V0IGV4ZWN1dGluZyBpdC5cclxuICAgICAqL1xyXG4gICAgY2FuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRNYW5hZ2VyLmNhbigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmplY3QgQ1NTIHN0eWxlcy5cclxuICAgICAqL1xyXG4gICAgaW5qZWN0Q1NTKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5qZWN0Q1NTICYmIGRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3NzID0gY3JlYXRlU3R5bGVUYWcoc3R5bGUsIHRoaXMub3B0aW9ucy5pbmplY3ROb25jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgZWRpdG9yIG9wdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBsaXN0IG9mIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgc2V0T3B0aW9ucyhvcHRpb25zID0ge30pIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghdGhpcy52aWV3IHx8ICF0aGlzLnN0YXRlIHx8IHRoaXMuaXNEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVkaXRvclByb3BzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlldy5zZXRQcm9wcyh0aGlzLm9wdGlvbnMuZWRpdG9yUHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZpZXcudXBkYXRlU3RhdGUodGhpcy5zdGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBlZGl0YWJsZSBzdGF0ZSBvZiB0aGUgZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICBzZXRFZGl0YWJsZShlZGl0YWJsZSwgZW1pdFVwZGF0ZSA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLnNldE9wdGlvbnMoeyBlZGl0YWJsZSB9KTtcclxuICAgICAgICBpZiAoZW1pdFVwZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHsgZWRpdG9yOiB0aGlzLCB0cmFuc2FjdGlvbjogdGhpcy5zdGF0ZS50ciB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgZWRpdG9yIGlzIGVkaXRhYmxlLlxyXG4gICAgICovXHJcbiAgICBnZXQgaXNFZGl0YWJsZSgpIHtcclxuICAgICAgICAvLyBzaW5jZSBwbHVnaW5zIGFyZSBhcHBsaWVkIGFmdGVyIGNyZWF0aW5nIHRoZSB2aWV3XHJcbiAgICAgICAgLy8gYGVkaXRhYmxlYCBpcyBhbHdheXMgYHRydWVgIGZvciBvbmUgdGljay5cclxuICAgICAgICAvLyB0aGF04oCZcyB3aHkgd2UgYWxzbyBoYXZlIHRvIGNoZWNrIGZvciBgb3B0aW9ucy5lZGl0YWJsZWBcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmVkaXRhYmxlICYmIHRoaXMudmlldyAmJiB0aGlzLnZpZXcuZWRpdGFibGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGVkaXRvciBzdGF0ZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IHN0YXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuc3RhdGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgUHJvc2VNaXJyb3IgcGx1Z2luLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwbHVnaW4gQSBQcm9zZU1pcnJvciBwbHVnaW5cclxuICAgICAqIEBwYXJhbSBoYW5kbGVQbHVnaW5zIENvbnRyb2wgaG93IHRvIG1lcmdlIHRoZSBwbHVnaW4gaW50byB0aGUgZXhpc3RpbmcgcGx1Z2lucy5cclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJQbHVnaW4ocGx1Z2luLCBoYW5kbGVQbHVnaW5zKSB7XHJcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IGlzRnVuY3Rpb24oaGFuZGxlUGx1Z2lucylcclxuICAgICAgICAgICAgPyBoYW5kbGVQbHVnaW5zKHBsdWdpbiwgWy4uLnRoaXMuc3RhdGUucGx1Z2luc10pXHJcbiAgICAgICAgICAgIDogWy4uLnRoaXMuc3RhdGUucGx1Z2lucywgcGx1Z2luXTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGUucmVjb25maWd1cmUoeyBwbHVnaW5zIH0pO1xyXG4gICAgICAgIHRoaXMudmlldy51cGRhdGVTdGF0ZShzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXIgYSBQcm9zZU1pcnJvciBwbHVnaW4uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWVPclBsdWdpbktleSBUaGUgcGx1Z2lucyBuYW1lXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJQbHVnaW4obmFtZU9yUGx1Z2luS2V5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgY29uc3QgbmFtZSA9IHR5cGVvZiBuYW1lT3JQbHVnaW5LZXkgPT09ICdzdHJpbmcnID8gYCR7bmFtZU9yUGx1Z2luS2V5fSRgIDogbmFtZU9yUGx1Z2luS2V5LmtleTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGUucmVjb25maWd1cmUoe1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHBsdWdpbnM6IHRoaXMuc3RhdGUucGx1Z2lucy5maWx0ZXIocGx1Z2luID0+ICFwbHVnaW4ua2V5LnN0YXJ0c1dpdGgobmFtZSkpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudmlldy51cGRhdGVTdGF0ZShzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gZXh0ZW5zaW9uIG1hbmFnZXIuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUV4dGVuc2lvbk1hbmFnZXIoKSB7XHJcbiAgICAgICAgY29uc3QgY29yZUV4dGVuc2lvbnMgPSB0aGlzLm9wdGlvbnMuZW5hYmxlQ29yZUV4dGVuc2lvbnMgPyBPYmplY3QudmFsdWVzKGV4dGVuc2lvbnMpIDogW107XHJcbiAgICAgICAgY29uc3QgYWxsRXh0ZW5zaW9ucyA9IFsuLi5jb3JlRXh0ZW5zaW9ucywgLi4udGhpcy5vcHRpb25zLmV4dGVuc2lvbnNdLmZpbHRlcihleHRlbnNpb24gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gWydleHRlbnNpb24nLCAnbm9kZScsICdtYXJrJ10uaW5jbHVkZXMoZXh0ZW5zaW9uID09PSBudWxsIHx8IGV4dGVuc2lvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXh0ZW5zaW9uLnR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uTWFuYWdlciA9IG5ldyBFeHRlbnNpb25NYW5hZ2VyKGFsbEV4dGVuc2lvbnMsIHRoaXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGNvbW1hbmQgbWFuYWdlci5cclxuICAgICAqL1xyXG4gICAgY3JlYXRlQ29tbWFuZE1hbmFnZXIoKSB7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kTWFuYWdlciA9IG5ldyBDb21tYW5kTWFuYWdlcih7XHJcbiAgICAgICAgICAgIGVkaXRvcjogdGhpcyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIFByb3NlTWlycm9yIHNjaGVtYS5cclxuICAgICAqL1xyXG4gICAgY3JlYXRlU2NoZW1hKCkge1xyXG4gICAgICAgIHRoaXMuc2NoZW1hID0gdGhpcy5leHRlbnNpb25NYW5hZ2VyLnNjaGVtYTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIFByb3NlTWlycm9yIHZpZXcuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVZpZXcoKSB7XHJcbiAgICAgICAgY29uc3QgZG9jID0gY3JlYXRlRG9jdW1lbnQodGhpcy5vcHRpb25zLmNvbnRlbnQsIHRoaXMuc2NoZW1hLCB0aGlzLm9wdGlvbnMucGFyc2VPcHRpb25zKTtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSByZXNvbHZlRm9jdXNQb3NpdGlvbihkb2MsIHRoaXMub3B0aW9ucy5hdXRvZm9jdXMpO1xyXG4gICAgICAgIHRoaXMudmlldyA9IG5ldyBFZGl0b3JWaWV3KHRoaXMub3B0aW9ucy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucy5lZGl0b3JQcm9wcyxcclxuICAgICAgICAgICAgZGlzcGF0Y2hUcmFuc2FjdGlvbjogdGhpcy5kaXNwYXRjaFRyYW5zYWN0aW9uLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHN0YXRlOiBFZGl0b3JTdGF0ZS5jcmVhdGUoe1xyXG4gICAgICAgICAgICAgICAgZG9jLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24gfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBgZWRpdG9yLnZpZXdgIGlzIG5vdCB5ZXQgYXZhaWxhYmxlIGF0IHRoaXMgdGltZS5cclxuICAgICAgICAvLyBUaGVyZWZvcmUgd2Ugd2lsbCBhZGQgYWxsIHBsdWdpbnMgYW5kIG5vZGUgdmlld3MgZGlyZWN0bHkgYWZ0ZXJ3YXJkcy5cclxuICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHRoaXMuc3RhdGUucmVjb25maWd1cmUoe1xyXG4gICAgICAgICAgICBwbHVnaW5zOiB0aGlzLmV4dGVuc2lvbk1hbmFnZXIucGx1Z2lucyxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnZpZXcudXBkYXRlU3RhdGUobmV3U3RhdGUpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlTm9kZVZpZXdzKCk7XHJcbiAgICAgICAgdGhpcy5wcmVwZW5kQ2xhc3MoKTtcclxuICAgICAgICAvLyBMZXTigJlzIHN0b3JlIHRoZSBlZGl0b3IgaW5zdGFuY2UgaW4gdGhlIERPTSBlbGVtZW50LlxyXG4gICAgICAgIC8vIFNvIHdl4oCZbGwgaGF2ZSBhY2Nlc3MgdG8gaXQgZm9yIHRlc3RzLlxyXG4gICAgICAgIGNvbnN0IGRvbSA9IHRoaXMudmlldy5kb207XHJcbiAgICAgICAgZG9tLmVkaXRvciA9IHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYWxsIG5vZGUgdmlld3MuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZU5vZGVWaWV3cygpIHtcclxuICAgICAgICB0aGlzLnZpZXcuc2V0UHJvcHMoe1xyXG4gICAgICAgICAgICBub2RlVmlld3M6IHRoaXMuZXh0ZW5zaW9uTWFuYWdlci5ub2RlVmlld3MsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByZXBlbmQgY2xhc3MgbmFtZSB0byBlbGVtZW50LlxyXG4gICAgICovXHJcbiAgICBwcmVwZW5kQ2xhc3MoKSB7XHJcbiAgICAgICAgdGhpcy52aWV3LmRvbS5jbGFzc05hbWUgPSBgdGlwdGFwICR7dGhpcy52aWV3LmRvbS5jbGFzc05hbWV9YDtcclxuICAgIH1cclxuICAgIGNhcHR1cmVUcmFuc2FjdGlvbihmbikge1xyXG4gICAgICAgIHRoaXMuaXNDYXB0dXJpbmdUcmFuc2FjdGlvbiA9IHRydWU7XHJcbiAgICAgICAgZm4oKTtcclxuICAgICAgICB0aGlzLmlzQ2FwdHVyaW5nVHJhbnNhY3Rpb24gPSBmYWxzZTtcclxuICAgICAgICBjb25zdCB0ciA9IHRoaXMuY2FwdHVyZWRUcmFuc2FjdGlvbjtcclxuICAgICAgICB0aGlzLmNhcHR1cmVkVHJhbnNhY3Rpb24gPSBudWxsO1xyXG4gICAgICAgIHJldHVybiB0cjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGNhbGxiYWNrIG92ZXIgd2hpY2ggdG8gc2VuZCB0cmFuc2FjdGlvbnMgKHN0YXRlIHVwZGF0ZXMpIHByb2R1Y2VkIGJ5IHRoZSB2aWV3LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiBBbiBlZGl0b3Igc3RhdGUgdHJhbnNhY3Rpb25cclxuICAgICAqL1xyXG4gICAgZGlzcGF0Y2hUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xyXG4gICAgICAgIC8vIGlmIHRoZSBlZGl0b3IgLyB0aGUgdmlldyBvZiB0aGUgZWRpdG9yIHdhcyBkZXN0cm95ZWRcclxuICAgICAgICAvLyB0aGUgdHJhbnNhY3Rpb24gc2hvdWxkIG5vdCBiZSBkaXNwYXRjaGVkIGFzIHRoZXJlIGlzIG5vIHZpZXcgYW55bW9yZS5cclxuICAgICAgICBpZiAodGhpcy52aWV3LmlzRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDYXB0dXJpbmdUcmFuc2FjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY2FwdHVyZWRUcmFuc2FjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXB0dXJlZFRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb247XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJhbnNhY3Rpb24uc3RlcHMuZm9yRWFjaChzdGVwID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gdGhpcy5jYXB0dXJlZFRyYW5zYWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RlcChzdGVwKTsgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlLmFwcGx5KHRyYW5zYWN0aW9uKTtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb25IYXNDaGFuZ2VkID0gIXRoaXMuc3RhdGUuc2VsZWN0aW9uLmVxKHN0YXRlLnNlbGVjdGlvbik7XHJcbiAgICAgICAgdGhpcy52aWV3LnVwZGF0ZVN0YXRlKHN0YXRlKTtcclxuICAgICAgICB0aGlzLmVtaXQoJ3RyYW5zYWN0aW9uJywge1xyXG4gICAgICAgICAgICBlZGl0b3I6IHRoaXMsXHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChzZWxlY3Rpb25IYXNDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnc2VsZWN0aW9uVXBkYXRlJywge1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmb2N1cyA9IHRyYW5zYWN0aW9uLmdldE1ldGEoJ2ZvY3VzJyk7XHJcbiAgICAgICAgY29uc3QgYmx1ciA9IHRyYW5zYWN0aW9uLmdldE1ldGEoJ2JsdXInKTtcclxuICAgICAgICBpZiAoZm9jdXMpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdmb2N1cycsIHtcclxuICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcyxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiBmb2N1cy5ldmVudCxcclxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJsdXIpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdibHVyJywge1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IGJsdXIuZXZlbnQsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdHJhbnNhY3Rpb24uZG9jQ2hhbmdlZCB8fCB0cmFuc2FjdGlvbi5nZXRNZXRhKCdwcmV2ZW50VXBkYXRlJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHtcclxuICAgICAgICAgICAgZWRpdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGF0dHJpYnV0ZXMgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBub2RlIG9yIG1hcmsuXHJcbiAgICAgKi9cclxuICAgIGdldEF0dHJpYnV0ZXMobmFtZU9yVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBnZXRBdHRyaWJ1dGVzKHRoaXMuc3RhdGUsIG5hbWVPclR5cGUpO1xyXG4gICAgfVxyXG4gICAgaXNBY3RpdmUobmFtZU9yQXR0cmlidXRlcywgYXR0cmlidXRlc09yVW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IHR5cGVvZiBuYW1lT3JBdHRyaWJ1dGVzID09PSAnc3RyaW5nJyA/IG5hbWVPckF0dHJpYnV0ZXMgOiBudWxsO1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB0eXBlb2YgbmFtZU9yQXR0cmlidXRlcyA9PT0gJ3N0cmluZycgPyBhdHRyaWJ1dGVzT3JVbmRlZmluZWQgOiBuYW1lT3JBdHRyaWJ1dGVzO1xyXG4gICAgICAgIHJldHVybiBpc0FjdGl2ZSh0aGlzLnN0YXRlLCBuYW1lLCBhdHRyaWJ1dGVzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBkb2N1bWVudCBhcyBKU09OLlxyXG4gICAgICovXHJcbiAgICBnZXRKU09OKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmRvYy50b0pTT04oKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBkb2N1bWVudCBhcyBIVE1MLlxyXG4gICAgICovXHJcbiAgICBnZXRIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBnZXRIVE1MRnJvbUZyYWdtZW50KHRoaXMuc3RhdGUuZG9jLmNvbnRlbnQsIHRoaXMuc2NoZW1hKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBkb2N1bWVudCBhcyB0ZXh0LlxyXG4gICAgICovXHJcbiAgICBnZXRUZXh0KG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCB7IGJsb2NrU2VwYXJhdG9yID0gJ1xcblxcbicsIHRleHRTZXJpYWxpemVycyA9IHt9IH0gPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgICAgIHJldHVybiBnZXRUZXh0KHRoaXMuc3RhdGUuZG9jLCB7XHJcbiAgICAgICAgICAgIGJsb2NrU2VwYXJhdG9yLFxyXG4gICAgICAgICAgICB0ZXh0U2VyaWFsaXplcnM6IHtcclxuICAgICAgICAgICAgICAgIC4uLmdldFRleHRTZXJpYWxpemVyc0Zyb21TY2hlbWEodGhpcy5zY2hlbWEpLFxyXG4gICAgICAgICAgICAgICAgLi4udGV4dFNlcmlhbGl6ZXJzLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiB0aGVyZSBpcyBubyBjb250ZW50LlxyXG4gICAgICovXHJcbiAgICBnZXQgaXNFbXB0eSgpIHtcclxuICAgICAgICByZXR1cm4gaXNOb2RlRW1wdHkodGhpcy5zdGF0ZS5kb2MpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGZvciB0aGUgY3VycmVudCBkb2N1bWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICovXHJcbiAgICBnZXRDaGFyYWN0ZXJDb3VudCgpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1t0aXB0YXAgd2Fybl06IFwiZWRpdG9yLmdldENoYXJhY3RlckNvdW50KClcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiZWRpdG9yLnN0b3JhZ2UuY2hhcmFjdGVyQ291bnQuY2hhcmFjdGVycygpXCIgaW5zdGVhZC4nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5kb2MuY29udGVudC5zaXplIC0gMjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGVzdHJveSB0aGUgZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuZW1pdCgnZGVzdHJveScpO1xyXG4gICAgICAgIGlmICh0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3LmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgdGhlIGVkaXRvciBpcyBhbHJlYWR5IGRlc3Ryb3llZC5cclxuICAgICAqL1xyXG4gICAgZ2V0IGlzRGVzdHJveWVkKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmV0dXJuICEoKF9hID0gdGhpcy52aWV3KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZG9jVmlldyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEJ1aWxkIGFuIGlucHV0IHJ1bGUgdGhhdCBhZGRzIGEgbWFyayB3aGVuIHRoZVxyXG4gKiBtYXRjaGVkIHRleHQgaXMgdHlwZWQgaW50byBpdC5cclxuICovXHJcbmZ1bmN0aW9uIG1hcmtJbnB1dFJ1bGUoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IElucHV0UnVsZSh7XHJcbiAgICAgICAgZmluZDogY29uZmlnLmZpbmQsXHJcbiAgICAgICAgaGFuZGxlcjogKHsgc3RhdGUsIHJhbmdlLCBtYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjYWxsT3JSZXR1cm4oY29uZmlnLmdldEF0dHJpYnV0ZXMsIHVuZGVmaW5lZCwgbWF0Y2gpO1xyXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcyA9PT0gZmFsc2UgfHwgYXR0cmlidXRlcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgeyB0ciB9ID0gc3RhdGU7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcHR1cmVHcm91cCA9IG1hdGNoW21hdGNoLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBjb25zdCBmdWxsTWF0Y2ggPSBtYXRjaFswXTtcclxuICAgICAgICAgICAgaWYgKGNhcHR1cmVHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRTcGFjZXMgPSBmdWxsTWF0Y2guc2VhcmNoKC9cXFMvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRTdGFydCA9IHJhbmdlLmZyb20gKyBmdWxsTWF0Y2guaW5kZXhPZihjYXB0dXJlR3JvdXApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dEVuZCA9IHRleHRTdGFydCArIGNhcHR1cmVHcm91cC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleGNsdWRlZE1hcmtzID0gZ2V0TWFya3NCZXR3ZWVuKHJhbmdlLmZyb20sIHJhbmdlLnRvLCBzdGF0ZS5kb2MpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhjbHVkZWQgPSBpdGVtLm1hcmsudHlwZS5leGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhjbHVkZWQuZmluZCh0eXBlID0+IHR5cGUgPT09IGNvbmZpZy50eXBlICYmIHR5cGUgIT09IGl0ZW0ubWFyay50eXBlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0udG8gPiB0ZXh0U3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVkTWFya3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGV4dEVuZCA8IHJhbmdlLnRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuZGVsZXRlKHRleHRFbmQsIHJhbmdlLnRvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0ZXh0U3RhcnQgPiByYW5nZS5mcm9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuZGVsZXRlKHJhbmdlLmZyb20gKyBzdGFydFNwYWNlcywgdGV4dFN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtFbmQgPSByYW5nZS5mcm9tICsgc3RhcnRTcGFjZXMgKyBjYXB0dXJlR3JvdXAubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdHIuYWRkTWFyayhyYW5nZS5mcm9tICsgc3RhcnRTcGFjZXMsIG1hcmtFbmQsIGNvbmZpZy50eXBlLmNyZWF0ZShhdHRyaWJ1dGVzIHx8IHt9KSk7XHJcbiAgICAgICAgICAgICAgICB0ci5yZW1vdmVTdG9yZWRNYXJrKGNvbmZpZy50eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gaW5wdXQgcnVsZSB0aGF0IGFkZHMgYSBub2RlIHdoZW4gdGhlXHJcbiAqIG1hdGNoZWQgdGV4dCBpcyB0eXBlZCBpbnRvIGl0LlxyXG4gKi9cclxuZnVuY3Rpb24gbm9kZUlucHV0UnVsZShjb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgSW5wdXRSdWxlKHtcclxuICAgICAgICBmaW5kOiBjb25maWcuZmluZCxcclxuICAgICAgICBoYW5kbGVyOiAoeyBzdGF0ZSwgcmFuZ2UsIG1hdGNoIH0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNhbGxPclJldHVybihjb25maWcuZ2V0QXR0cmlidXRlcywgdW5kZWZpbmVkLCBtYXRjaCkgfHwge307XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdHIgfSA9IHN0YXRlO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHJhbmdlLmZyb207XHJcbiAgICAgICAgICAgIGxldCBlbmQgPSByYW5nZS50bztcclxuICAgICAgICAgICAgY29uc3QgbmV3Tm9kZSA9IGNvbmZpZy50eXBlLmNyZWF0ZShhdHRyaWJ1dGVzKTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBtYXRjaFswXS5sYXN0SW5kZXhPZihtYXRjaFsxXSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2hTdGFydCA9IHN0YXJ0ICsgb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoU3RhcnQgPiBlbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaFN0YXJ0ID0gZW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gbWF0Y2hTdGFydCArIG1hdGNoWzFdLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGluc2VydCBsYXN0IHR5cGVkIGNoYXJhY3RlclxyXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdENoYXIgPSBtYXRjaFswXVttYXRjaFswXS5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIHRyLmluc2VydFRleHQobGFzdENoYXIsIHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnQgbm9kZSBmcm9tIGlucHV0IHJ1bGVcclxuICAgICAgICAgICAgICAgIHRyLnJlcGxhY2VXaXRoKG1hdGNoU3RhcnQsIGVuZCwgbmV3Tm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobWF0Y2hbMF0pIHtcclxuICAgICAgICAgICAgICAgIHRyLmluc2VydChzdGFydCAtIDEsIGNvbmZpZy50eXBlLmNyZWF0ZShhdHRyaWJ1dGVzKSkuZGVsZXRlKHRyLm1hcHBpbmcubWFwKHN0YXJ0KSwgdHIubWFwcGluZy5tYXAoZW5kKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHIuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEJ1aWxkIGFuIGlucHV0IHJ1bGUgdGhhdCBjaGFuZ2VzIHRoZSB0eXBlIG9mIGEgdGV4dGJsb2NrIHdoZW4gdGhlXHJcbiAqIG1hdGNoZWQgdGV4dCBpcyB0eXBlZCBpbnRvIGl0LiBXaGVuIHVzaW5nIGEgcmVndWxhciBleHByZXNpb24geW914oCZbGxcclxuICogcHJvYmFibHkgd2FudCB0aGUgcmVnZXhwIHRvIHN0YXJ0IHdpdGggYF5gLCBzbyB0aGF0IHRoZSBwYXR0ZXJuIGNhblxyXG4gKiBvbmx5IG9jY3VyIGF0IHRoZSBzdGFydCBvZiBhIHRleHRibG9jay5cclxuICovXHJcbmZ1bmN0aW9uIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IElucHV0UnVsZSh7XHJcbiAgICAgICAgZmluZDogY29uZmlnLmZpbmQsXHJcbiAgICAgICAgaGFuZGxlcjogKHsgc3RhdGUsIHJhbmdlLCBtYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0ICRzdGFydCA9IHN0YXRlLmRvYy5yZXNvbHZlKHJhbmdlLmZyb20pO1xyXG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gY2FsbE9yUmV0dXJuKGNvbmZpZy5nZXRBdHRyaWJ1dGVzLCB1bmRlZmluZWQsIG1hdGNoKSB8fCB7fTtcclxuICAgICAgICAgICAgaWYgKCEkc3RhcnQubm9kZSgtMSkuY2FuUmVwbGFjZVdpdGgoJHN0YXJ0LmluZGV4KC0xKSwgJHN0YXJ0LmluZGV4QWZ0ZXIoLTEpLCBjb25maWcudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLnRyXHJcbiAgICAgICAgICAgICAgICAuZGVsZXRlKHJhbmdlLmZyb20sIHJhbmdlLnRvKVxyXG4gICAgICAgICAgICAgICAgLnNldEJsb2NrVHlwZShyYW5nZS5mcm9tLCByYW5nZS5mcm9tLCBjb25maWcudHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBCdWlsZCBhbiBpbnB1dCBydWxlIHRoYXQgcmVwbGFjZXMgdGV4dCB3aGVuIHRoZVxyXG4gKiBtYXRjaGVkIHRleHQgaXMgdHlwZWQgaW50byBpdC5cclxuICovXHJcbmZ1bmN0aW9uIHRleHRJbnB1dFJ1bGUoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IElucHV0UnVsZSh7XHJcbiAgICAgICAgZmluZDogY29uZmlnLmZpbmQsXHJcbiAgICAgICAgaGFuZGxlcjogKHsgc3RhdGUsIHJhbmdlLCBtYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpbnNlcnQgPSBjb25maWcucmVwbGFjZTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gcmFuZ2UuZnJvbTtcclxuICAgICAgICAgICAgY29uc3QgZW5kID0gcmFuZ2UudG87XHJcbiAgICAgICAgICAgIGlmIChtYXRjaFsxXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbWF0Y2hbMF0ubGFzdEluZGV4T2YobWF0Y2hbMV0pO1xyXG4gICAgICAgICAgICAgICAgaW5zZXJ0ICs9IG1hdGNoWzBdLnNsaWNlKG9mZnNldCArIG1hdGNoWzFdLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBzdGFydCArPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXRPZmYgPSBzdGFydCAtIGVuZDtcclxuICAgICAgICAgICAgICAgIGlmIChjdXRPZmYgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gbWF0Y2hbMF0uc2xpY2Uob2Zmc2V0IC0gY3V0T2ZmLCBvZmZzZXQpICsgaW5zZXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gZW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLnRyLmluc2VydFRleHQoaW5zZXJ0LCBzdGFydCwgZW5kKTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEJ1aWxkIGFuIGlucHV0IHJ1bGUgZm9yIGF1dG9tYXRpY2FsbHkgd3JhcHBpbmcgYSB0ZXh0YmxvY2sgd2hlbiBhXHJcbiAqIGdpdmVuIHN0cmluZyBpcyB0eXBlZC4gV2hlbiB1c2luZyBhIHJlZ3VsYXIgZXhwcmVzaW9uIHlvdeKAmWxsXHJcbiAqIHByb2JhYmx5IHdhbnQgdGhlIHJlZ2V4cCB0byBzdGFydCB3aXRoIGBeYCwgc28gdGhhdCB0aGUgcGF0dGVybiBjYW5cclxuICogb25seSBvY2N1ciBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2suXHJcbiAqXHJcbiAqIGB0eXBlYCBpcyB0aGUgdHlwZSBvZiBub2RlIHRvIHdyYXAgaW4uXHJcbiAqXHJcbiAqIEJ5IGRlZmF1bHQsIGlmIHRoZXJl4oCZcyBhIG5vZGUgd2l0aCB0aGUgc2FtZSB0eXBlIGFib3ZlIHRoZSBuZXdseVxyXG4gKiB3cmFwcGVkIG5vZGUsIHRoZSBydWxlIHdpbGwgdHJ5IHRvIGpvaW4gdGhvc2VcclxuICogdHdvIG5vZGVzLiBZb3UgY2FuIHBhc3MgYSBqb2luIHByZWRpY2F0ZSwgd2hpY2ggdGFrZXMgYSByZWd1bGFyXHJcbiAqIGV4cHJlc3Npb24gbWF0Y2ggYW5kIHRoZSBub2RlIGJlZm9yZSB0aGUgd3JhcHBlZCBub2RlLCBhbmQgY2FuXHJcbiAqIHJldHVybiBhIGJvb2xlYW4gdG8gaW5kaWNhdGUgd2hldGhlciBhIGpvaW4gc2hvdWxkIGhhcHBlbi5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBwaW5nSW5wdXRSdWxlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIG5ldyBJbnB1dFJ1bGUoe1xyXG4gICAgICAgIGZpbmQ6IGNvbmZpZy5maW5kLFxyXG4gICAgICAgIGhhbmRsZXI6ICh7IHN0YXRlLCByYW5nZSwgbWF0Y2gsIGNoYWluLCB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjYWxsT3JSZXR1cm4oY29uZmlnLmdldEF0dHJpYnV0ZXMsIHVuZGVmaW5lZCwgbWF0Y2gpIHx8IHt9O1xyXG4gICAgICAgICAgICBjb25zdCB0ciA9IHN0YXRlLnRyLmRlbGV0ZShyYW5nZS5mcm9tLCByYW5nZS50byk7XHJcbiAgICAgICAgICAgIGNvbnN0ICRzdGFydCA9IHRyLmRvYy5yZXNvbHZlKHJhbmdlLmZyb20pO1xyXG4gICAgICAgICAgICBjb25zdCBibG9ja1JhbmdlID0gJHN0YXJ0LmJsb2NrUmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3Qgd3JhcHBpbmcgPSBibG9ja1JhbmdlICYmIGZpbmRXcmFwcGluZyhibG9ja1JhbmdlLCBjb25maWcudHlwZSwgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIGlmICghd3JhcHBpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyLndyYXAoYmxvY2tSYW5nZSwgd3JhcHBpbmcpO1xyXG4gICAgICAgICAgICBpZiAoY29uZmlnLmtlZXBNYXJrcyAmJiBjb25maWcuZWRpdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNlbGVjdGlvbiwgc3RvcmVkTWFya3MgfSA9IHN0YXRlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBzcGxpdHRhYmxlTWFya3MgfSA9IGNvbmZpZy5lZGl0b3IuZXh0ZW5zaW9uTWFuYWdlcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtzID0gc3RvcmVkTWFya3MgfHwgKHNlbGVjdGlvbi4kdG8ucGFyZW50T2Zmc2V0ICYmIHNlbGVjdGlvbi4kZnJvbS5tYXJrcygpKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXJrcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkTWFya3MgPSBtYXJrcy5maWx0ZXIobWFyayA9PiBzcGxpdHRhYmxlTWFya3MuaW5jbHVkZXMobWFyay50eXBlLm5hbWUpKTtcclxuICAgICAgICAgICAgICAgICAgICB0ci5lbnN1cmVNYXJrcyhmaWx0ZXJlZE1hcmtzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29uZmlnLmtlZXBBdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAvKiogSWYgdGhlIG5vZGVUeXBlIGlzIGBidWxsZXRMaXN0YCBvciBgb3JkZXJlZExpc3RgIHNldCB0aGUgYG5vZGVUeXBlYCBhcyBgbGlzdEl0ZW1gICovXHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlVHlwZSA9IGNvbmZpZy50eXBlLm5hbWUgPT09ICdidWxsZXRMaXN0JyB8fCBjb25maWcudHlwZS5uYW1lID09PSAnb3JkZXJlZExpc3QnID8gJ2xpc3RJdGVtJyA6ICd0YXNrTGlzdCc7XHJcbiAgICAgICAgICAgICAgICBjaGFpbigpLnVwZGF0ZUF0dHJpYnV0ZXMobm9kZVR5cGUsIGF0dHJpYnV0ZXMpLnJ1bigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IHRyLmRvYy5yZXNvbHZlKHJhbmdlLmZyb20gLSAxKS5ub2RlQmVmb3JlO1xyXG4gICAgICAgICAgICBpZiAoYmVmb3JlXHJcbiAgICAgICAgICAgICAgICAmJiBiZWZvcmUudHlwZSA9PT0gY29uZmlnLnR5cGVcclxuICAgICAgICAgICAgICAgICYmIGNhbkpvaW4odHIuZG9jLCByYW5nZS5mcm9tIC0gMSlcclxuICAgICAgICAgICAgICAgICYmICghY29uZmlnLmpvaW5QcmVkaWNhdGUgfHwgY29uZmlnLmpvaW5QcmVkaWNhdGUobWF0Y2gsIGJlZm9yZSkpKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5qb2luKHJhbmdlLmZyb20gLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxuXG5jbGFzcyBNYXJrIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gJ21hcmsnO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdtYXJrJztcclxuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jaGlsZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgZGVmYXVsdE9wdGlvbnM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgICAuLi5jb25maWcsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbmZpZy5uYW1lO1xyXG4gICAgICAgIGlmIChjb25maWcuZGVmYXVsdE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbdGlwdGFwIHdhcm5dOiBCUkVBS0lORyBDSEFOR0U6IFwiZGVmYXVsdE9wdGlvbnNcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiYWRkT3B0aW9uc1wiIGluc3RlYWQuIEZvdW5kIGluIGV4dGVuc2lvbjogXCIke3RoaXMubmFtZX1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIGBhZGRPcHRpb25zYCBmYWxsYmFja1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuY29uZmlnLmRlZmF1bHRPcHRpb25zO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hZGRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZCh0aGlzLCAnYWRkT3B0aW9ucycsIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQodGhpcywgJ2FkZFN0b3JhZ2UnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxyXG4gICAgICAgIH0pKSB8fCB7fTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjcmVhdGUoY29uZmlnID0ge30pIHtcclxuICAgICAgICByZXR1cm4gbmV3IE1hcmsoY29uZmlnKTtcclxuICAgIH1cclxuICAgIGNvbmZpZ3VyZShvcHRpb25zID0ge30pIHtcclxuICAgICAgICAvLyByZXR1cm4gYSBuZXcgaW5zdGFuY2Ugc28gd2UgY2FuIHVzZSB0aGUgc2FtZSBleHRlbnNpb25cclxuICAgICAgICAvLyB3aXRoIGRpZmZlcmVudCBjYWxscyBvZiBgY29uZmlndXJlYFxyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuZXh0ZW5kKCk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLm9wdGlvbnMgPSBtZXJnZURlZXAodGhpcy5vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICBleHRlbnNpb24uc3RvcmFnZSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiBleHRlbnNpb247XHJcbiAgICB9XHJcbiAgICBleHRlbmQoZXh0ZW5kZWRDb25maWcgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IG5ldyBNYXJrKGV4dGVuZGVkQ29uZmlnKTtcclxuICAgICAgICBleHRlbnNpb24ucGFyZW50ID0gdGhpcztcclxuICAgICAgICB0aGlzLmNoaWxkID0gZXh0ZW5zaW9uO1xyXG4gICAgICAgIGV4dGVuc2lvbi5uYW1lID0gZXh0ZW5kZWRDb25maWcubmFtZSA/IGV4dGVuZGVkQ29uZmlnLm5hbWUgOiBleHRlbnNpb24ucGFyZW50Lm5hbWU7XHJcbiAgICAgICAgaWYgKGV4dGVuZGVkQ29uZmlnLmRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW3RpcHRhcCB3YXJuXTogQlJFQUtJTkcgQ0hBTkdFOiBcImRlZmF1bHRPcHRpb25zXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcImFkZE9wdGlvbnNcIiBpbnN0ZWFkLiBGb3VuZCBpbiBleHRlbnNpb246IFwiJHtleHRlbnNpb24ubmFtZX1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXh0ZW5zaW9uLm9wdGlvbnMgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkT3B0aW9ucycsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5zdG9yYWdlID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZFN0b3JhZ2UnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBoYW5kbGVFeGl0KHsgZWRpdG9yLCBtYXJrIH0pIHtcclxuICAgICAgICBjb25zdCB7IHRyIH0gPSBlZGl0b3Iuc3RhdGU7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IGVkaXRvci5zdGF0ZS5zZWxlY3Rpb24uJGZyb207XHJcbiAgICAgICAgY29uc3QgaXNBdEVuZCA9IGN1cnJlbnRQb3MucG9zID09PSBjdXJyZW50UG9zLmVuZCgpO1xyXG4gICAgICAgIGlmIChpc0F0RW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNYXJrcyA9IGN1cnJlbnRQb3MubWFya3MoKTtcclxuICAgICAgICAgICAgY29uc3QgaXNJbk1hcmsgPSAhIWN1cnJlbnRNYXJrcy5maW5kKG0gPT4gKG0gPT09IG51bGwgfHwgbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbS50eXBlLm5hbWUpID09PSBtYXJrLm5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoIWlzSW5NYXJrKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcmVtb3ZlTWFyayA9IGN1cnJlbnRNYXJrcy5maW5kKG0gPT4gKG0gPT09IG51bGwgfHwgbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbS50eXBlLm5hbWUpID09PSBtYXJrLm5hbWUpO1xyXG4gICAgICAgICAgICBpZiAocmVtb3ZlTWFyaykge1xyXG4gICAgICAgICAgICAgICAgdHIucmVtb3ZlU3RvcmVkTWFyayhyZW1vdmVNYXJrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ci5pbnNlcnRUZXh0KCcgJywgY3VycmVudFBvcy5wb3MpO1xyXG4gICAgICAgICAgICBlZGl0b3Iudmlldy5kaXNwYXRjaCh0cik7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgTm9kZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9ICdub2RlJztcclxuICAgICAgICB0aGlzLm5hbWUgPSAnbm9kZSc7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hpbGQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25maWcubmFtZTtcclxuICAgICAgICBpZiAoY29uZmlnLmRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW3RpcHRhcCB3YXJuXTogQlJFQUtJTkcgQ0hBTkdFOiBcImRlZmF1bHRPcHRpb25zXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcImFkZE9wdGlvbnNcIiBpbnN0ZWFkLiBGb3VuZCBpbiBleHRlbnNpb246IFwiJHt0aGlzLm5hbWV9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSBgYWRkT3B0aW9uc2AgZmFsbGJhY2tcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNvbmZpZy5kZWZhdWx0T3B0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuYWRkT3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQodGhpcywgJ2FkZE9wdGlvbnMnLCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKHRoaXMsICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcclxuICAgICAgICB9KSkgfHwge307XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlKGNvbmZpZyA9IHt9KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBjb25maWd1cmUob3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIGEgbmV3IGluc3RhbmNlIHNvIHdlIGNhbiB1c2UgdGhlIHNhbWUgZXh0ZW5zaW9uXHJcbiAgICAgICAgLy8gd2l0aCBkaWZmZXJlbnQgY2FsbHMgb2YgYGNvbmZpZ3VyZWBcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSB0aGlzLmV4dGVuZCgpO1xyXG4gICAgICAgIGV4dGVuc2lvbi5vcHRpb25zID0gbWVyZ2VEZWVwKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLnN0b3JhZ2UgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWRkU3RvcmFnZScsIHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uO1xyXG4gICAgfVxyXG4gICAgZXh0ZW5kKGV4dGVuZGVkQ29uZmlnID0ge30pIHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSBuZXcgTm9kZShleHRlbmRlZENvbmZpZyk7XHJcbiAgICAgICAgZXh0ZW5zaW9uLnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jaGlsZCA9IGV4dGVuc2lvbjtcclxuICAgICAgICBleHRlbnNpb24ubmFtZSA9IGV4dGVuZGVkQ29uZmlnLm5hbWUgPyBleHRlbmRlZENvbmZpZy5uYW1lIDogZXh0ZW5zaW9uLnBhcmVudC5uYW1lO1xyXG4gICAgICAgIGlmIChleHRlbmRlZENvbmZpZy5kZWZhdWx0T3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFt0aXB0YXAgd2Fybl06IEJSRUFLSU5HIENIQU5HRTogXCJkZWZhdWx0T3B0aW9uc1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCJhZGRPcHRpb25zXCIgaW5zdGVhZC4gRm91bmQgaW4gZXh0ZW5zaW9uOiBcIiR7ZXh0ZW5zaW9uLm5hbWV9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4dGVuc2lvbi5vcHRpb25zID0gY2FsbE9yUmV0dXJuKGdldEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbiwgJ2FkZE9wdGlvbnMnLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBleHRlbnNpb24uc3RvcmFnZSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhZGRTdG9yYWdlJywge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiBleHRlbnNpb247XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gaXNBbmRyb2lkKCkge1xyXG4gICAgcmV0dXJuIG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gJ0FuZHJvaWQnIHx8IC9hbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxufVxuXG5jbGFzcyBOb2RlVmlldyB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHByb3BzLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBwcm9wcy5lZGl0b3I7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzdG9wRXZlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGlnbm9yZU11dGF0aW9uOiBudWxsLFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb24gPSBwcm9wcy5leHRlbnNpb247XHJcbiAgICAgICAgdGhpcy5ub2RlID0gcHJvcHMubm9kZTtcclxuICAgICAgICB0aGlzLmRlY29yYXRpb25zID0gcHJvcHMuZGVjb3JhdGlvbnM7XHJcbiAgICAgICAgdGhpcy5nZXRQb3MgPSBwcm9wcy5nZXRQb3M7XHJcbiAgICAgICAgdGhpcy5tb3VudCgpO1xyXG4gICAgfVxyXG4gICAgbW91bnQoKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZ2V0IGRvbSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3Iudmlldy5kb207XHJcbiAgICB9XHJcbiAgICBnZXQgY29udGVudERPTSgpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIG9uRHJhZ1N0YXJ0KGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xyXG4gICAgICAgIGNvbnN0IHsgdmlldyB9ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIC8vIGdldCB0aGUgZHJhZyBoYW5kbGUgZWxlbWVudFxyXG4gICAgICAgIC8vIGBjbG9zZXN0YCBpcyBub3QgYXZhaWxhYmxlIGZvciB0ZXh0IG5vZGVzIHNvIHdlIG1heSBoYXZlIHRvIHVzZSBpdHMgcGFyZW50XHJcbiAgICAgICAgY29uc3QgZHJhZ0hhbmRsZSA9IHRhcmdldC5ub2RlVHlwZSA9PT0gM1xyXG4gICAgICAgICAgICA/IChfYSA9IHRhcmdldC5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xvc2VzdCgnW2RhdGEtZHJhZy1oYW5kbGVdJylcclxuICAgICAgICAgICAgOiB0YXJnZXQuY2xvc2VzdCgnW2RhdGEtZHJhZy1oYW5kbGVdJyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRvbSB8fCAoKF9iID0gdGhpcy5jb250ZW50RE9NKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY29udGFpbnModGFyZ2V0KSkgfHwgIWRyYWdIYW5kbGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeCA9IDA7XHJcbiAgICAgICAgbGV0IHkgPSAwO1xyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSBvZmZzZXQgZm9yIGRyYWcgZWxlbWVudCBpZiB3ZSB1c2UgYSBkaWZmZXJlbnQgZHJhZyBoYW5kbGUgZWxlbWVudFxyXG4gICAgICAgIGlmICh0aGlzLmRvbSAhPT0gZHJhZ0hhbmRsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBkb21Cb3ggPSB0aGlzLmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlQm94ID0gZHJhZ0hhbmRsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgLy8gSW4gUmVhY3QsIHdlIGhhdmUgdG8gZ28gdGhyb3VnaCBuYXRpdmVFdmVudCB0byByZWFjaCBvZmZzZXRYL29mZnNldFkuXHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSAoX2MgPSBldmVudC5vZmZzZXRYKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAoX2QgPSBldmVudC5uYXRpdmVFdmVudCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLm9mZnNldFg7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSAoX2UgPSBldmVudC5vZmZzZXRZKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAoX2YgPSBldmVudC5uYXRpdmVFdmVudCkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLm9mZnNldFk7XHJcbiAgICAgICAgICAgIHggPSBoYW5kbGVCb3gueCAtIGRvbUJveC54ICsgb2Zmc2V0WDtcclxuICAgICAgICAgICAgeSA9IGhhbmRsZUJveC55IC0gZG9tQm94LnkgKyBvZmZzZXRZO1xyXG4gICAgICAgIH1cclxuICAgICAgICAoX2cgPSBldmVudC5kYXRhVHJhbnNmZXIpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5zZXREcmFnSW1hZ2UodGhpcy5kb20sIHgsIHkpO1xyXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gdGVsbCBQcm9zZU1pcnJvciB0aGF0IHdlIHdhbnQgdG8gbW92ZSB0aGUgd2hvbGUgbm9kZVxyXG4gICAgICAgIC8vIHNvIHdlIGNyZWF0ZSBhIE5vZGVTZWxlY3Rpb25cclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh2aWV3LnN0YXRlLmRvYywgdGhpcy5nZXRQb3MoKSk7XHJcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB2aWV3LnN0YXRlLnRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb24pO1xyXG4gICAgICAgIHZpZXcuZGlzcGF0Y2godHJhbnNhY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgc3RvcEV2ZW50KGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmICghdGhpcy5kb20pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5zdG9wRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5zdG9wRXZlbnQoeyBldmVudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIGNvbnN0IGlzSW5FbGVtZW50ID0gdGhpcy5kb20uY29udGFpbnModGFyZ2V0KSAmJiAhKChfYSA9IHRoaXMuY29udGVudERPTSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnRhaW5zKHRhcmdldCkpO1xyXG4gICAgICAgIC8vIGFueSBldmVudCBmcm9tIGNoaWxkIG5vZGVzIHNob3VsZCBiZSBoYW5kbGVkIGJ5IFByb3NlTWlycm9yXHJcbiAgICAgICAgaWYgKCFpc0luRWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGlzRHJhZ0V2ZW50ID0gZXZlbnQudHlwZS5zdGFydHNXaXRoKCdkcmFnJyk7XHJcbiAgICAgICAgY29uc3QgaXNEcm9wRXZlbnQgPSBldmVudC50eXBlID09PSAnZHJvcCc7XHJcbiAgICAgICAgY29uc3QgaXNJbnB1dCA9IFsnSU5QVVQnLCAnQlVUVE9OJywgJ1NFTEVDVCcsICdURVhUQVJFQSddLmluY2x1ZGVzKHRhcmdldC50YWdOYW1lKSB8fCB0YXJnZXQuaXNDb250ZW50RWRpdGFibGU7XHJcbiAgICAgICAgLy8gYW55IGlucHV0IGV2ZW50IHdpdGhpbiBub2RlIHZpZXdzIHNob3VsZCBiZSBpZ25vcmVkIGJ5IFByb3NlTWlycm9yXHJcbiAgICAgICAgaWYgKGlzSW5wdXQgJiYgIWlzRHJvcEV2ZW50ICYmICFpc0RyYWdFdmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgeyBpc0VkaXRhYmxlIH0gPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICBjb25zdCB7IGlzRHJhZ2dpbmcgfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgaXNEcmFnZ2FibGUgPSAhIXRoaXMubm9kZS50eXBlLnNwZWMuZHJhZ2dhYmxlO1xyXG4gICAgICAgIGNvbnN0IGlzU2VsZWN0YWJsZSA9IE5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKHRoaXMubm9kZSk7XHJcbiAgICAgICAgY29uc3QgaXNDb3B5RXZlbnQgPSBldmVudC50eXBlID09PSAnY29weSc7XHJcbiAgICAgICAgY29uc3QgaXNQYXN0ZUV2ZW50ID0gZXZlbnQudHlwZSA9PT0gJ3Bhc3RlJztcclxuICAgICAgICBjb25zdCBpc0N1dEV2ZW50ID0gZXZlbnQudHlwZSA9PT0gJ2N1dCc7XHJcbiAgICAgICAgY29uc3QgaXNDbGlja0V2ZW50ID0gZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bic7XHJcbiAgICAgICAgLy8gUHJvc2VNaXJyb3IgdHJpZXMgdG8gZHJhZyBzZWxlY3RhYmxlIG5vZGVzXHJcbiAgICAgICAgLy8gZXZlbiBpZiBgZHJhZ2dhYmxlYCBpcyBzZXQgdG8gYGZhbHNlYFxyXG4gICAgICAgIC8vIHRoaXMgZml4IHByZXZlbnRzIHRoYXRcclxuICAgICAgICBpZiAoIWlzRHJhZ2dhYmxlICYmIGlzU2VsZWN0YWJsZSAmJiBpc0RyYWdFdmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNEcmFnZ2FibGUgJiYgaXNEcmFnRXZlbnQgJiYgIWlzRHJhZ2dpbmcpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSBoYXZlIHRvIHN0b3JlIHRoYXQgZHJhZ2dpbmcgc3RhcnRlZFxyXG4gICAgICAgIGlmIChpc0RyYWdnYWJsZSAmJiBpc0VkaXRhYmxlICYmICFpc0RyYWdnaW5nICYmIGlzQ2xpY2tFdmVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBkcmFnSGFuZGxlID0gdGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLWRyYWctaGFuZGxlXScpO1xyXG4gICAgICAgICAgICBjb25zdCBpc1ZhbGlkRHJhZ0hhbmRsZSA9IGRyYWdIYW5kbGUgJiYgKHRoaXMuZG9tID09PSBkcmFnSGFuZGxlIHx8IHRoaXMuZG9tLmNvbnRhaW5zKGRyYWdIYW5kbGUpKTtcclxuICAgICAgICAgICAgaWYgKGlzVmFsaWREcmFnSGFuZGxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sIHsgb25jZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9LCB7IG9uY2U6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoZXNlIGV2ZW50cyBhcmUgaGFuZGxlZCBieSBwcm9zZW1pcnJvclxyXG4gICAgICAgIGlmIChpc0RyYWdnaW5nXHJcbiAgICAgICAgICAgIHx8IGlzRHJvcEV2ZW50XHJcbiAgICAgICAgICAgIHx8IGlzQ29weUV2ZW50XHJcbiAgICAgICAgICAgIHx8IGlzUGFzdGVFdmVudFxyXG4gICAgICAgICAgICB8fCBpc0N1dEV2ZW50XHJcbiAgICAgICAgICAgIHx8IChpc0NsaWNrRXZlbnQgJiYgaXNTZWxlY3RhYmxlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWdub3JlTXV0YXRpb24obXV0YXRpb24pIHtcclxuICAgICAgICBpZiAoIXRoaXMuZG9tIHx8ICF0aGlzLmNvbnRlbnRET00pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmlnbm9yZU11dGF0aW9uID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaWdub3JlTXV0YXRpb24oeyBtdXRhdGlvbiB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYSBsZWFmL2F0b20gbm9kZSBpcyBsaWtlIGEgYmxhY2sgYm94IGZvciBQcm9zZU1pcnJvclxyXG4gICAgICAgIC8vIGFuZCBzaG91bGQgYmUgZnVsbHkgaGFuZGxlZCBieSB0aGUgbm9kZSB2aWV3XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZS5pc0xlYWYgfHwgdGhpcy5ub2RlLmlzQXRvbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJvc2VNaXJyb3Igc2hvdWxkIGhhbmRsZSBhbnkgc2VsZWN0aW9uc1xyXG4gICAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnc2VsZWN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRyeSB0byBwcmV2ZW50IGEgYnVnIG9uIGlPUyBhbmQgQW5kcm9pZCB0aGF0IHdpbGwgYnJlYWsgbm9kZSB2aWV3cyBvbiBlbnRlclxyXG4gICAgICAgIC8vIHRoaXMgaXMgYmVjYXVzZSBQcm9zZU1pcnJvciBjYW7igJl0IHByZXZlbnREaXNwYXRjaCBvbiBlbnRlclxyXG4gICAgICAgIC8vIHRoaXMgd2lsbCBsZWFkIHRvIGEgcmUtcmVuZGVyIG9mIHRoZSBub2RlIHZpZXcgb24gZW50ZXJcclxuICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS91ZWJlcmRvc2lzL3RpcHRhcC9pc3N1ZXMvMTIxNFxyXG4gICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3VlYmVyZG9zaXMvdGlwdGFwL2lzc3Vlcy8yNTM0XHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLmNvbnRhaW5zKG11dGF0aW9uLnRhcmdldClcclxuICAgICAgICAgICAgJiYgbXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCdcclxuICAgICAgICAgICAgJiYgKGlzaU9TKCkgfHwgaXNBbmRyb2lkKCkpXHJcbiAgICAgICAgICAgICYmIHRoaXMuZWRpdG9yLmlzRm9jdXNlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkTm9kZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAuLi5BcnJheS5mcm9tKG11dGF0aW9uLmFkZGVkTm9kZXMpLFxyXG4gICAgICAgICAgICAgICAgLi4uQXJyYXkuZnJvbShtdXRhdGlvbi5yZW1vdmVkTm9kZXMpLFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAvLyB3ZeKAmWxsIGNoZWNrIGlmIGV2ZXJ5IGNoYW5nZWQgbm9kZSBpcyBjb250ZW50RWRpdGFibGVcclxuICAgICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIGl04oCZcyBwcm9iYWJseSBtdXRhdGVkIGJ5IFByb3NlTWlycm9yXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VkTm9kZXMuZXZlcnkobm9kZSA9PiBub2RlLmlzQ29udGVudEVkaXRhYmxlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHdlIHdpbGwgYWxsb3cgbXV0YXRpb24gY29udGVudERPTSB3aXRoIGF0dHJpYnV0ZXNcclxuICAgICAgICAvLyBzbyB3ZSBjYW4gZm9yIGV4YW1wbGUgYWRkaW5nIGNsYXNzZXMgd2l0aGluIG91ciBub2RlIHZpZXdcclxuICAgICAgICBpZiAodGhpcy5jb250ZW50RE9NID09PSBtdXRhdGlvbi50YXJnZXQgJiYgbXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcm9zZU1pcnJvciBzaG91bGQgaGFuZGxlIGFueSBjaGFuZ2VzIHdpdGhpbiBjb250ZW50RE9NXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudERPTS5jb250YWlucyhtdXRhdGlvbi50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICB0aGlzLmVkaXRvci5jb21tYW5kcy5jb21tYW5kKCh7IHRyIH0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcG9zID0gdGhpcy5nZXRQb3MoKTtcclxuICAgICAgICAgICAgdHIuc2V0Tm9kZU1hcmt1cChwb3MsIHVuZGVmaW5lZCwge1xyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5ub2RlLmF0dHJzLFxyXG4gICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlcyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlTm9kZSgpIHtcclxuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5nZXRQb3MoKTtcclxuICAgICAgICBjb25zdCB0byA9IGZyb20gKyB0aGlzLm5vZGUubm9kZVNpemU7XHJcbiAgICAgICAgdGhpcy5lZGl0b3IuY29tbWFuZHMuZGVsZXRlUmFuZ2UoeyBmcm9tLCB0byB9KTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gcGFzdGUgcnVsZSB0aGF0IGFkZHMgYSBtYXJrIHdoZW4gdGhlXHJcbiAqIG1hdGNoZWQgdGV4dCBpcyBwYXN0ZWQgaW50byBpdC5cclxuICovXHJcbmZ1bmN0aW9uIG1hcmtQYXN0ZVJ1bGUoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IFBhc3RlUnVsZSh7XHJcbiAgICAgICAgZmluZDogY29uZmlnLmZpbmQsXHJcbiAgICAgICAgaGFuZGxlcjogKHsgc3RhdGUsIHJhbmdlLCBtYXRjaCwgcGFzdGVFdmVudCwgfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gY2FsbE9yUmV0dXJuKGNvbmZpZy5nZXRBdHRyaWJ1dGVzLCB1bmRlZmluZWQsIG1hdGNoLCBwYXN0ZUV2ZW50KTtcclxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMgPT09IGZhbHNlIHx8IGF0dHJpYnV0ZXMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdHIgfSA9IHN0YXRlO1xyXG4gICAgICAgICAgICBjb25zdCBjYXB0dXJlR3JvdXAgPSBtYXRjaFttYXRjaC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgY29uc3QgZnVsbE1hdGNoID0gbWF0Y2hbMF07XHJcbiAgICAgICAgICAgIGxldCBtYXJrRW5kID0gcmFuZ2UudG87XHJcbiAgICAgICAgICAgIGlmIChjYXB0dXJlR3JvdXApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0U3BhY2VzID0gZnVsbE1hdGNoLnNlYXJjaCgvXFxTLyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0U3RhcnQgPSByYW5nZS5mcm9tICsgZnVsbE1hdGNoLmluZGV4T2YoY2FwdHVyZUdyb3VwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRFbmQgPSB0ZXh0U3RhcnQgKyBjYXB0dXJlR3JvdXAubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhjbHVkZWRNYXJrcyA9IGdldE1hcmtzQmV0d2VlbihyYW5nZS5mcm9tLCByYW5nZS50bywgc3RhdGUuZG9jKVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4Y2x1ZGVkID0gaXRlbS5tYXJrLnR5cGUuZXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4Y2x1ZGVkLmZpbmQodHlwZSA9PiB0eXBlID09PSBjb25maWcudHlwZSAmJiB0eXBlICE9PSBpdGVtLm1hcmsudHlwZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLnRvID4gdGV4dFN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIGlmIChleGNsdWRlZE1hcmtzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRleHRFbmQgPCByYW5nZS50bykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLmRlbGV0ZSh0ZXh0RW5kLCByYW5nZS50byk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGV4dFN0YXJ0ID4gcmFuZ2UuZnJvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLmRlbGV0ZShyYW5nZS5mcm9tICsgc3RhcnRTcGFjZXMsIHRleHRTdGFydCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtYXJrRW5kID0gcmFuZ2UuZnJvbSArIHN0YXJ0U3BhY2VzICsgY2FwdHVyZUdyb3VwLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRyLmFkZE1hcmsocmFuZ2UuZnJvbSArIHN0YXJ0U3BhY2VzLCBtYXJrRW5kLCBjb25maWcudHlwZS5jcmVhdGUoYXR0cmlidXRlcyB8fCB7fSkpO1xyXG4gICAgICAgICAgICAgICAgdHIucmVtb3ZlU3RvcmVkTWFyayhjb25maWcudHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cblxuLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjk2OTQ4NlxyXG5mdW5jdGlvbiBlc2NhcGVGb3JSZWdFeChzdHJpbmcpIHtcclxuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvWy0vXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xyXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcclxufVxuXG4vKipcclxuICogQnVpbGQgYW4gcGFzdGUgcnVsZSB0aGF0IGFkZHMgYSBub2RlIHdoZW4gdGhlXHJcbiAqIG1hdGNoZWQgdGV4dCBpcyBwYXN0ZWQgaW50byBpdC5cclxuICovXHJcbmZ1bmN0aW9uIG5vZGVQYXN0ZVJ1bGUoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IFBhc3RlUnVsZSh7XHJcbiAgICAgICAgZmluZDogY29uZmlnLmZpbmQsXHJcbiAgICAgICAgaGFuZGxlcih7IG1hdGNoLCBjaGFpbiwgcmFuZ2UsIHBhc3RlRXZlbnQsIH0pIHtcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNhbGxPclJldHVybihjb25maWcuZ2V0QXR0cmlidXRlcywgdW5kZWZpbmVkLCBtYXRjaCwgcGFzdGVFdmVudCk7XHJcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzID09PSBmYWxzZSB8fCBhdHRyaWJ1dGVzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobWF0Y2guaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIGNoYWluKCkuZGVsZXRlUmFuZ2UocmFuZ2UpLmluc2VydENvbnRlbnRBdChyYW5nZS5mcm9tLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogY29uZmlnLnR5cGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBhdHRyczogYXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBCdWlsZCBhbiBwYXN0ZSBydWxlIHRoYXQgcmVwbGFjZXMgdGV4dCB3aGVuIHRoZVxyXG4gKiBtYXRjaGVkIHRleHQgaXMgcGFzdGVkIGludG8gaXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0ZXh0UGFzdGVSdWxlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIG5ldyBQYXN0ZVJ1bGUoe1xyXG4gICAgICAgIGZpbmQ6IGNvbmZpZy5maW5kLFxyXG4gICAgICAgIGhhbmRsZXI6ICh7IHN0YXRlLCByYW5nZSwgbWF0Y2ggfSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaW5zZXJ0ID0gY29uZmlnLnJlcGxhY2U7XHJcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHJhbmdlLmZyb207XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHJhbmdlLnRvO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IG1hdGNoWzBdLmxhc3RJbmRleE9mKG1hdGNoWzFdKTtcclxuICAgICAgICAgICAgICAgIGluc2VydCArPSBtYXRjaFswXS5zbGljZShvZmZzZXQgKyBtYXRjaFsxXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQgKz0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3V0T2ZmID0gc3RhcnQgLSBlbmQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3V0T2ZmID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc2VydCA9IG1hdGNoWzBdLnNsaWNlKG9mZnNldCAtIGN1dE9mZiwgb2Zmc2V0KSArIGluc2VydDtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGVuZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGF0ZS50ci5pbnNlcnRUZXh0KGluc2VydCwgc3RhcnQsIGVuZCk7XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XG5cbmNsYXNzIFRyYWNrZXIge1xyXG4gICAgY29uc3RydWN0b3IodHJhbnNhY3Rpb24pIHtcclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb247XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3RlcCA9IHRoaXMudHJhbnNhY3Rpb24uc3RlcHMubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgbWFwKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCBtYXBwZWRQb3NpdGlvbiA9IHRoaXMudHJhbnNhY3Rpb24uc3RlcHNcclxuICAgICAgICAgICAgLnNsaWNlKHRoaXMuY3VycmVudFN0ZXApXHJcbiAgICAgICAgICAgIC5yZWR1Y2UoKG5ld1Bvc2l0aW9uLCBzdGVwKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hcFJlc3VsdCA9IHN0ZXAuZ2V0TWFwKCkubWFwUmVzdWx0KG5ld1Bvc2l0aW9uKTtcclxuICAgICAgICAgICAgaWYgKG1hcFJlc3VsdC5kZWxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbWFwUmVzdWx0LnBvcztcclxuICAgICAgICB9LCBwb3NpdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcG9zaXRpb246IG1hcHBlZFBvc2l0aW9uLFxyXG4gICAgICAgICAgICBkZWxldGVkLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgQ29tbWFuZE1hbmFnZXIsIEVkaXRvciwgRXh0ZW5zaW9uLCBJbnB1dFJ1bGUsIE1hcmssIE5vZGUsIE5vZGVWaWV3LCBQYXN0ZVJ1bGUsIFRyYWNrZXIsIGNhbGxPclJldHVybiwgY29tYmluZVRyYW5zYWN0aW9uU3RlcHMsIGNyZWF0ZUNoYWluYWJsZVN0YXRlLCBjcmVhdGVEb2N1bWVudCwgY3JlYXRlTm9kZUZyb21Db250ZW50LCBjcmVhdGVTdHlsZVRhZywgZGVmYXVsdEJsb2NrQXQsIGRlbGV0ZVByb3BzLCBlbGVtZW50RnJvbVN0cmluZywgZXNjYXBlRm9yUmVnRXgsIGV4dGVuc2lvbnMsIGZpbmRDaGlsZHJlbiwgZmluZENoaWxkcmVuSW5SYW5nZSwgZmluZER1cGxpY2F0ZXMsIGZpbmRQYXJlbnROb2RlLCBmaW5kUGFyZW50Tm9kZUNsb3Nlc3RUb1BvcywgZnJvbVN0cmluZywgZ2VuZXJhdGVIVE1MLCBnZW5lcmF0ZUpTT04sIGdlbmVyYXRlVGV4dCwgZ2V0QXR0cmlidXRlcywgZ2V0QXR0cmlidXRlc0Zyb21FeHRlbnNpb25zLCBnZXRDaGFuZ2VkUmFuZ2VzLCBnZXREZWJ1Z0pTT04sIGdldEV4dGVuc2lvbkZpZWxkLCBnZXRIVE1MRnJvbUZyYWdtZW50LCBnZXRNYXJrQXR0cmlidXRlcywgZ2V0TWFya1JhbmdlLCBnZXRNYXJrVHlwZSwgZ2V0TWFya3NCZXR3ZWVuLCBnZXROb2RlQXRQb3NpdGlvbiwgZ2V0Tm9kZUF0dHJpYnV0ZXMsIGdldE5vZGVUeXBlLCBnZXRSZW5kZXJlZEF0dHJpYnV0ZXMsIGdldFNjaGVtYSwgZ2V0U2NoZW1hQnlSZXNvbHZlZEV4dGVuc2lvbnMsIGdldFNjaGVtYVR5cGVCeU5hbWUsIGdldFNjaGVtYVR5cGVOYW1lQnlOYW1lLCBnZXRTcGxpdHRlZEF0dHJpYnV0ZXMsIGdldFRleHQsIGdldFRleHRCZXR3ZWVuLCBnZXRUZXh0Q29udGVudEZyb21Ob2RlcywgZ2V0VGV4dFNlcmlhbGl6ZXJzRnJvbVNjaGVtYSwgaW5qZWN0RXh0ZW5zaW9uQXR0cmlidXRlc1RvUGFyc2VSdWxlLCBpbnB1dFJ1bGVzUGx1Z2luLCBpc0FjdGl2ZSwgaXNBdEVuZE9mTm9kZSwgaXNBdFN0YXJ0T2ZOb2RlLCBpc0VtcHR5T2JqZWN0LCBpc0V4dGVuc2lvblJ1bGVzRW5hYmxlZCwgaXNGdW5jdGlvbiwgaXNMaXN0LCBpc01hY09TLCBpc01hcmtBY3RpdmUsIGlzTm9kZUFjdGl2ZSwgaXNOb2RlRW1wdHksIGlzTm9kZVNlbGVjdGlvbiwgaXNOdW1iZXIsIGlzUGxhaW5PYmplY3QsIGlzUmVnRXhwLCBpc1N0cmluZywgaXNUZXh0U2VsZWN0aW9uLCBpc2lPUywgbWFya0lucHV0UnVsZSwgbWFya1Bhc3RlUnVsZSwgbWVyZ2VBdHRyaWJ1dGVzLCBtZXJnZURlZXAsIG1pbk1heCwgbm9kZUlucHV0UnVsZSwgbm9kZVBhc3RlUnVsZSwgb2JqZWN0SW5jbHVkZXMsIHBhc3RlUnVsZXNQbHVnaW4sIHBvc1RvRE9NUmVjdCwgcmVtb3ZlRHVwbGljYXRlcywgcmVzb2x2ZUZvY3VzUG9zaXRpb24sIHNlbGVjdGlvblRvSW5zZXJ0aW9uRW5kLCBzcGxpdEV4dGVuc2lvbnMsIHRleHRJbnB1dFJ1bGUsIHRleHRQYXN0ZVJ1bGUsIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUsIHdyYXBwaW5nSW5wdXRSdWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJQbHVnaW4iLCJQbHVnaW5LZXkiLCJUZXh0U2VsZWN0aW9uIiwiU2VsZWN0aW9uIiwiTm9kZVNlbGVjdGlvbiIsIkVkaXRvclN0YXRlIiwiRWRpdG9yVmlldyIsImtleW1hcCIsIlNjaGVtYSIsIkZyYWdtZW50IiwiRE9NUGFyc2VyIiwiRE9NU2VyaWFsaXplciIsIk5vZGUiLCJOb2RlJDEiLCJTbGljZSIsImxpZnRUYXJnZXQiLCJSZXBsYWNlU3RlcCIsIlJlcGxhY2VBcm91bmRTdGVwIiwiam9pblBvaW50IiwiVHJhbnNmb3JtIiwiY2FuU3BsaXQiLCJjYW5Kb2luIiwiZmluZFdyYXBwaW5nIiwiY3JlYXRlUGFyYWdyYXBoTmVhciIsImNyZWF0ZVBhcmFncmFwaE5lYXIkMSIsImRlbGV0ZVNlbGVjdGlvbiIsImRlbGV0ZVNlbGVjdGlvbiQxIiwiZXhpdENvZGUiLCJleGl0Q29kZSQxIiwiam9pblVwIiwiam9pblVwJDEiLCJqb2luRG93biIsImpvaW5Eb3duJDEiLCJqb2luQmFja3dhcmQiLCJqb2luQmFja3dhcmQkMSIsImpvaW5Gb3J3YXJkIiwiam9pbkZvcndhcmQkMSIsImxpZnQiLCJsaWZ0JDEiLCJsaWZ0RW1wdHlCbG9jayIsImxpZnRFbXB0eUJsb2NrJDEiLCJuZXdsaW5lSW5Db2RlIiwibmV3bGluZUluQ29kZSQxIiwic2VsZWN0Tm9kZUJhY2t3YXJkIiwic2VsZWN0Tm9kZUJhY2t3YXJkJDEiLCJzZWxlY3ROb2RlRm9yd2FyZCIsInNlbGVjdE5vZGVGb3J3YXJkJDEiLCJzZWxlY3RQYXJlbnROb2RlIiwic2VsZWN0UGFyZW50Tm9kZSQxIiwic2VsZWN0VGV4dGJsb2NrRW5kIiwic2VsZWN0VGV4dGJsb2NrRW5kJDEiLCJzZWxlY3RUZXh0YmxvY2tTdGFydCIsInNlbGVjdFRleHRibG9ja1N0YXJ0JDEiLCJzZXRCbG9ja1R5cGUiLCJ3cmFwSW4iLCJ3cmFwSW4kMSIsImxpZnRMaXN0SXRlbSIsImxpZnRMaXN0SXRlbSQxIiwic2lua0xpc3RJdGVtIiwic2lua0xpc3RJdGVtJDEiLCJ3cmFwSW5MaXN0Iiwid3JhcEluTGlzdCQxIiwiY3JlYXRlQ2hhaW5hYmxlU3RhdGUiLCJjb25maWciLCJzdGF0ZSIsInRyYW5zYWN0aW9uIiwic2VsZWN0aW9uIiwiZG9jIiwic3RvcmVkTWFya3MiLCJhcHBseSIsImJpbmQiLCJhcHBseVRyYW5zYWN0aW9uIiwiZmlsdGVyVHJhbnNhY3Rpb24iLCJwbHVnaW5zIiwic2NoZW1hIiwicmVjb25maWd1cmUiLCJ0b0pTT04iLCJ0ciIsIkNvbW1hbmRNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImVkaXRvciIsInJhd0NvbW1hbmRzIiwiZXh0ZW5zaW9uTWFuYWdlciIsImNvbW1hbmRzIiwiY3VzdG9tU3RhdGUiLCJoYXNDdXN0b21TdGF0ZSIsInZpZXciLCJidWlsZFByb3BzIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwibWFwIiwibmFtZSIsImNvbW1hbmQiLCJtZXRob2QiLCJhcmdzIiwiY2FsbGJhY2siLCJnZXRNZXRhIiwiZGlzcGF0Y2giLCJjaGFpbiIsImNyZWF0ZUNoYWluIiwiY2FuIiwiY3JlYXRlQ2FuIiwic3RhcnRUciIsInNob3VsZERpc3BhdGNoIiwiY2FsbGJhY2tzIiwiaGFzU3RhcnRUcmFuc2FjdGlvbiIsInJ1biIsImV2ZXJ5IiwiY2hhaW5lZENvbW1hbmQiLCJwdXNoIiwiZm9ybWF0dGVkQ29tbWFuZHMiLCJ1bmRlZmluZWQiLCJFdmVudEVtaXR0ZXIiLCJvbiIsImV2ZW50IiwiZm4iLCJlbWl0IiwiZm9yRWFjaCIsIm9mZiIsImZpbHRlciIsInJlbW92ZUFsbExpc3RlbmVycyIsImdldEV4dGVuc2lvbkZpZWxkIiwiZXh0ZW5zaW9uIiwiZmllbGQiLCJjb250ZXh0IiwicGFyZW50IiwidmFsdWUiLCJzcGxpdEV4dGVuc2lvbnMiLCJleHRlbnNpb25zIiwiYmFzZUV4dGVuc2lvbnMiLCJ0eXBlIiwibm9kZUV4dGVuc2lvbnMiLCJtYXJrRXh0ZW5zaW9ucyIsImdldEF0dHJpYnV0ZXNGcm9tRXh0ZW5zaW9ucyIsImV4dGVuc2lvbkF0dHJpYnV0ZXMiLCJub2RlQW5kTWFya0V4dGVuc2lvbnMiLCJkZWZhdWx0QXR0cmlidXRlIiwiZGVmYXVsdCIsInJlbmRlcmVkIiwicmVuZGVySFRNTCIsInBhcnNlSFRNTCIsImtlZXBPblNwbGl0IiwiaXNSZXF1aXJlZCIsIm9wdGlvbnMiLCJzdG9yYWdlIiwiYWRkR2xvYmFsQXR0cmlidXRlcyIsImdsb2JhbEF0dHJpYnV0ZXMiLCJnbG9iYWxBdHRyaWJ1dGUiLCJ0eXBlcyIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGUiLCJhZGRBdHRyaWJ1dGVzIiwibWVyZ2VkQXR0ciIsImdldE5vZGVUeXBlIiwibmFtZU9yVHlwZSIsIm5vZGVzIiwiRXJyb3IiLCJtZXJnZUF0dHJpYnV0ZXMiLCJvYmplY3RzIiwiaXRlbSIsInJlZHVjZSIsIml0ZW1zIiwibWVyZ2VkQXR0cmlidXRlcyIsImtleSIsImV4aXN0cyIsInZhbHVlQ2xhc3NlcyIsInNwbGl0IiwiZXhpc3RpbmdDbGFzc2VzIiwiaW5zZXJ0Q2xhc3NlcyIsInZhbHVlQ2xhc3MiLCJpbmNsdWRlcyIsImpvaW4iLCJnZXRSZW5kZXJlZEF0dHJpYnV0ZXMiLCJub2RlT3JNYXJrIiwiYXR0cnMiLCJpc0Z1bmN0aW9uIiwiY2FsbE9yUmV0dXJuIiwiaXNFbXB0eU9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJmcm9tU3RyaW5nIiwibWF0Y2giLCJOdW1iZXIiLCJpbmplY3RFeHRlbnNpb25BdHRyaWJ1dGVzVG9QYXJzZVJ1bGUiLCJwYXJzZVJ1bGUiLCJzdHlsZSIsImdldEF0dHJzIiwibm9kZSIsIm9sZEF0dHJpYnV0ZXMiLCJuZXdBdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlIiwiY2xlYW5VcFNjaGVtYUl0ZW0iLCJkYXRhIiwiZ2V0U2NoZW1hQnlSZXNvbHZlZEV4dGVuc2lvbnMiLCJfYSIsImFsbEF0dHJpYnV0ZXMiLCJ0b3BOb2RlIiwiZmluZCIsImV4dHJhTm9kZUZpZWxkcyIsImZpZWxkcyIsImUiLCJleHRlbmROb2RlU2NoZW1hIiwiY29udGVudCIsIm1hcmtzIiwiZ3JvdXAiLCJpbmxpbmUiLCJhdG9tIiwic2VsZWN0YWJsZSIsImRyYWdnYWJsZSIsImNvZGUiLCJkZWZpbmluZyIsImlzb2xhdGluZyIsImV4dGVuc2lvbkF0dHJpYnV0ZSIsInBhcnNlRE9NIiwidG9ET00iLCJIVE1MQXR0cmlidXRlcyIsInJlbmRlclRleHQiLCJ0b1RleHQiLCJleHRyYU1hcmtGaWVsZHMiLCJleHRlbmRNYXJrU2NoZW1hIiwiaW5jbHVzaXZlIiwiZXhjbHVkZXMiLCJzcGFubmluZyIsIm1hcmsiLCJnZXRTY2hlbWFUeXBlQnlOYW1lIiwiaXNFeHRlbnNpb25SdWxlc0VuYWJsZWQiLCJlbmFibGVkIiwiQXJyYXkiLCJpc0FycmF5Iiwic29tZSIsImVuYWJsZWRFeHRlbnNpb24iLCJnZXRUZXh0Q29udGVudEZyb21Ob2RlcyIsIiRmcm9tIiwibWF4TWF0Y2giLCJ0ZXh0QmVmb3JlIiwic2xpY2VFbmRQb3MiLCJwYXJlbnRPZmZzZXQiLCJub2Rlc0JldHdlZW4iLCJNYXRoIiwibWF4IiwicG9zIiwiaW5kZXgiLCJfYiIsImNodW5rIiwic3BlYyIsImNhbGwiLCJ0ZXh0Q29udGVudCIsInNsaWNlIiwiaXNSZWdFeHAiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsIklucHV0UnVsZSIsImhhbmRsZXIiLCJpbnB1dFJ1bGVNYXRjaGVySGFuZGxlciIsInRleHQiLCJleGVjIiwiaW5wdXRSdWxlTWF0Y2giLCJyZXN1bHQiLCJpbnB1dCIsInJlcGxhY2VXaXRoIiwiY29uc29sZSIsIndhcm4iLCJydW4kMSIsImZyb20iLCJ0byIsInJ1bGVzIiwicGx1Z2luIiwiY29tcG9zaW5nIiwicmVzb2x2ZSIsIm5vZGVCZWZvcmUiLCJub2RlQWZ0ZXIiLCJtYXRjaGVkIiwicnVsZSIsInJhbmdlIiwic3RlcHMiLCJzZXRNZXRhIiwidHJhbnNmb3JtIiwiaW5wdXRSdWxlc1BsdWdpbiIsImluaXQiLCJwcmV2Iiwic3RvcmVkIiwic2VsZWN0aW9uU2V0IiwiZG9jQ2hhbmdlZCIsImhhbmRsZVRleHRJbnB1dCIsImhhbmRsZURPTUV2ZW50cyIsImNvbXBvc2l0aW9uZW5kIiwic2V0VGltZW91dCIsIiRjdXJzb3IiLCJoYW5kbGVLZXlEb3duIiwiaXNJbnB1dFJ1bGVzIiwiaXNOdW1iZXIiLCJQYXN0ZVJ1bGUiLCJwYXN0ZVJ1bGVNYXRjaGVySGFuZGxlciIsIm1hdGNoQWxsIiwibWF0Y2hlcyIsInBhc3RlUnVsZU1hdGNoIiwicGFzdGVFdmVudCIsImRyb3BFdmVudCIsImhhbmRsZXJzIiwiaXNUZXh0YmxvY2siLCJyZXNvbHZlZEZyb20iLCJyZXNvbHZlZFRvIiwibWluIiwic2l6ZSIsInRleHRUb01hdGNoIiwidGV4dEJldHdlZW4iLCJzdGFydCIsImVuZCIsIm1hcHBpbmciLCJzdWNjZXNzIiwicGFzdGVSdWxlc1BsdWdpbiIsImRyYWdTb3VyY2VFbGVtZW50IiwiaXNQYXN0ZWRGcm9tUHJvc2VNaXJyb3IiLCJpc0Ryb3BwZWRGcm9tUHJvc2VNaXJyb3IiLCJDbGlwYm9hcmRFdmVudCIsIkRyYWdFdmVudCIsImhhbmRsZURyYWdzdGFydCIsImRvbSIsInBhcmVudEVsZW1lbnQiLCJjb250YWlucyIsInRhcmdldCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJkZXN0cm95IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRyb3AiLCJwYXN0ZSIsIl92aWV3IiwiaHRtbCIsImNsaXBib2FyZERhdGEiLCJnZXREYXRhIiwiYXBwZW5kVHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbnMiLCJvbGRTdGF0ZSIsImlzUGFzdGUiLCJpc0Ryb3AiLCJmaW5kRGlmZlN0YXJ0IiwiZmluZERpZmZFbmQiLCJiIiwiY2hhaW5hYmxlU3RhdGUiLCJmaW5kRHVwbGljYXRlcyIsImZpbHRlcmVkIiwiZWwiLCJpbmRleE9mIiwiU2V0IiwiRXh0ZW5zaW9uTWFuYWdlciIsInNwbGl0dGFibGVNYXJrcyIsImV4dGVuc2lvblN0b3JhZ2UiLCJvbkJlZm9yZUNyZWF0ZSIsIm9uQ3JlYXRlIiwib25VcGRhdGUiLCJvblNlbGVjdGlvblVwZGF0ZSIsIm9uVHJhbnNhY3Rpb24iLCJvbkZvY3VzIiwib25CbHVyIiwib25EZXN0cm95IiwicmVzb2x2ZWRFeHRlbnNpb25zIiwic29ydCIsImZsYXR0ZW4iLCJkdXBsaWNhdGVkTmFtZXMiLCJhZGRFeHRlbnNpb25zIiwiZmxhdCIsImRlZmF1bHRQcmlvcml0eSIsImEiLCJwcmlvcml0eUEiLCJwcmlvcml0eUIiLCJhZGRDb21tYW5kcyIsInJldmVyc2UiLCJpbnB1dFJ1bGVzIiwicGFzdGVSdWxlcyIsImFsbFBsdWdpbnMiLCJhZGRLZXlib2FyZFNob3J0Y3V0cyIsImRlZmF1bHRCaW5kaW5ncyIsImV4aXRhYmxlIiwiQXJyb3dSaWdodCIsIk1hcmsiLCJoYW5kbGVFeGl0IiwiYmluZGluZ3MiLCJzaG9ydGN1dCIsImtleU1hcFBsdWdpbiIsImFkZElucHV0UnVsZXMiLCJlbmFibGVJbnB1dFJ1bGVzIiwiYWRkUGFzdGVSdWxlcyIsImVuYWJsZVBhc3RlUnVsZXMiLCJhZGRQcm9zZU1pcnJvclBsdWdpbnMiLCJwcm9zZU1pcnJvclBsdWdpbnMiLCJub2RlVmlld3MiLCJhZGROb2RlVmlldyIsIm5vZGV2aWV3IiwiZ2V0UG9zIiwiZGVjb3JhdGlvbnMiLCJnZXRUeXBlIiwiaXNQbGFpbk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwibWVyZ2VEZWVwIiwic291cmNlIiwib3V0cHV0IiwiYXNzaWduIiwiRXh0ZW5zaW9uIiwiY2hpbGQiLCJkZWZhdWx0T3B0aW9ucyIsImFkZE9wdGlvbnMiLCJjcmVhdGUiLCJjb25maWd1cmUiLCJleHRlbmQiLCJleHRlbmRlZENvbmZpZyIsImdldFRleHRCZXR3ZWVuIiwic3RhcnROb2RlIiwiYmxvY2tTZXBhcmF0b3IiLCJ0ZXh0U2VyaWFsaXplcnMiLCJzZXBhcmF0ZWQiLCJ0ZXh0U2VyaWFsaXplciIsImlzQmxvY2siLCJpc1RleHQiLCJnZXRUZXh0U2VyaWFsaXplcnNGcm9tU2NoZW1hIiwiQ2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXIiLCJjbGlwYm9hcmRUZXh0U2VyaWFsaXplciIsInJhbmdlcyIsIiR0byIsImJsdXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpc0Rlc3Ryb3llZCIsImdldFNlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsImNsZWFyQ29udGVudCIsImVtaXRVcGRhdGUiLCJzZXRDb250ZW50IiwiY2xlYXJOb2RlcyIsIiRtYXBwZWRGcm9tIiwiJG1hcHBlZFRvIiwibm9kZVNpemUiLCJub2RlUmFuZ2UiLCJibG9ja1JhbmdlIiwidGFyZ2V0TGlmdERlcHRoIiwiZGVmYXVsdFR5cGUiLCJjb250ZW50TWF0Y2hBdCIsInNldE5vZGVNYXJrdXAiLCJjdXQiLCJvcmlnaW5SYW5nZSIsInRhcmdldFBvcyIsImNvbnRlbnRTbGljZSIsImRlbGV0ZVJhbmdlIiwibmV3UG9zIiwiaW5zZXJ0Iiwic2V0U2VsZWN0aW9uIiwiZGVsZXRlQ3VycmVudE5vZGUiLCJjdXJyZW50Tm9kZSIsIiRhbmNob3IiLCIkcG9zIiwiZGVwdGgiLCJiZWZvcmUiLCJhZnRlciIsImRlbGV0ZSIsInNjcm9sbEludG9WaWV3IiwiZGVsZXRlTm9kZSIsInR5cGVPck5hbWUiLCJlbnRlciIsImtleWJvYXJkU2hvcnRjdXQiLCJvYmplY3RJbmNsdWRlcyIsIm9iamVjdDEiLCJvYmplY3QyIiwic3RyaWN0IiwidGVzdCIsImZpbmRNYXJrSW5TZXQiLCJpc01hcmtJblNldCIsImdldE1hcmtSYW5nZSIsImNoaWxkQWZ0ZXIiLCJvZmZzZXQiLCJjaGlsZEJlZm9yZSIsInN0YXJ0SW5kZXgiLCJzdGFydFBvcyIsImVuZEluZGV4IiwiZW5kUG9zIiwiaXNJblNldCIsImNoaWxkQ291bnQiLCJnZXRNYXJrVHlwZSIsImV4dGVuZE1hcmtSYW5nZSIsIm5ld1NlbGVjdGlvbiIsImZpcnN0IiwiaSIsImlzVGV4dFNlbGVjdGlvbiIsIm1pbk1heCIsInJlc29sdmVGb2N1c1Bvc2l0aW9uIiwicG9zaXRpb24iLCJzZWxlY3Rpb25BdFN0YXJ0IiwiYXRTdGFydCIsInNlbGVjdGlvbkF0RW5kIiwiYXRFbmQiLCJtaW5Qb3MiLCJtYXhQb3MiLCJpc2lPUyIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwidXNlckFnZW50IiwiZG9jdW1lbnQiLCJmb2N1cyIsImRlbGF5ZWRGb2N1cyIsImhhc0ZvY3VzIiwiaXNTYW1lU2VsZWN0aW9uIiwiZXEiLCJzZXRTdG9yZWRNYXJrcyIsImluc2VydENvbnRlbnQiLCJpbnNlcnRDb250ZW50QXQiLCJlbGVtZW50RnJvbVN0cmluZyIsIndyYXBwZWRWYWx1ZSIsInBhcnNlRnJvbVN0cmluZyIsImJvZHkiLCJjcmVhdGVOb2RlRnJvbUNvbnRlbnQiLCJwYXJzZU9wdGlvbnMiLCJmcm9tQXJyYXkiLCJub2RlRnJvbUpTT04iLCJlcnJvciIsInBhcnNlciIsImZyb21TY2hlbWEiLCJwYXJzZVNsaWNlIiwicGFyc2UiLCJzZWxlY3Rpb25Ub0luc2VydGlvbkVuZCIsInN0YXJ0TGVuIiwiYmlhcyIsImxhc3QiLCJzdGVwIiwibWFwcyIsIl9mcm9tIiwiX3RvIiwiX25ld0Zyb20iLCJuZXdUbyIsIm5lYXIiLCJpc0ZyYWdtZW50Iiwibm9kZU9yRnJhZ21lbnQiLCJzdGFydHNXaXRoIiwidXBkYXRlU2VsZWN0aW9uIiwicHJlc2VydmVXaGl0ZXNwYWNlIiwiaXNPbmx5VGV4dENvbnRlbnQiLCJpc09ubHlCbG9ja0NvbnRlbnQiLCJjaGVjayIsImlzRW1wdHlUZXh0QmxvY2siLCJpbnNlcnRUZXh0IiwidiIsImpvaW5JdGVtQmFja3dhcmQiLCJwb2ludCIsImpvaW5JdGVtRm9yd2FyZCIsImlzTWFjT1MiLCJub3JtYWxpemVLZXlOYW1lIiwicGFydHMiLCJhbHQiLCJjdHJsIiwic2hpZnQiLCJtZXRhIiwibW9kIiwiS2V5Ym9hcmRFdmVudCIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNhcHR1cmVkVHJhbnNhY3Rpb24iLCJjYXB0dXJlVHJhbnNhY3Rpb24iLCJzb21lUHJvcCIsImYiLCJuZXdTdGVwIiwibWF5YmVTdGVwIiwiaXNOb2RlQWN0aXZlIiwiZW1wdHkiLCJub2RlUmFuZ2VzIiwicmVsYXRpdmVGcm9tIiwicmVsYXRpdmVUbyIsInNlbGVjdGlvblJhbmdlIiwibWF0Y2hlZE5vZGVSYW5nZXMiLCJzdW0iLCJpc0FjdGl2ZSIsImdldFNjaGVtYVR5cGVOYW1lQnlOYW1lIiwiZGVsZXRlUHJvcHMiLCJvYmoiLCJwcm9wT3JQcm9wcyIsIm5ld09iaiIsInByb3AiLCJyZXNldEF0dHJpYnV0ZXMiLCJub2RlVHlwZSIsIm1hcmtUeXBlIiwic2NoZW1hVHlwZSIsImFkZE1hcmsiLCJzZWxlY3RBbGwiLCJzZXRUZXh0U2VsZWN0aW9uIiwiY3JlYXRlRG9jdW1lbnQiLCJnZXRNYXJrQXR0cmlidXRlcyIsIiRoZWFkIiwibWFya0l0ZW0iLCJjb21iaW5lVHJhbnNhY3Rpb25TdGVwcyIsIm9sZERvYyIsImRlZmF1bHRCbG9ja0F0IiwiZWRnZUNvdW50IiwiZWRnZSIsImhhc1JlcXVpcmVkQXR0cnMiLCJmaW5kQ2hpbGRyZW4iLCJwcmVkaWNhdGUiLCJub2Rlc1dpdGhQb3MiLCJkZXNjZW5kYW50cyIsImZpbmRDaGlsZHJlbkluUmFuZ2UiLCJmaW5kUGFyZW50Tm9kZUNsb3Nlc3RUb1BvcyIsImZpbmRQYXJlbnROb2RlIiwiZ2V0SFRNTEZyb21GcmFnbWVudCIsImZyYWdtZW50IiwiZG9jdW1lbnRGcmFnbWVudCIsInNlcmlhbGl6ZUZyYWdtZW50IiwidGVtcG9yYXJ5RG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImlubmVySFRNTCIsImdldFNjaGVtYSIsImdlbmVyYXRlSFRNTCIsImNvbnRlbnROb2RlIiwiZnJvbUpTT04iLCJnZW5lcmF0ZUpTT04iLCJnZXRUZXh0IiwiZ2VuZXJhdGVUZXh0IiwiZ2V0Tm9kZUF0dHJpYnV0ZXMiLCJub2RlSXRlbSIsImdldEF0dHJpYnV0ZXMiLCJyZW1vdmVEdXBsaWNhdGVzIiwiYXJyYXkiLCJieSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZWVuIiwiaGFzT3duUHJvcGVydHkiLCJzaW1wbGlmeUNoYW5nZWRSYW5nZXMiLCJjaGFuZ2VzIiwidW5pcXVlQ2hhbmdlcyIsImNoYW5nZSIsInJlc3QiLCJfIiwib3RoZXJDaGFuZ2UiLCJvbGRSYW5nZSIsIm5ld1JhbmdlIiwiZ2V0Q2hhbmdlZFJhbmdlcyIsInN0ZXBNYXAiLCJuZXdTdGFydCIsIm5ld0VuZCIsIm9sZFN0YXJ0IiwiaW52ZXJ0Iiwib2xkRW5kIiwiZ2V0RGVidWdKU09OIiwic3RhcnRPZmZzZXQiLCJpc1RvcE5vZGUiLCJ0b3BOb2RlVHlwZSIsImluY3JlbWVudCIsImdldE1hcmtzQmV0d2VlbiIsImdldE5vZGVBdFBvc2l0aW9uIiwibWF4RGVwdGgiLCJjdXJyZW50RGVwdGgiLCJnZXRTcGxpdHRlZEF0dHJpYnV0ZXMiLCJ0eXBlTmFtZSIsImlzTWFya0FjdGl2ZSIsIm1hcmtSYW5nZXMiLCJtYXRjaGVkUmFuZ2UiLCJtYXJrUmFuZ2UiLCJleGNsdWRlZFJhbmdlIiwiaXNBdEVuZE9mTm9kZSIsInBhcmVudE5vZGUiLCIkcGFyZW50UG9zIiwiaXNBdFN0YXJ0T2ZOb2RlIiwiaXNMaXN0IiwiaXNOb2RlRW1wdHkiLCJkZWZhdWx0Q29udGVudCIsImNyZWF0ZUFuZEZpbGwiLCJpc05vZGVTZWxlY3Rpb24iLCJwb3NUb0RPTVJlY3QiLCJyZXNvbHZlZEVuZCIsImNvb3Jkc0F0UG9zIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0Iiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsImNhblNldE1hcmsiLCJuZXdNYXJrVHlwZSIsImN1cnNvciIsImN1cnJlbnRNYXJrcyIsInNvbWVOb2RlU3VwcG9ydHNNYXJrIiwiaW5saW5lQ29udGVudCIsImFsbG93c01hcmtUeXBlIiwiX3BvcyIsImlzSW5saW5lIiwicGFyZW50QWxsb3dzTWFya1R5cGUiLCJjdXJyZW50TWFya3NBbGxvd01hcmtUeXBlIiwib3RoZXJNYXJrIiwic2V0TWFyayIsImFkZFN0b3JlZE1hcmsiLCJ0cmltbWVkRnJvbSIsInRyaW1tZWRUbyIsInNvbWVIYXNNYXJrIiwic2V0Tm9kZSIsImNhblNldEJsb2NrIiwidXBkYXRlZFN0YXRlIiwic2V0Tm9kZVNlbGVjdGlvbiIsImVuc3VyZU1hcmtzIiwiZmlsdGVyZWRNYXJrcyIsInNwbGl0QmxvY2siLCJrZWVwTWFya3MiLCJkZWZsdCIsImluZGV4QWZ0ZXIiLCIkZmlyc3QiLCJjYW5SZXBsYWNlV2l0aCIsInNwbGl0TGlzdEl0ZW0iLCJzYW1lUGFyZW50IiwiZ3JhbmRQYXJlbnQiLCJ3cmFwIiwiZGVwdGhCZWZvcmUiLCJkIiwiY29weSIsImRlcHRoQWZ0ZXIiLCJuZXdOZXh0VHlwZUF0dHJpYnV0ZXMiLCJuZXh0VHlwZSIsImNvbnRlbnRNYXRjaCIsImFwcGVuZCIsInJlcGxhY2UiLCJzZWwiLCJuIiwibmV3VHlwZUF0dHJpYnV0ZXMiLCJqb2luTGlzdEJhY2t3YXJkcyIsImxpc3RUeXBlIiwibGlzdCIsIm5vZGVBdCIsImNhbkpvaW5CYWNrd2FyZHMiLCJqb2luTGlzdEZvcndhcmRzIiwiY2FuSm9pbkZvcndhcmRzIiwidG9nZ2xlTGlzdCIsImxpc3RUeXBlT3JOYW1lIiwiaXRlbVR5cGVPck5hbWUiLCJpdGVtVHlwZSIsInBhcmVudExpc3QiLCJ2YWxpZENvbnRlbnQiLCJjYW5XcmFwSW5MaXN0IiwidG9nZ2xlTWFyayIsImV4dGVuZEVtcHR5TWFya1JhbmdlIiwidW5zZXRNYXJrIiwidG9nZ2xlTm9kZSIsInRvZ2dsZVR5cGVPck5hbWUiLCJ0b2dnbGVUeXBlIiwidG9nZ2xlV3JhcCIsInVuZG9JbnB1dFJ1bGUiLCJ1bmRvYWJsZSIsImdldFN0YXRlIiwidG9VbmRvIiwiaiIsImRvY3MiLCJ1bnNldEFsbE1hcmtzIiwicmVtb3ZlTWFyayIsInJlbW92ZVN0b3JlZE1hcmsiLCJ1cGRhdGVBdHRyaWJ1dGVzIiwiZnJlZXplIiwiX19wcm90b19fIiwiQ29tbWFuZHMiLCJFZGl0YWJsZSIsImVkaXRhYmxlIiwiRm9jdXNFdmVudHMiLCJpc0ZvY3VzZWQiLCJLZXltYXAiLCJoYW5kbGVCYWNrc3BhY2UiLCJwYXJlbnRJc0lzb2xhdGluZyIsInBhcmVudFBvcyIsImlzQXRTdGFydCIsImhhbmRsZURlbGV0ZSIsImhhbmRsZUVudGVyIiwiYmFzZUtleW1hcCIsIkVudGVyIiwiQmFja3NwYWNlIiwiRGVsZXRlIiwicGNLZXltYXAiLCJtYWNLZXltYXAiLCJuZXdTdGF0ZSIsImRvY0NoYW5nZXMiLCJhbGxGcm9tIiwiYWxsRW5kIiwiYWxsV2FzU2VsZWN0ZWQiLCJpc0VtcHR5IiwiVGFiaW5kZXgiLCJpc0VkaXRhYmxlIiwidGFiaW5kZXgiLCJjcmVhdGVTdHlsZVRhZyIsIm5vbmNlIiwic3VmZml4IiwidGlwdGFwU3R5bGVUYWciLCJxdWVyeVNlbGVjdG9yIiwic3R5bGVOb2RlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJFZGl0b3IiLCJlbGVtZW50IiwiaW5qZWN0Q1NTIiwiaW5qZWN0Tm9uY2UiLCJhdXRvZm9jdXMiLCJlZGl0b3JQcm9wcyIsImVuYWJsZUNvcmVFeHRlbnNpb25zIiwiaXNDYXB0dXJpbmdUcmFuc2FjdGlvbiIsInNldE9wdGlvbnMiLCJjcmVhdGVFeHRlbnNpb25NYW5hZ2VyIiwiY3JlYXRlQ29tbWFuZE1hbmFnZXIiLCJjcmVhdGVTY2hlbWEiLCJjcmVhdGVWaWV3IiwiY29tbWFuZE1hbmFnZXIiLCJjc3MiLCJzZXRQcm9wcyIsInVwZGF0ZVN0YXRlIiwic2V0RWRpdGFibGUiLCJyZWdpc3RlclBsdWdpbiIsImhhbmRsZVBsdWdpbnMiLCJ1bnJlZ2lzdGVyUGx1Z2luIiwibmFtZU9yUGx1Z2luS2V5IiwiY29yZUV4dGVuc2lvbnMiLCJ2YWx1ZXMiLCJhbGxFeHRlbnNpb25zIiwiZGlzcGF0Y2hUcmFuc2FjdGlvbiIsImNyZWF0ZU5vZGVWaWV3cyIsInByZXBlbmRDbGFzcyIsImNsYXNzTmFtZSIsInNlbGVjdGlvbkhhc0NoYW5nZWQiLCJuYW1lT3JBdHRyaWJ1dGVzIiwiYXR0cmlidXRlc09yVW5kZWZpbmVkIiwiZ2V0SlNPTiIsImdldEhUTUwiLCJnZXRDaGFyYWN0ZXJDb3VudCIsImRvY1ZpZXciLCJtYXJrSW5wdXRSdWxlIiwiY2FwdHVyZUdyb3VwIiwiZnVsbE1hdGNoIiwic3RhcnRTcGFjZXMiLCJzZWFyY2giLCJ0ZXh0U3RhcnQiLCJ0ZXh0RW5kIiwiZXhjbHVkZWRNYXJrcyIsImV4Y2x1ZGVkIiwibWFya0VuZCIsIm5vZGVJbnB1dFJ1bGUiLCJuZXdOb2RlIiwibGFzdEluZGV4T2YiLCJtYXRjaFN0YXJ0IiwibGFzdENoYXIiLCJ0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlIiwiJHN0YXJ0IiwidGV4dElucHV0UnVsZSIsImN1dE9mZiIsIndyYXBwaW5nSW5wdXRSdWxlIiwid3JhcHBpbmciLCJrZWVwQXR0cmlidXRlcyIsImpvaW5QcmVkaWNhdGUiLCJjdXJyZW50UG9zIiwiaXNBdEVuZCIsImlzSW5NYXJrIiwibSIsImlzQW5kcm9pZCIsIk5vZGVWaWV3IiwiY29tcG9uZW50IiwiaXNEcmFnZ2luZyIsInN0b3BFdmVudCIsImlnbm9yZU11dGF0aW9uIiwibW91bnQiLCJjb250ZW50RE9NIiwib25EcmFnU3RhcnQiLCJfYyIsIl9kIiwiX2UiLCJfZiIsIl9nIiwiZHJhZ0hhbmRsZSIsImNsb3Nlc3QiLCJkb21Cb3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJoYW5kbGVCb3giLCJvZmZzZXRYIiwibmF0aXZlRXZlbnQiLCJvZmZzZXRZIiwiZGF0YVRyYW5zZmVyIiwic2V0RHJhZ0ltYWdlIiwiaXNJbkVsZW1lbnQiLCJpc0RyYWdFdmVudCIsImlzRHJvcEV2ZW50IiwiaXNJbnB1dCIsInRhZ05hbWUiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImlzRHJhZ2dhYmxlIiwiaXNTZWxlY3RhYmxlIiwiaXNDb3B5RXZlbnQiLCJpc1Bhc3RlRXZlbnQiLCJpc0N1dEV2ZW50IiwiaXNDbGlja0V2ZW50IiwicHJldmVudERlZmF1bHQiLCJpc1ZhbGlkRHJhZ0hhbmRsZSIsIm9uY2UiLCJtdXRhdGlvbiIsImlzTGVhZiIsImlzQXRvbSIsImNoYW5nZWROb2RlcyIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJtYXJrUGFzdGVSdWxlIiwiZXNjYXBlRm9yUmVnRXgiLCJzdHJpbmciLCJpc1N0cmluZyIsIm5vZGVQYXN0ZVJ1bGUiLCJ0ZXh0UGFzdGVSdWxlIiwiVHJhY2tlciIsImN1cnJlbnRTdGVwIiwiZGVsZXRlZCIsIm1hcHBlZFBvc2l0aW9uIiwibmV3UG9zaXRpb24iLCJtYXBSZXN1bHQiLCJnZXRNYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-blockquote/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-blockquote/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blockquote: () => (/* binding */ Blockquote),\n/* harmony export */   \"default\": () => (/* binding */ Blockquote),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst inputRegex = /^\\s*>\\s$/;\nconst Blockquote = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"blockquote\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    content: \"block+\",\n    group: \"block\",\n    defining: true,\n    parseHTML () {\n        return [\n            {\n                tag: \"blockquote\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"blockquote\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setBlockquote: ()=>({ commands })=>{\n                    return commands.wrapIn(this.name);\n                },\n            toggleBlockquote: ()=>({ commands })=>{\n                    return commands.toggleWrap(this.name);\n                },\n            unsetBlockquote: ()=>({ commands })=>{\n                    return commands.lift(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-Shift-b\": ()=>this.editor.commands.toggleBlockquote()\n        };\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n                find: inputRegex,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYmxvY2txdW90ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0U7QUFFeEUsTUFBTUcsYUFBYTtBQUNuQixNQUFNQyxhQUFhSiw4Q0FBSUEsQ0FBQ0ssTUFBTSxDQUFDO0lBQzNCQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNIQyxnQkFBZ0IsQ0FBQztRQUNyQjtJQUNKO0lBQ0FDLFNBQVM7SUFDVEMsT0FBTztJQUNQQyxVQUFVO0lBQ1ZDO1FBQ0ksT0FBTztZQUNIO2dCQUFFQyxLQUFLO1lBQWE7U0FDdkI7SUFDTDtJQUNBQyxZQUFXLEVBQUVOLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBY1AsNkRBQWVBLENBQUMsSUFBSSxDQUFDYyxPQUFPLENBQUNQLGNBQWMsRUFBRUE7WUFBaUI7U0FBRTtJQUMxRjtJQUNBUTtRQUNJLE9BQU87WUFDSEMsZUFBZSxJQUFNLENBQUMsRUFBRUMsUUFBUSxFQUFFO29CQUM5QixPQUFPQSxTQUFTQyxNQUFNLENBQUMsSUFBSSxDQUFDYixJQUFJO2dCQUNwQztZQUNBYyxrQkFBa0IsSUFBTSxDQUFDLEVBQUVGLFFBQVEsRUFBRTtvQkFDakMsT0FBT0EsU0FBU0csVUFBVSxDQUFDLElBQUksQ0FBQ2YsSUFBSTtnQkFDeEM7WUFDQWdCLGlCQUFpQixJQUFNLENBQUMsRUFBRUosUUFBUSxFQUFFO29CQUNoQyxPQUFPQSxTQUFTSyxJQUFJLENBQUMsSUFBSSxDQUFDakIsSUFBSTtnQkFDbEM7UUFDSjtJQUNKO0lBQ0FrQjtRQUNJLE9BQU87WUFDSCxlQUFlLElBQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNQLFFBQVEsQ0FBQ0UsZ0JBQWdCO1FBQzlEO0lBQ0o7SUFDQU07UUFDSSxPQUFPO1lBQ0h4QiwrREFBaUJBLENBQUM7Z0JBQ2R5QixNQUFNeEI7Z0JBQ055QixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNuQjtTQUNIO0lBQ0w7QUFDSjtBQUV5RCxDQUN6RCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYmxvY2txdW90ZS9kaXN0L2luZGV4LmpzP2UxYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzLCB3cmFwcGluZ0lucHV0UnVsZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbmNvbnN0IGlucHV0UmVnZXggPSAvXlxccyo+XFxzJC87XHJcbmNvbnN0IEJsb2NrcXVvdGUgPSBOb2RlLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnYmxvY2txdW90ZScsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGNvbnRlbnQ6ICdibG9jaysnLFxyXG4gICAgZ3JvdXA6ICdibG9jaycsXHJcbiAgICBkZWZpbmluZzogdHJ1ZSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IHRhZzogJ2Jsb2NrcXVvdGUnIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2Jsb2NrcXVvdGUnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldEJsb2NrcXVvdGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy53cmFwSW4odGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9nZ2xlQmxvY2txdW90ZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZVdyYXAodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5zZXRCbG9ja3F1b3RlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMubGlmdCh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ01vZC1TaGlmdC1iJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlQmxvY2txdW90ZSgpLFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB3cmFwcGluZ0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEJsb2NrcXVvdGUsIEJsb2NrcXVvdGUgYXMgZGVmYXVsdCwgaW5wdXRSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTm9kZSIsIm1lcmdlQXR0cmlidXRlcyIsIndyYXBwaW5nSW5wdXRSdWxlIiwiaW5wdXRSZWdleCIsIkJsb2NrcXVvdGUiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwiY29udGVudCIsImdyb3VwIiwiZGVmaW5pbmciLCJwYXJzZUhUTUwiLCJ0YWciLCJyZW5kZXJIVE1MIiwib3B0aW9ucyIsImFkZENvbW1hbmRzIiwic2V0QmxvY2txdW90ZSIsImNvbW1hbmRzIiwid3JhcEluIiwidG9nZ2xlQmxvY2txdW90ZSIsInRvZ2dsZVdyYXAiLCJ1bnNldEJsb2NrcXVvdGUiLCJsaWZ0IiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJlZGl0b3IiLCJhZGRJbnB1dFJ1bGVzIiwiZmluZCIsInR5cGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-blockquote/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-bold/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bold: () => (/* binding */ Bold),\n/* harmony export */   \"default\": () => (/* binding */ Bold),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/;\nconst starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/g;\nconst underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/;\nconst underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/g;\nconst Bold = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"bold\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"strong\"\n            },\n            {\n                tag: \"b\",\n                getAttrs: (node)=>node.style.fontWeight !== \"normal\" && null\n            },\n            {\n                style: \"font-weight\",\n                getAttrs: (value)=>/^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"strong\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setBold: ()=>({ commands })=>{\n                    return commands.setMark(this.name);\n                },\n            toggleBold: ()=>({ commands })=>{\n                    return commands.toggleMark(this.name);\n                },\n            unsetBold: ()=>({ commands })=>{\n                    return commands.unsetMark(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-b\": ()=>this.editor.commands.toggleBold(),\n            \"Mod-B\": ()=>this.editor.commands.toggleBold()\n        };\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: starInputRegex,\n                type: this.type\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: underscoreInputRegex,\n                type: this.type\n            })\n        ];\n    },\n    addPasteRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: starPasteRegex,\n                type: this.type\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: underscorePasteRegex,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYm9sZC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBbUY7QUFFbkYsTUFBTUksaUJBQWlCO0FBQ3ZCLE1BQU1DLGlCQUFpQjtBQUN2QixNQUFNQyx1QkFBdUI7QUFDN0IsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLE9BQU9SLDhDQUFJQSxDQUFDUyxNQUFNLENBQUM7SUFDckJDLE1BQU07SUFDTkM7UUFDSSxPQUFPO1lBQ0hDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUM7UUFDSSxPQUFPO1lBQ0g7Z0JBQ0lDLEtBQUs7WUFDVDtZQUNBO2dCQUNJQSxLQUFLO2dCQUNMQyxVQUFVQyxDQUFBQSxPQUFRQSxLQUFLQyxLQUFLLENBQUNDLFVBQVUsS0FBSyxZQUFZO1lBQzVEO1lBQ0E7Z0JBQ0lELE9BQU87Z0JBQ1BGLFVBQVVJLENBQUFBLFFBQVMsNEJBQTRCQyxJQUFJLENBQUNELFVBQVU7WUFDbEU7U0FDSDtJQUNMO0lBQ0FFLFlBQVcsRUFBRVQsY0FBYyxFQUFFO1FBQ3pCLE9BQU87WUFBQztZQUFVWCw2REFBZUEsQ0FBQyxJQUFJLENBQUNxQixPQUFPLENBQUNWLGNBQWMsRUFBRUE7WUFBaUI7U0FBRTtJQUN0RjtJQUNBVztRQUNJLE9BQU87WUFDSEMsU0FBUyxJQUFNLENBQUMsRUFBRUMsUUFBUSxFQUFFO29CQUN4QixPQUFPQSxTQUFTQyxPQUFPLENBQUMsSUFBSSxDQUFDaEIsSUFBSTtnQkFDckM7WUFDQWlCLFlBQVksSUFBTSxDQUFDLEVBQUVGLFFBQVEsRUFBRTtvQkFDM0IsT0FBT0EsU0FBU0csVUFBVSxDQUFDLElBQUksQ0FBQ2xCLElBQUk7Z0JBQ3hDO1lBQ0FtQixXQUFXLElBQU0sQ0FBQyxFQUFFSixRQUFRLEVBQUU7b0JBQzFCLE9BQU9BLFNBQVNLLFNBQVMsQ0FBQyxJQUFJLENBQUNwQixJQUFJO2dCQUN2QztRQUNKO0lBQ0o7SUFDQXFCO1FBQ0ksT0FBTztZQUNILFNBQVMsSUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ1AsUUFBUSxDQUFDRSxVQUFVO1lBQzlDLFNBQVMsSUFBTSxJQUFJLENBQUNLLE1BQU0sQ0FBQ1AsUUFBUSxDQUFDRSxVQUFVO1FBQ2xEO0lBQ0o7SUFDQU07UUFDSSxPQUFPO1lBQ0gvQiwyREFBYUEsQ0FBQztnQkFDVmdDLE1BQU05QjtnQkFDTitCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ25CO1lBQ0FqQywyREFBYUEsQ0FBQztnQkFDVmdDLE1BQU01QjtnQkFDTjZCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ25CO1NBQ0g7SUFDTDtJQUNBQztRQUNJLE9BQU87WUFDSGpDLDJEQUFhQSxDQUFDO2dCQUNWK0IsTUFBTTdCO2dCQUNOOEIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7WUFDQWhDLDJEQUFhQSxDQUFDO2dCQUNWK0IsTUFBTTNCO2dCQUNONEIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7U0FDSDtJQUNMO0FBQ0o7QUFFNkcsQ0FDN0csaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1ibG9nLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLWJvbGQvZGlzdC9pbmRleC5qcz9kZjY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmssIG1lcmdlQXR0cmlidXRlcywgbWFya0lucHV0UnVsZSwgbWFya1Bhc3RlUnVsZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbmNvbnN0IHN0YXJJbnB1dFJlZ2V4ID0gLyg/Ol58XFxzKSgoPzpcXCpcXCopKCg/OlteKl0rKSkoPzpcXCpcXCopKSQvO1xyXG5jb25zdCBzdGFyUGFzdGVSZWdleCA9IC8oPzpefFxccykoKD86XFwqXFwqKSgoPzpbXipdKykpKD86XFwqXFwqKSkvZztcclxuY29uc3QgdW5kZXJzY29yZUlucHV0UmVnZXggPSAvKD86XnxcXHMpKCg/Ol9fKSgoPzpbXl9fXSspKSg/Ol9fKSkkLztcclxuY29uc3QgdW5kZXJzY29yZVBhc3RlUmVnZXggPSAvKD86XnxcXHMpKCg/Ol9fKSgoPzpbXl9fXSspKSg/Ol9fKSkvZztcclxuY29uc3QgQm9sZCA9IE1hcmsuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdib2xkJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ3N0cm9uZycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ2InLFxyXG4gICAgICAgICAgICAgICAgZ2V0QXR0cnM6IG5vZGUgPT4gbm9kZS5zdHlsZS5mb250V2VpZ2h0ICE9PSAnbm9ybWFsJyAmJiBudWxsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZTogJ2ZvbnQtd2VpZ2h0JyxcclxuICAgICAgICAgICAgICAgIGdldEF0dHJzOiB2YWx1ZSA9PiAvXihib2xkKGVyKT98WzUtOV1cXGR7Mix9KSQvLnRlc3QodmFsdWUpICYmIG51bGwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ3N0cm9uZycsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XHJcbiAgICB9LFxyXG4gICAgYWRkQ29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2V0Qm9sZDogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9nZ2xlQm9sZDogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5zZXRCb2xkOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnTW9kLWInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVCb2xkKCksXHJcbiAgICAgICAgICAgICdNb2QtQic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZUJvbGQoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZElucHV0UnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBzdGFySW5wdXRSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG1hcmtJbnB1dFJ1bGUoe1xyXG4gICAgICAgICAgICAgICAgZmluZDogdW5kZXJzY29yZUlucHV0UmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHN0YXJQYXN0ZVJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbWFya1Bhc3RlUnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiB1bmRlcnNjb3JlUGFzdGVSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBCb2xkLCBCb2xkIGFzIGRlZmF1bHQsIHN0YXJJbnB1dFJlZ2V4LCBzdGFyUGFzdGVSZWdleCwgdW5kZXJzY29yZUlucHV0UmVnZXgsIHVuZGVyc2NvcmVQYXN0ZVJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJNYXJrIiwibWVyZ2VBdHRyaWJ1dGVzIiwibWFya0lucHV0UnVsZSIsIm1hcmtQYXN0ZVJ1bGUiLCJzdGFySW5wdXRSZWdleCIsInN0YXJQYXN0ZVJlZ2V4IiwidW5kZXJzY29yZUlucHV0UmVnZXgiLCJ1bmRlcnNjb3JlUGFzdGVSZWdleCIsIkJvbGQiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwicGFyc2VIVE1MIiwidGFnIiwiZ2V0QXR0cnMiLCJub2RlIiwic3R5bGUiLCJmb250V2VpZ2h0IiwidmFsdWUiLCJ0ZXN0IiwicmVuZGVySFRNTCIsIm9wdGlvbnMiLCJhZGRDb21tYW5kcyIsInNldEJvbGQiLCJjb21tYW5kcyIsInNldE1hcmsiLCJ0b2dnbGVCb2xkIiwidG9nZ2xlTWFyayIsInVuc2V0Qm9sZCIsInVuc2V0TWFyayIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiZWRpdG9yIiwiYWRkSW5wdXRSdWxlcyIsImZpbmQiLCJ0eXBlIiwiYWRkUGFzdGVSdWxlcyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bubble-menu/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   BubbleMenuPlugin: () => (/* binding */ BubbleMenuPlugin),\n/* harmony export */   BubbleMenuView: () => (/* binding */ BubbleMenuView),\n/* harmony export */   \"default\": () => (/* binding */ BubbleMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\n\n\n\nclass BubbleMenuView {\n    constructor({ editor, element, view, tippyOptions = {}, updateDelay = 250, shouldShow }){\n        this.preventHide = false;\n        this.shouldShow = ({ view, state, from, to })=>{\n            const { doc, selection } = state;\n            const { empty } = selection;\n            // Sometime check for `empty` is not enough.\n            // Doubleclick an empty paragraph returns a node size of 2.\n            // So we check also for an empty text size.\n            const isEmptyTextBlock = !doc.textBetween(from, to).length && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isTextSelection)(state.selection);\n            // When clicking on a element inside the bubble menu the editor \"blur\" event\n            // is called and the bubble menu item is focussed. In this case we should\n            // consider the menu as part of the editor and keep showing the menu\n            const isChildOfMenu = this.element.contains(document.activeElement);\n            const hasEditorFocus = view.hasFocus() || isChildOfMenu;\n            if (!hasEditorFocus || empty || isEmptyTextBlock || !this.editor.isEditable) {\n                return false;\n            }\n            return true;\n        };\n        this.mousedownHandler = ()=>{\n            this.preventHide = true;\n        };\n        this.dragstartHandler = ()=>{\n            this.hide();\n        };\n        this.focusHandler = ()=>{\n            // we use `setTimeout` to make sure `selection` is already updated\n            setTimeout(()=>this.update(this.editor.view));\n        };\n        this.blurHandler = ({ event })=>{\n            var _a;\n            if (this.preventHide) {\n                this.preventHide = false;\n                return;\n            }\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n                return;\n            }\n            this.hide();\n        };\n        this.tippyBlurHandler = (event)=>{\n            this.blurHandler({\n                event\n            });\n        };\n        this.handleDebouncedUpdate = (view, oldState)=>{\n            const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\n            const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\n            if (!selectionChanged && !docChanged) {\n                return;\n            }\n            if (this.updateDebounceTimer) {\n                clearTimeout(this.updateDebounceTimer);\n            }\n            this.updateDebounceTimer = window.setTimeout(()=>{\n                this.updateHandler(view, selectionChanged, docChanged, oldState);\n            }, this.updateDelay);\n        };\n        this.updateHandler = (view, selectionChanged, docChanged, oldState)=>{\n            var _a, _b, _c;\n            const { state, composing } = view;\n            const { selection } = state;\n            const isSame = !selectionChanged && !docChanged;\n            if (composing || isSame) {\n                return;\n            }\n            this.createTooltip();\n            // support for CellSelections\n            const { ranges } = selection;\n            const from = Math.min(...ranges.map((range)=>range.$from.pos));\n            const to = Math.max(...ranges.map((range)=>range.$to.pos));\n            const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n                editor: this.editor,\n                view,\n                state,\n                oldState,\n                from,\n                to\n            });\n            if (!shouldShow) {\n                this.hide();\n                return;\n            }\n            (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n                getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (()=>{\n                    if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isNodeSelection)(state.selection)) {\n                        let node = view.nodeDOM(from);\n                        const nodeViewWrapper = node.dataset.nodeViewWrapper ? node : node.querySelector(\"[data-node-view-wrapper]\");\n                        if (nodeViewWrapper) {\n                            node = nodeViewWrapper.firstChild;\n                        }\n                        if (node) {\n                            return node.getBoundingClientRect();\n                        }\n                    }\n                    return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.posToDOMRect)(view, from, to);\n                })\n            });\n            this.show();\n        };\n        this.editor = editor;\n        this.element = element;\n        this.view = view;\n        this.updateDelay = updateDelay;\n        if (shouldShow) {\n            this.shouldShow = shouldShow;\n        }\n        this.element.addEventListener(\"mousedown\", this.mousedownHandler, {\n            capture: true\n        });\n        this.view.dom.addEventListener(\"dragstart\", this.dragstartHandler);\n        this.editor.on(\"focus\", this.focusHandler);\n        this.editor.on(\"blur\", this.blurHandler);\n        this.tippyOptions = tippyOptions;\n        // Detaches menu content from its current parent\n        this.element.remove();\n        this.element.style.visibility = \"visible\";\n    }\n    createTooltip() {\n        const { element: editorElement } = this.editor.options;\n        const editorIsAttached = !!editorElement.parentElement;\n        if (this.tippy || !editorIsAttached) {\n            return;\n        }\n        this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(editorElement, {\n            duration: 0,\n            getReferenceClientRect: null,\n            content: this.element,\n            interactive: true,\n            trigger: \"manual\",\n            placement: \"top\",\n            hideOnClick: \"toggle\",\n            ...this.tippyOptions\n        });\n        // maybe we have to hide tippy on its own blur event as well\n        if (this.tippy.popper.firstChild) {\n            this.tippy.popper.firstChild.addEventListener(\"blur\", this.tippyBlurHandler);\n        }\n    }\n    update(view, oldState) {\n        const { state } = view;\n        const hasValidSelection = state.selection.$from.pos !== state.selection.$to.pos;\n        if (this.updateDelay > 0 && hasValidSelection) {\n            this.handleDebouncedUpdate(view, oldState);\n            return;\n        }\n        const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\n        const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\n        this.updateHandler(view, selectionChanged, docChanged, oldState);\n    }\n    show() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n    }\n    hide() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n    destroy() {\n        var _a, _b;\n        if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\n            this.tippy.popper.firstChild.removeEventListener(\"blur\", this.tippyBlurHandler);\n        }\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\n        this.element.removeEventListener(\"mousedown\", this.mousedownHandler, {\n            capture: true\n        });\n        this.view.dom.removeEventListener(\"dragstart\", this.dragstartHandler);\n        this.editor.off(\"focus\", this.focusHandler);\n        this.editor.off(\"blur\", this.blurHandler);\n    }\n}\nconst BubbleMenuPlugin = (options)=>{\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        key: typeof options.pluginKey === \"string\" ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\n        view: (view)=>new BubbleMenuView({\n                view,\n                ...options\n            })\n    });\n};\nconst BubbleMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: \"bubbleMenu\",\n    addOptions () {\n        return {\n            element: null,\n            tippyOptions: {},\n            pluginKey: \"bubbleMenu\",\n            updateDelay: undefined,\n            shouldShow: null\n        };\n    },\n    addProseMirrorPlugins () {\n        if (!this.options.element) {\n            return [];\n        }\n        return [\n            BubbleMenuPlugin({\n                pluginKey: this.options.pluginKey,\n                editor: this.editor,\n                element: this.options.element,\n                tippyOptions: this.options.tippyOptions,\n                updateDelay: this.options.updateDelay,\n                shouldShow: this.options.shouldShow\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bullet-list/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bullet-list/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BulletList: () => (/* binding */ BulletList),\n/* harmony export */   \"default\": () => (/* binding */ BulletList),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst ListItem = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"listItem\",\n    addOptions () {\n        return {\n            HTMLAttributes: {},\n            bulletListTypeName: \"bulletList\",\n            orderedListTypeName: \"orderedList\"\n        };\n    },\n    content: \"paragraph block*\",\n    defining: true,\n    parseHTML () {\n        return [\n            {\n                tag: \"li\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"li\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addKeyboardShortcuts () {\n        return {\n            Enter: ()=>this.editor.commands.splitListItem(this.name),\n            Tab: ()=>this.editor.commands.sinkListItem(this.name),\n            \"Shift-Tab\": ()=>this.editor.commands.liftListItem(this.name)\n        };\n    }\n});\nconst TextStyle = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"textStyle\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"span\",\n                getAttrs: (element)=>{\n                    const hasStyles = element.hasAttribute(\"style\");\n                    if (!hasStyles) {\n                        return false;\n                    }\n                    return {};\n                }\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"span\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            removeEmptyTextStyle: ()=>({ state, commands })=>{\n                    const attributes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.getMarkAttributes)(state, this.type);\n                    const hasStyles = Object.entries(attributes).some(([, value])=>!!value);\n                    if (hasStyles) {\n                        return true;\n                    }\n                    return commands.unsetMark(this.name);\n                }\n        };\n    }\n});\nconst inputRegex = /^\\s*([-+*])\\s$/;\nconst BulletList = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"bulletList\",\n    addOptions () {\n        return {\n            itemTypeName: \"listItem\",\n            HTMLAttributes: {},\n            keepMarks: false,\n            keepAttributes: false\n        };\n    },\n    group: \"block list\",\n    content () {\n        return `${this.options.itemTypeName}+`;\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"ul\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"ul\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            toggleBulletList: ()=>({ commands, chain })=>{\n                    if (this.options.keepAttributes) {\n                        return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\n                    }\n                    return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-Shift-8\": ()=>this.editor.commands.toggleBulletList()\n        };\n    },\n    addInputRules () {\n        let inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n            find: inputRegex,\n            type: this.type\n        });\n        if (this.options.keepMarks || this.options.keepAttributes) {\n            inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n                find: inputRegex,\n                type: this.type,\n                keepMarks: this.options.keepMarks,\n                keepAttributes: this.options.keepAttributes,\n                getAttributes: ()=>{\n                    return this.editor.getAttributes(TextStyle.name);\n                },\n                editor: this.editor\n            });\n        }\n        return [\n            inputRule\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bullet-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-code-block/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-code-block/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeBlock: () => (/* binding */ CodeBlock),\n/* harmony export */   backtickInputRegex: () => (/* binding */ backtickInputRegex),\n/* harmony export */   \"default\": () => (/* binding */ CodeBlock),\n/* harmony export */   tildeInputRegex: () => (/* binding */ tildeInputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n\n\nconst backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/;\nconst tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/;\nconst CodeBlock = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Node.create({\n    name: \"codeBlock\",\n    addOptions () {\n        return {\n            languageClassPrefix: \"language-\",\n            exitOnTripleEnter: true,\n            exitOnArrowDown: true,\n            HTMLAttributes: {}\n        };\n    },\n    content: \"text*\",\n    marks: \"\",\n    group: \"block\",\n    code: true,\n    defining: true,\n    addAttributes () {\n        return {\n            language: {\n                default: null,\n                parseHTML: (element)=>{\n                    var _a;\n                    const { languageClassPrefix } = this.options;\n                    const classNames = [\n                        ...((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || []\n                    ];\n                    const languages = classNames.filter((className)=>className.startsWith(languageClassPrefix)).map((className)=>className.replace(languageClassPrefix, \"\"));\n                    const language = languages[0];\n                    if (!language) {\n                        return null;\n                    }\n                    return language;\n                },\n                rendered: false\n            }\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"pre\",\n                preserveWhitespace: \"full\"\n            }\n        ];\n    },\n    renderHTML ({ node, HTMLAttributes }) {\n        return [\n            \"pre\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            [\n                \"code\",\n                {\n                    class: node.attrs.language ? this.options.languageClassPrefix + node.attrs.language : null\n                },\n                0\n            ]\n        ];\n    },\n    addCommands () {\n        return {\n            setCodeBlock: (attributes)=>({ commands })=>{\n                    return commands.setNode(this.name, attributes);\n                },\n            toggleCodeBlock: (attributes)=>({ commands })=>{\n                    return commands.toggleNode(this.name, \"paragraph\", attributes);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-Alt-c\": ()=>this.editor.commands.toggleCodeBlock(),\n            // remove code block when at start of document or code block is empty\n            Backspace: ()=>{\n                const { empty, $anchor } = this.editor.state.selection;\n                const isAtStart = $anchor.pos === 1;\n                if (!empty || $anchor.parent.type.name !== this.name) {\n                    return false;\n                }\n                if (isAtStart || !$anchor.parent.textContent.length) {\n                    return this.editor.commands.clearNodes();\n                }\n                return false;\n            },\n            // exit node on triple enter\n            Enter: ({ editor })=>{\n                if (!this.options.exitOnTripleEnter) {\n                    return false;\n                }\n                const { state } = editor;\n                const { selection } = state;\n                const { $from, empty } = selection;\n                if (!empty || $from.parent.type !== this.type) {\n                    return false;\n                }\n                const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n                const endsWithDoubleNewline = $from.parent.textContent.endsWith(\"\\n\\n\");\n                if (!isAtEnd || !endsWithDoubleNewline) {\n                    return false;\n                }\n                return editor.chain().command(({ tr })=>{\n                    tr.delete($from.pos - 2, $from.pos);\n                    return true;\n                }).exitCode().run();\n            },\n            // exit node on arrow down\n            ArrowDown: ({ editor })=>{\n                if (!this.options.exitOnArrowDown) {\n                    return false;\n                }\n                const { state } = editor;\n                const { selection, doc } = state;\n                const { $from, empty } = selection;\n                if (!empty || $from.parent.type !== this.type) {\n                    return false;\n                }\n                const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n                if (!isAtEnd) {\n                    return false;\n                }\n                const after = $from.after();\n                if (after === undefined) {\n                    return false;\n                }\n                const nodeAfter = doc.nodeAt(after);\n                if (nodeAfter) {\n                    return false;\n                }\n                return editor.commands.exitCode();\n            }\n        };\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.textblockTypeInputRule)({\n                find: backtickInputRegex,\n                type: this.type,\n                getAttributes: (match)=>({\n                        language: match[1]\n                    })\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.textblockTypeInputRule)({\n                find: tildeInputRegex,\n                type: this.type,\n                getAttributes: (match)=>({\n                        language: match[1]\n                    })\n            })\n        ];\n    },\n    addProseMirrorPlugins () {\n        return [\n            // this plugin creates a code block for pasted content from VS Code\n            // we can also detect the copied code language\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"codeBlockVSCodeHandler\"),\n                props: {\n                    handlePaste: (view, event)=>{\n                        if (!event.clipboardData) {\n                            return false;\n                        }\n                        // don’t create a new code block within code blocks\n                        if (this.editor.isActive(this.type.name)) {\n                            return false;\n                        }\n                        const text = event.clipboardData.getData(\"text/plain\");\n                        const vscode = event.clipboardData.getData(\"vscode-editor-data\");\n                        const vscodeData = vscode ? JSON.parse(vscode) : undefined;\n                        const language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;\n                        if (!text || !language) {\n                            return false;\n                        }\n                        const { tr } = view.state;\n                        // create an empty code block\n                        tr.replaceSelectionWith(this.type.create({\n                            language\n                        }));\n                        // put cursor inside the newly created code block\n                        tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));\n                        // add text to code block\n                        // strip carriage return chars from text pasted as code\n                        // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n                        tr.insertText(text.replace(/\\r\\n?/g, \"\\n\"));\n                        // store meta information\n                        // this is useful for other plugins that depends on the paste event\n                        // like the paste rule plugin\n                        tr.setMeta(\"paste\", true);\n                        view.dispatch(tr);\n                        return true;\n                    }\n                }\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-code-block/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-code/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-code/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Code: () => (/* binding */ Code),\n/* harmony export */   \"default\": () => (/* binding */ Code),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst inputRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))$/;\nconst pasteRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))/g;\nconst Code = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"code\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    excludes: \"_\",\n    code: true,\n    exitable: true,\n    parseHTML () {\n        return [\n            {\n                tag: \"code\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"code\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setCode: ()=>({ commands })=>{\n                    return commands.setMark(this.name);\n                },\n            toggleCode: ()=>({ commands })=>{\n                    return commands.toggleMark(this.name);\n                },\n            unsetCode: ()=>({ commands })=>{\n                    return commands.unsetMark(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-e\": ()=>this.editor.commands.toggleCode()\n        };\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: inputRegex,\n                type: this.type\n            })\n        ];\n    },\n    addPasteRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: pasteRegex,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tY29kZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1GO0FBRW5GLE1BQU1JLGFBQWE7QUFDbkIsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxPQUFPTiw4Q0FBSUEsQ0FBQ08sTUFBTSxDQUFDO0lBQ3JCQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNIQyxnQkFBZ0IsQ0FBQztRQUNyQjtJQUNKO0lBQ0FDLFVBQVU7SUFDVkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDO1FBQ0ksT0FBTztZQUNIO2dCQUFFQyxLQUFLO1lBQU87U0FDakI7SUFDTDtJQUNBQyxZQUFXLEVBQUVOLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBUVQsNkRBQWVBLENBQUMsSUFBSSxDQUFDZ0IsT0FBTyxDQUFDUCxjQUFjLEVBQUVBO1lBQWlCO1NBQUU7SUFDcEY7SUFDQVE7UUFDSSxPQUFPO1lBQ0hDLFNBQVMsSUFBTSxDQUFDLEVBQUVDLFFBQVEsRUFBRTtvQkFDeEIsT0FBT0EsU0FBU0MsT0FBTyxDQUFDLElBQUksQ0FBQ2IsSUFBSTtnQkFDckM7WUFDQWMsWUFBWSxJQUFNLENBQUMsRUFBRUYsUUFBUSxFQUFFO29CQUMzQixPQUFPQSxTQUFTRyxVQUFVLENBQUMsSUFBSSxDQUFDZixJQUFJO2dCQUN4QztZQUNBZ0IsV0FBVyxJQUFNLENBQUMsRUFBRUosUUFBUSxFQUFFO29CQUMxQixPQUFPQSxTQUFTSyxTQUFTLENBQUMsSUFBSSxDQUFDakIsSUFBSTtnQkFDdkM7UUFDSjtJQUNKO0lBQ0FrQjtRQUNJLE9BQU87WUFDSCxTQUFTLElBQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNQLFFBQVEsQ0FBQ0UsVUFBVTtRQUNsRDtJQUNKO0lBQ0FNO1FBQ0ksT0FBTztZQUNIMUIsMkRBQWFBLENBQUM7Z0JBQ1YyQixNQUFNekI7Z0JBQ04wQixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNuQjtTQUNIO0lBQ0w7SUFDQUM7UUFDSSxPQUFPO1lBQ0g1QiwyREFBYUEsQ0FBQztnQkFDVjBCLE1BQU14QjtnQkFDTnlCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ25CO1NBQ0g7SUFDTDtBQUNKO0FBRXlELENBQ3pELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1jb2RlL2Rpc3QvaW5kZXguanM/MzY2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXJrLCBtZXJnZUF0dHJpYnV0ZXMsIG1hcmtJbnB1dFJ1bGUsIG1hcmtQYXN0ZVJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBpbnB1dFJlZ2V4ID0gLyg/Ol58XFxzKSgoPzpgKSgoPzpbXmBdKykpKD86YCkpJC87XHJcbmNvbnN0IHBhc3RlUmVnZXggPSAvKD86XnxcXHMpKCg/OmApKCg/OlteYF0rKSkoPzpgKSkvZztcclxuY29uc3QgQ29kZSA9IE1hcmsuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdjb2RlJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZXhjbHVkZXM6ICdfJyxcclxuICAgIGNvZGU6IHRydWUsXHJcbiAgICBleGl0YWJsZTogdHJ1ZSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IHRhZzogJ2NvZGUnIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2NvZGUnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldENvZGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZUNvZGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy50b2dnbGVNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVuc2V0Q29kZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnVuc2V0TWFyayh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ01vZC1lJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlQ29kZSgpLFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IGlucHV0UmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHBhc3RlUmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuZXhwb3J0IHsgQ29kZSwgQ29kZSBhcyBkZWZhdWx0LCBpbnB1dFJlZ2V4LCBwYXN0ZVJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJNYXJrIiwibWVyZ2VBdHRyaWJ1dGVzIiwibWFya0lucHV0UnVsZSIsIm1hcmtQYXN0ZVJ1bGUiLCJpbnB1dFJlZ2V4IiwicGFzdGVSZWdleCIsIkNvZGUiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwiZXhjbHVkZXMiLCJjb2RlIiwiZXhpdGFibGUiLCJwYXJzZUhUTUwiLCJ0YWciLCJyZW5kZXJIVE1MIiwib3B0aW9ucyIsImFkZENvbW1hbmRzIiwic2V0Q29kZSIsImNvbW1hbmRzIiwic2V0TWFyayIsInRvZ2dsZUNvZGUiLCJ0b2dnbGVNYXJrIiwidW5zZXRDb2RlIiwidW5zZXRNYXJrIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJlZGl0b3IiLCJhZGRJbnB1dFJ1bGVzIiwiZmluZCIsInR5cGUiLCJhZGRQYXN0ZVJ1bGVzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-document/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tiptap/extension-document/dist/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   \"default\": () => (/* binding */ Document)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst Document = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"doc\",\n    topNode: true,\n    content: \"block+\"\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZG9jdW1lbnQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0M7QUFFcEMsTUFBTUMsV0FBV0QsOENBQUlBLENBQUNFLE1BQU0sQ0FBQztJQUN6QkMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLFNBQVM7QUFDYjtBQUV5QyxDQUN6QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZG9jdW1lbnQvZGlzdC9pbmRleC5qcz9jY2ZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBEb2N1bWVudCA9IE5vZGUuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdkb2MnLFxyXG4gICAgdG9wTm9kZTogdHJ1ZSxcclxuICAgIGNvbnRlbnQ6ICdibG9jaysnLFxyXG59KTtcblxuZXhwb3J0IHsgRG9jdW1lbnQsIERvY3VtZW50IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vZGUiLCJEb2N1bWVudCIsImNyZWF0ZSIsIm5hbWUiLCJ0b3BOb2RlIiwiY29udGVudCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-document/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-dropcursor/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dropcursor: () => (/* binding */ Dropcursor),\n/* harmony export */   \"default\": () => (/* binding */ Dropcursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_dropcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/dropcursor */ \"(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js\");\n\n\nconst Dropcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: \"dropCursor\",\n    addOptions () {\n        return {\n            color: \"currentColor\",\n            width: 1,\n            class: undefined\n        };\n    },\n    addProseMirrorPlugins () {\n        return [\n            (0,_tiptap_pm_dropcursor__WEBPACK_IMPORTED_MODULE_0__.dropCursor)(this.options)\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZHJvcGN1cnNvci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDVTtBQUVuRCxNQUFNRSxhQUFhRixtREFBU0EsQ0FBQ0csTUFBTSxDQUFDO0lBQ2hDQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNIQyxPQUFPO1lBQ1BDLE9BQU87WUFDUEMsT0FBT0M7UUFDWDtJQUNKO0lBQ0FDO1FBQ0ksT0FBTztZQUNIVCxpRUFBVUEsQ0FBQyxJQUFJLENBQUNVLE9BQU87U0FDMUI7SUFDTDtBQUNKO0FBRTZDLENBQzdDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1kcm9wY3Vyc29yL2Rpc3QvaW5kZXguanM/ZjljMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb24gfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuaW1wb3J0IHsgZHJvcEN1cnNvciB9IGZyb20gJ0B0aXB0YXAvcG0vZHJvcGN1cnNvcic7XG5cbmNvbnN0IERyb3BjdXJzb3IgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdkcm9wQ3Vyc29yJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxyXG4gICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgY2xhc3M6IHVuZGVmaW5lZCxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBkcm9wQ3Vyc29yKHRoaXMub3B0aW9ucyksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBEcm9wY3Vyc29yLCBEcm9wY3Vyc29yIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIkV4dGVuc2lvbiIsImRyb3BDdXJzb3IiLCJEcm9wY3Vyc29yIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJjb2xvciIsIndpZHRoIiwiY2xhc3MiLCJ1bmRlZmluZWQiLCJhZGRQcm9zZU1pcnJvclBsdWdpbnMiLCJvcHRpb25zIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-floating-menu/dist/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   FloatingMenuPlugin: () => (/* binding */ FloatingMenuPlugin),\n/* harmony export */   FloatingMenuView: () => (/* binding */ FloatingMenuView),\n/* harmony export */   \"default\": () => (/* binding */ FloatingMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\n\n\n\nclass FloatingMenuView {\n    constructor({ editor, element, view, tippyOptions = {}, shouldShow }){\n        this.preventHide = false;\n        this.shouldShow = ({ view, state })=>{\n            const { selection } = state;\n            const { $anchor, empty } = selection;\n            const isRootDepth = $anchor.depth === 1;\n            const isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent;\n            if (!view.hasFocus() || !empty || !isRootDepth || !isEmptyTextBlock || !this.editor.isEditable) {\n                return false;\n            }\n            return true;\n        };\n        this.mousedownHandler = ()=>{\n            this.preventHide = true;\n        };\n        this.focusHandler = ()=>{\n            // we use `setTimeout` to make sure `selection` is already updated\n            setTimeout(()=>this.update(this.editor.view));\n        };\n        this.blurHandler = ({ event })=>{\n            var _a;\n            if (this.preventHide) {\n                this.preventHide = false;\n                return;\n            }\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n                return;\n            }\n            this.hide();\n        };\n        this.tippyBlurHandler = (event)=>{\n            this.blurHandler({\n                event\n            });\n        };\n        this.editor = editor;\n        this.element = element;\n        this.view = view;\n        if (shouldShow) {\n            this.shouldShow = shouldShow;\n        }\n        this.element.addEventListener(\"mousedown\", this.mousedownHandler, {\n            capture: true\n        });\n        this.editor.on(\"focus\", this.focusHandler);\n        this.editor.on(\"blur\", this.blurHandler);\n        this.tippyOptions = tippyOptions;\n        // Detaches menu content from its current parent\n        this.element.remove();\n        this.element.style.visibility = \"visible\";\n    }\n    createTooltip() {\n        const { element: editorElement } = this.editor.options;\n        const editorIsAttached = !!editorElement.parentElement;\n        if (this.tippy || !editorIsAttached) {\n            return;\n        }\n        this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(editorElement, {\n            duration: 0,\n            getReferenceClientRect: null,\n            content: this.element,\n            interactive: true,\n            trigger: \"manual\",\n            placement: \"right\",\n            hideOnClick: \"toggle\",\n            ...this.tippyOptions\n        });\n        // maybe we have to hide tippy on its own blur event as well\n        if (this.tippy.popper.firstChild) {\n            this.tippy.popper.firstChild.addEventListener(\"blur\", this.tippyBlurHandler);\n        }\n    }\n    update(view, oldState) {\n        var _a, _b, _c;\n        const { state } = view;\n        const { doc, selection } = state;\n        const { from, to } = selection;\n        const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n        if (isSame) {\n            return;\n        }\n        this.createTooltip();\n        const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n            editor: this.editor,\n            view,\n            state,\n            oldState\n        });\n        if (!shouldShow) {\n            this.hide();\n            return;\n        }\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n            getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (()=>(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.posToDOMRect)(view, from, to))\n        });\n        this.show();\n    }\n    show() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n    }\n    hide() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n    destroy() {\n        var _a, _b;\n        if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\n            this.tippy.popper.firstChild.removeEventListener(\"blur\", this.tippyBlurHandler);\n        }\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\n        this.element.removeEventListener(\"mousedown\", this.mousedownHandler, {\n            capture: true\n        });\n        this.editor.off(\"focus\", this.focusHandler);\n        this.editor.off(\"blur\", this.blurHandler);\n    }\n}\nconst FloatingMenuPlugin = (options)=>{\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        key: typeof options.pluginKey === \"string\" ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\n        view: (view)=>new FloatingMenuView({\n                view,\n                ...options\n            })\n    });\n};\nconst FloatingMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Extension.create({\n    name: \"floatingMenu\",\n    addOptions () {\n        return {\n            element: null,\n            tippyOptions: {},\n            pluginKey: \"floatingMenu\",\n            shouldShow: null\n        };\n    },\n    addProseMirrorPlugins () {\n        if (!this.options.element) {\n            return [];\n        }\n        return [\n            FloatingMenuPlugin({\n                pluginKey: this.options.pluginKey,\n                editor: this.editor,\n                element: this.options.element,\n                tippyOptions: this.options.tippyOptions,\n                shouldShow: this.options.shouldShow\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-gapcursor/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Gapcursor: () => (/* binding */ Gapcursor),\n/* harmony export */   \"default\": () => (/* binding */ Gapcursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/gapcursor */ \"(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\");\n\n\nconst Gapcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: \"gapCursor\",\n    addProseMirrorPlugins () {\n        return [\n            (0,_tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)()\n        ];\n    },\n    extendNodeSchema (extension) {\n        var _a;\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage\n        };\n        return {\n            allowGapCursor: (_a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.callOrReturn)((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.getExtensionField)(extension, \"allowGapCursor\", context))) !== null && _a !== void 0 ? _a : null\n        };\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZ2FwY3Vyc29yL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwRTtBQUN6QjtBQUVqRCxNQUFNSSxZQUFZSixtREFBU0EsQ0FBQ0ssTUFBTSxDQUFDO0lBQy9CQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNISiwrREFBU0E7U0FDWjtJQUNMO0lBQ0FLLGtCQUFpQkMsU0FBUztRQUN0QixJQUFJQztRQUNKLE1BQU1DLFVBQVU7WUFDWkwsTUFBTUcsVUFBVUgsSUFBSTtZQUNwQk0sU0FBU0gsVUFBVUcsT0FBTztZQUMxQkMsU0FBU0osVUFBVUksT0FBTztRQUM5QjtRQUNBLE9BQU87WUFDSEMsZ0JBQWdCLENBQUNKLEtBQUtULDBEQUFZQSxDQUFDQywrREFBaUJBLENBQUNPLFdBQVcsa0JBQWtCRSxTQUFRLE1BQU8sUUFBUUQsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDbEk7SUFDSjtBQUNKO0FBRTJDLENBQzNDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1nYXBjdXJzb3IvZGlzdC9pbmRleC5qcz8wZGY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVuc2lvbiwgY2FsbE9yUmV0dXJuLCBnZXRFeHRlbnNpb25GaWVsZCB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5pbXBvcnQgeyBnYXBDdXJzb3IgfSBmcm9tICdAdGlwdGFwL3BtL2dhcGN1cnNvcic7XG5cbmNvbnN0IEdhcGN1cnNvciA9IEV4dGVuc2lvbi5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ2dhcEN1cnNvcicsXHJcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgZ2FwQ3Vyc29yKCksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICBleHRlbmROb2RlU2NoZW1hKGV4dGVuc2lvbikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcclxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYWxsb3dHYXBDdXJzb3I6IChfYSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhbGxvd0dhcEN1cnNvcicsIGNvbnRleHQpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbCxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEdhcGN1cnNvciwgR2FwY3Vyc29yIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIkV4dGVuc2lvbiIsImNhbGxPclJldHVybiIsImdldEV4dGVuc2lvbkZpZWxkIiwiZ2FwQ3Vyc29yIiwiR2FwY3Vyc29yIiwiY3JlYXRlIiwibmFtZSIsImFkZFByb3NlTWlycm9yUGx1Z2lucyIsImV4dGVuZE5vZGVTY2hlbWEiLCJleHRlbnNpb24iLCJfYSIsImNvbnRleHQiLCJvcHRpb25zIiwic3RvcmFnZSIsImFsbG93R2FwQ3Vyc29yIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-hard-break/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HardBreak: () => (/* binding */ HardBreak),\n/* harmony export */   \"default\": () => (/* binding */ HardBreak)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst HardBreak = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"hardBreak\",\n    addOptions () {\n        return {\n            keepMarks: true,\n            HTMLAttributes: {}\n        };\n    },\n    inline: true,\n    group: \"inline\",\n    selectable: false,\n    parseHTML () {\n        return [\n            {\n                tag: \"br\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"br\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)\n        ];\n    },\n    renderText () {\n        return \"\\n\";\n    },\n    addCommands () {\n        return {\n            setHardBreak: ()=>({ commands, chain, state, editor })=>{\n                    return commands.first([\n                        ()=>commands.exitCode(),\n                        ()=>commands.command(()=>{\n                                const { selection, storedMarks } = state;\n                                if (selection.$from.parent.type.spec.isolating) {\n                                    return false;\n                                }\n                                const { keepMarks } = this.options;\n                                const { splittableMarks } = editor.extensionManager;\n                                const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n                                return chain().insertContent({\n                                    type: this.name\n                                }).command(({ tr, dispatch })=>{\n                                    if (dispatch && marks && keepMarks) {\n                                        const filteredMarks = marks.filter((mark)=>splittableMarks.includes(mark.type.name));\n                                        tr.ensureMarks(filteredMarks);\n                                    }\n                                    return true;\n                                }).run();\n                            })\n                    ]);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-Enter\": ()=>this.editor.commands.setHardBreak(),\n            \"Shift-Enter\": ()=>this.editor.commands.setHardBreak()\n        };\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGFyZC1icmVhay9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUVyRCxNQUFNRSxZQUFZRiw4Q0FBSUEsQ0FBQ0csTUFBTSxDQUFDO0lBQzFCQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNIQyxXQUFXO1lBQ1hDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUMsUUFBUTtJQUNSQyxPQUFPO0lBQ1BDLFlBQVk7SUFDWkM7UUFDSSxPQUFPO1lBQ0g7Z0JBQUVDLEtBQUs7WUFBSztTQUNmO0lBQ0w7SUFDQUMsWUFBVyxFQUFFTixjQUFjLEVBQUU7UUFDekIsT0FBTztZQUFDO1lBQU1OLDZEQUFlQSxDQUFDLElBQUksQ0FBQ2EsT0FBTyxDQUFDUCxjQUFjLEVBQUVBO1NBQWdCO0lBQy9FO0lBQ0FRO1FBQ0ksT0FBTztJQUNYO0lBQ0FDO1FBQ0ksT0FBTztZQUNIQyxjQUFjLElBQU0sQ0FBQyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUc7b0JBQ3BELE9BQU9ILFNBQVNJLEtBQUssQ0FBQzt3QkFDbEIsSUFBTUosU0FBU0ssUUFBUTt3QkFDdkIsSUFBTUwsU0FBU00sT0FBTyxDQUFDO2dDQUNuQixNQUFNLEVBQUVDLFNBQVMsRUFBRUMsV0FBVyxFQUFFLEdBQUdOO2dDQUNuQyxJQUFJSyxVQUFVRSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxJQUFJLENBQUNDLFNBQVMsRUFBRTtvQ0FDNUMsT0FBTztnQ0FDWDtnQ0FDQSxNQUFNLEVBQUV6QixTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUNRLE9BQU87Z0NBQ2xDLE1BQU0sRUFBRWtCLGVBQWUsRUFBRSxHQUFHWCxPQUFPWSxnQkFBZ0I7Z0NBQ25ELE1BQU1DLFFBQVFSLGVBQ05ELFVBQVVVLEdBQUcsQ0FBQ0MsWUFBWSxJQUFJWCxVQUFVRSxLQUFLLENBQUNPLEtBQUs7Z0NBQzNELE9BQU9mLFFBQ0ZrQixhQUFhLENBQUM7b0NBQUVSLE1BQU0sSUFBSSxDQUFDekIsSUFBSTtnQ0FBQyxHQUNoQ29CLE9BQU8sQ0FBQyxDQUFDLEVBQUVjLEVBQUUsRUFBRUMsUUFBUSxFQUFFO29DQUMxQixJQUFJQSxZQUFZTCxTQUFTNUIsV0FBVzt3Q0FDaEMsTUFBTWtDLGdCQUFnQk4sTUFDakJPLE1BQU0sQ0FBQ0MsQ0FBQUEsT0FBUVYsZ0JBQWdCVyxRQUFRLENBQUNELEtBQUtiLElBQUksQ0FBQ3pCLElBQUk7d0NBQzNEa0MsR0FBR00sV0FBVyxDQUFDSjtvQ0FDbkI7b0NBQ0EsT0FBTztnQ0FDWCxHQUNLSyxHQUFHOzRCQUNaO3FCQUNIO2dCQUNMO1FBQ0o7SUFDSjtJQUNBQztRQUNJLE9BQU87WUFDSCxhQUFhLElBQU0sSUFBSSxDQUFDekIsTUFBTSxDQUFDSCxRQUFRLENBQUNELFlBQVk7WUFDcEQsZUFBZSxJQUFNLElBQUksQ0FBQ0ksTUFBTSxDQUFDSCxRQUFRLENBQUNELFlBQVk7UUFDMUQ7SUFDSjtBQUNKO0FBRTJDLENBQzNDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1oYXJkLWJyZWFrL2Rpc3QvaW5kZXguanM/MDE1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBIYXJkQnJlYWsgPSBOb2RlLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnaGFyZEJyZWFrJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAga2VlcE1hcmtzOiB0cnVlLFxyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBpbmxpbmU6IHRydWUsXHJcbiAgICBncm91cDogJ2lubGluZScsXHJcbiAgICBzZWxlY3RhYmxlOiBmYWxzZSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IHRhZzogJ2JyJyB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWydicicsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKV07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVyVGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gJ1xcbic7XHJcbiAgICB9LFxyXG4gICAgYWRkQ29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2V0SGFyZEJyZWFrOiAoKSA9PiAoeyBjb21tYW5kcywgY2hhaW4sIHN0YXRlLCBlZGl0b3IsIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5maXJzdChbXHJcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuZXhpdENvZGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5jb21tYW5kKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzZWxlY3Rpb24sIHN0b3JlZE1hcmtzIH0gPSBzdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbi4kZnJvbS5wYXJlbnQudHlwZS5zcGVjLmlzb2xhdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsga2VlcE1hcmtzIH0gPSB0aGlzLm9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgc3BsaXR0YWJsZU1hcmtzIH0gPSBlZGl0b3IuZXh0ZW5zaW9uTWFuYWdlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya3MgPSBzdG9yZWRNYXJrc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKHNlbGVjdGlvbi4kdG8ucGFyZW50T2Zmc2V0ICYmIHNlbGVjdGlvbi4kZnJvbS5tYXJrcygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYWluKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pbnNlcnRDb250ZW50KHsgdHlwZTogdGhpcy5uYW1lIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29tbWFuZCgoeyB0ciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3BhdGNoICYmIG1hcmtzICYmIGtlZXBNYXJrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkTWFya3MgPSBtYXJrc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKG1hcmsgPT4gc3BsaXR0YWJsZU1hcmtzLmluY2x1ZGVzKG1hcmsudHlwZS5uYW1lKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIuZW5zdXJlTWFya3MoZmlsdGVyZWRNYXJrcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5ydW4oKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ01vZC1FbnRlcic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnNldEhhcmRCcmVhaygpLFxyXG4gICAgICAgICAgICAnU2hpZnQtRW50ZXInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5zZXRIYXJkQnJlYWsoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEhhcmRCcmVhaywgSGFyZEJyZWFrIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vZGUiLCJtZXJnZUF0dHJpYnV0ZXMiLCJIYXJkQnJlYWsiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsImtlZXBNYXJrcyIsIkhUTUxBdHRyaWJ1dGVzIiwiaW5saW5lIiwiZ3JvdXAiLCJzZWxlY3RhYmxlIiwicGFyc2VIVE1MIiwidGFnIiwicmVuZGVySFRNTCIsIm9wdGlvbnMiLCJyZW5kZXJUZXh0IiwiYWRkQ29tbWFuZHMiLCJzZXRIYXJkQnJlYWsiLCJjb21tYW5kcyIsImNoYWluIiwic3RhdGUiLCJlZGl0b3IiLCJmaXJzdCIsImV4aXRDb2RlIiwiY29tbWFuZCIsInNlbGVjdGlvbiIsInN0b3JlZE1hcmtzIiwiJGZyb20iLCJwYXJlbnQiLCJ0eXBlIiwic3BlYyIsImlzb2xhdGluZyIsInNwbGl0dGFibGVNYXJrcyIsImV4dGVuc2lvbk1hbmFnZXIiLCJtYXJrcyIsIiR0byIsInBhcmVudE9mZnNldCIsImluc2VydENvbnRlbnQiLCJ0ciIsImRpc3BhdGNoIiwiZmlsdGVyZWRNYXJrcyIsImZpbHRlciIsIm1hcmsiLCJpbmNsdWRlcyIsImVuc3VyZU1hcmtzIiwicnVuIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-heading/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tiptap/extension-heading/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Heading: () => (/* binding */ Heading),\n/* harmony export */   \"default\": () => (/* binding */ Heading)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst Heading = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"heading\",\n    addOptions () {\n        return {\n            levels: [\n                1,\n                2,\n                3,\n                4,\n                5,\n                6\n            ],\n            HTMLAttributes: {}\n        };\n    },\n    content: \"inline*\",\n    group: \"block\",\n    defining: true,\n    addAttributes () {\n        return {\n            level: {\n                default: 1,\n                rendered: false\n            }\n        };\n    },\n    parseHTML () {\n        return this.options.levels.map((level)=>({\n                tag: `h${level}`,\n                attrs: {\n                    level\n                }\n            }));\n    },\n    renderHTML ({ node, HTMLAttributes }) {\n        const hasLevel = this.options.levels.includes(node.attrs.level);\n        const level = hasLevel ? node.attrs.level : this.options.levels[0];\n        return [\n            `h${level}`,\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setHeading: (attributes)=>({ commands })=>{\n                    if (!this.options.levels.includes(attributes.level)) {\n                        return false;\n                    }\n                    return commands.setNode(this.name, attributes);\n                },\n            toggleHeading: (attributes)=>({ commands })=>{\n                    if (!this.options.levels.includes(attributes.level)) {\n                        return false;\n                    }\n                    return commands.toggleNode(this.name, \"paragraph\", attributes);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return this.options.levels.reduce((items, level)=>({\n                ...items,\n                ...{\n                    [`Mod-Alt-${level}`]: ()=>this.editor.commands.toggleHeading({\n                            level\n                        })\n                }\n            }), {});\n    },\n    addInputRules () {\n        return this.options.levels.map((level)=>{\n            return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.textblockTypeInputRule)({\n                find: new RegExp(`^(#{1,${level}})\\\\s$`),\n                type: this.type,\n                getAttributes: {\n                    level\n                }\n            });\n        });\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGVhZGluZy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RTtBQUU3RSxNQUFNRyxVQUFVSCw4Q0FBSUEsQ0FBQ0ksTUFBTSxDQUFDO0lBQ3hCQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNIQyxRQUFRO2dCQUFDO2dCQUFHO2dCQUFHO2dCQUFHO2dCQUFHO2dCQUFHO2FBQUU7WUFDMUJDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUMsU0FBUztJQUNUQyxPQUFPO0lBQ1BDLFVBQVU7SUFDVkM7UUFDSSxPQUFPO1lBQ0hDLE9BQU87Z0JBQ0hDLFNBQVM7Z0JBQ1RDLFVBQVU7WUFDZDtRQUNKO0lBQ0o7SUFDQUM7UUFDSSxPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDVixNQUFNLENBQ3JCVyxHQUFHLENBQUMsQ0FBQ0wsUUFBVztnQkFDakJNLEtBQUssQ0FBQyxDQUFDLEVBQUVOLE1BQU0sQ0FBQztnQkFDaEJPLE9BQU87b0JBQUVQO2dCQUFNO1lBQ25CO0lBQ0o7SUFDQVEsWUFBVyxFQUFFQyxJQUFJLEVBQUVkLGNBQWMsRUFBRTtRQUMvQixNQUFNZSxXQUFXLElBQUksQ0FBQ04sT0FBTyxDQUFDVixNQUFNLENBQUNpQixRQUFRLENBQUNGLEtBQUtGLEtBQUssQ0FBQ1AsS0FBSztRQUM5RCxNQUFNQSxRQUFRVSxXQUNSRCxLQUFLRixLQUFLLENBQUNQLEtBQUssR0FDaEIsSUFBSSxDQUFDSSxPQUFPLENBQUNWLE1BQU0sQ0FBQyxFQUFFO1FBQzVCLE9BQU87WUFBQyxDQUFDLENBQUMsRUFBRU0sTUFBTSxDQUFDO1lBQUVaLDZEQUFlQSxDQUFDLElBQUksQ0FBQ2dCLE9BQU8sQ0FBQ1QsY0FBYyxFQUFFQTtZQUFpQjtTQUFFO0lBQ3pGO0lBQ0FpQjtRQUNJLE9BQU87WUFDSEMsWUFBWUMsQ0FBQUEsYUFBYyxDQUFDLEVBQUVDLFFBQVEsRUFBRTtvQkFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQ1gsT0FBTyxDQUFDVixNQUFNLENBQUNpQixRQUFRLENBQUNHLFdBQVdkLEtBQUssR0FBRzt3QkFDakQsT0FBTztvQkFDWDtvQkFDQSxPQUFPZSxTQUFTQyxPQUFPLENBQUMsSUFBSSxDQUFDeEIsSUFBSSxFQUFFc0I7Z0JBQ3ZDO1lBQ0FHLGVBQWVILENBQUFBLGFBQWMsQ0FBQyxFQUFFQyxRQUFRLEVBQUU7b0JBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUNYLE9BQU8sQ0FBQ1YsTUFBTSxDQUFDaUIsUUFBUSxDQUFDRyxXQUFXZCxLQUFLLEdBQUc7d0JBQ2pELE9BQU87b0JBQ1g7b0JBQ0EsT0FBT2UsU0FBU0csVUFBVSxDQUFDLElBQUksQ0FBQzFCLElBQUksRUFBRSxhQUFhc0I7Z0JBQ3ZEO1FBQ0o7SUFDSjtJQUNBSztRQUNJLE9BQU8sSUFBSSxDQUFDZixPQUFPLENBQUNWLE1BQU0sQ0FBQzBCLE1BQU0sQ0FBQyxDQUFDQyxPQUFPckIsUUFBVztnQkFDakQsR0FBR3FCLEtBQUs7Z0JBQ1IsR0FBRztvQkFDQyxDQUFDLENBQUMsUUFBUSxFQUFFckIsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFNLElBQUksQ0FBQ3NCLE1BQU0sQ0FBQ1AsUUFBUSxDQUFDRSxhQUFhLENBQUM7NEJBQUVqQjt3QkFBTTtnQkFDM0UsQ0FBQztZQUNMLElBQUksQ0FBQztJQUNUO0lBQ0F1QjtRQUNJLE9BQU8sSUFBSSxDQUFDbkIsT0FBTyxDQUFDVixNQUFNLENBQUNXLEdBQUcsQ0FBQ0wsQ0FBQUE7WUFDM0IsT0FBT1gsb0VBQXNCQSxDQUFDO2dCQUMxQm1DLE1BQU0sSUFBSUMsT0FBTyxDQUFDLE1BQU0sRUFBRXpCLE1BQU0sTUFBTSxDQUFDO2dCQUN2QzBCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO2dCQUNmQyxlQUFlO29CQUNYM0I7Z0JBQ0o7WUFDSjtRQUNKO0lBQ0o7QUFDSjtBQUV1QyxDQUN2QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGVhZGluZy9kaXN0L2luZGV4LmpzP2QzMDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzLCB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3QgSGVhZGluZyA9IE5vZGUuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdoZWFkaW5nJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGV2ZWxzOiBbMSwgMiwgMywgNCwgNSwgNl0sXHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGNvbnRlbnQ6ICdpbmxpbmUqJyxcclxuICAgIGdyb3VwOiAnYmxvY2snLFxyXG4gICAgZGVmaW5pbmc6IHRydWUsXHJcbiAgICBhZGRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxldmVsOiB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGV2ZWxzXHJcbiAgICAgICAgICAgIC5tYXAoKGxldmVsKSA9PiAoe1xyXG4gICAgICAgICAgICB0YWc6IGBoJHtsZXZlbH1gLFxyXG4gICAgICAgICAgICBhdHRyczogeyBsZXZlbCB9LFxyXG4gICAgICAgIH0pKTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgbm9kZSwgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIGNvbnN0IGhhc0xldmVsID0gdGhpcy5vcHRpb25zLmxldmVscy5pbmNsdWRlcyhub2RlLmF0dHJzLmxldmVsKTtcclxuICAgICAgICBjb25zdCBsZXZlbCA9IGhhc0xldmVsXHJcbiAgICAgICAgICAgID8gbm9kZS5hdHRycy5sZXZlbFxyXG4gICAgICAgICAgICA6IHRoaXMub3B0aW9ucy5sZXZlbHNbMF07XHJcbiAgICAgICAgcmV0dXJuIFtgaCR7bGV2ZWx9YCwgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRIZWFkaW5nOiBhdHRyaWJ1dGVzID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmxldmVscy5pbmNsdWRlcyhhdHRyaWJ1dGVzLmxldmVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXROb2RlKHRoaXMubmFtZSwgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZUhlYWRpbmc6IGF0dHJpYnV0ZXMgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubGV2ZWxzLmluY2x1ZGVzKGF0dHJpYnV0ZXMubGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU5vZGUodGhpcy5uYW1lLCAncGFyYWdyYXBoJywgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxldmVscy5yZWR1Y2UoKGl0ZW1zLCBsZXZlbCkgPT4gKHtcclxuICAgICAgICAgICAgLi4uaXRlbXMsXHJcbiAgICAgICAgICAgIC4uLntcclxuICAgICAgICAgICAgICAgIFtgTW9kLUFsdC0ke2xldmVsfWBdOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVIZWFkaW5nKHsgbGV2ZWwgfSksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSksIHt9KTtcclxuICAgIH0sXHJcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGV2ZWxzLm1hcChsZXZlbCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IG5ldyBSZWdFeHAoYF4oI3sxLCR7bGV2ZWx9fSlcXFxccyRgKSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgICAgIGdldEF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEhlYWRpbmcsIEhlYWRpbmcgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTm9kZSIsIm1lcmdlQXR0cmlidXRlcyIsInRleHRibG9ja1R5cGVJbnB1dFJ1bGUiLCJIZWFkaW5nIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJsZXZlbHMiLCJIVE1MQXR0cmlidXRlcyIsImNvbnRlbnQiLCJncm91cCIsImRlZmluaW5nIiwiYWRkQXR0cmlidXRlcyIsImxldmVsIiwiZGVmYXVsdCIsInJlbmRlcmVkIiwicGFyc2VIVE1MIiwib3B0aW9ucyIsIm1hcCIsInRhZyIsImF0dHJzIiwicmVuZGVySFRNTCIsIm5vZGUiLCJoYXNMZXZlbCIsImluY2x1ZGVzIiwiYWRkQ29tbWFuZHMiLCJzZXRIZWFkaW5nIiwiYXR0cmlidXRlcyIsImNvbW1hbmRzIiwic2V0Tm9kZSIsInRvZ2dsZUhlYWRpbmciLCJ0b2dnbGVOb2RlIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJyZWR1Y2UiLCJpdGVtcyIsImVkaXRvciIsImFkZElucHV0UnVsZXMiLCJmaW5kIiwiUmVnRXhwIiwidHlwZSIsImdldEF0dHJpYnV0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-heading/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-history/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tiptap/extension-history/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   History: () => (/* binding */ History),\n/* harmony export */   \"default\": () => (/* binding */ History)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/history */ \"(ssr)/./node_modules/@tiptap/pm/history/dist/index.js\");\n\n\nconst History = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: \"history\",\n    addOptions () {\n        return {\n            depth: 100,\n            newGroupDelay: 500\n        };\n    },\n    addCommands () {\n        return {\n            undo: ()=>({ state, dispatch })=>{\n                    return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.undo)(state, dispatch);\n                },\n            redo: ()=>({ state, dispatch })=>{\n                    return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.redo)(state, dispatch);\n                }\n        };\n    },\n    addProseMirrorPlugins () {\n        return [\n            (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.history)(this.options)\n        ];\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-z\": ()=>this.editor.commands.undo(),\n            \"Mod-Z\": ()=>this.editor.commands.undo(),\n            \"Mod-y\": ()=>this.editor.commands.redo(),\n            \"Mod-Y\": ()=>this.editor.commands.redo(),\n            \"Shift-Mod-z\": ()=>this.editor.commands.redo(),\n            \"Shift-Mod-Z\": ()=>this.editor.commands.redo(),\n            // Russian keyboard layouts\n            \"Mod-я\": ()=>this.editor.commands.undo(),\n            \"Shift-Mod-я\": ()=>this.editor.commands.redo()\n        };\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGlzdG9yeS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDZ0I7QUFFekQsTUFBTUksVUFBVUosbURBQVNBLENBQUNLLE1BQU0sQ0FBQztJQUM3QkMsTUFBTTtJQUNOQztRQUNJLE9BQU87WUFDSEMsT0FBTztZQUNQQyxlQUFlO1FBQ25CO0lBQ0o7SUFDQUM7UUFDSSxPQUFPO1lBQ0hULE1BQU0sSUFBTSxDQUFDLEVBQUVVLEtBQUssRUFBRUMsUUFBUSxFQUFFO29CQUM1QixPQUFPWCx3REFBSUEsQ0FBQ1UsT0FBT0M7Z0JBQ3ZCO1lBQ0FWLE1BQU0sSUFBTSxDQUFDLEVBQUVTLEtBQUssRUFBRUMsUUFBUSxFQUFFO29CQUM1QixPQUFPVix3REFBSUEsQ0FBQ1MsT0FBT0M7Z0JBQ3ZCO1FBQ0o7SUFDSjtJQUNBQztRQUNJLE9BQU87WUFDSFYsMkRBQU9BLENBQUMsSUFBSSxDQUFDVyxPQUFPO1NBQ3ZCO0lBQ0w7SUFDQUM7UUFDSSxPQUFPO1lBQ0gsU0FBUyxJQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxRQUFRLENBQUNoQixJQUFJO1lBQ3hDLFNBQVMsSUFBTSxJQUFJLENBQUNlLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDaEIsSUFBSTtZQUN4QyxTQUFTLElBQU0sSUFBSSxDQUFDZSxNQUFNLENBQUNDLFFBQVEsQ0FBQ2YsSUFBSTtZQUN4QyxTQUFTLElBQU0sSUFBSSxDQUFDYyxNQUFNLENBQUNDLFFBQVEsQ0FBQ2YsSUFBSTtZQUN4QyxlQUFlLElBQU0sSUFBSSxDQUFDYyxNQUFNLENBQUNDLFFBQVEsQ0FBQ2YsSUFBSTtZQUM5QyxlQUFlLElBQU0sSUFBSSxDQUFDYyxNQUFNLENBQUNDLFFBQVEsQ0FBQ2YsSUFBSTtZQUM5QywyQkFBMkI7WUFDM0IsU0FBUyxJQUFNLElBQUksQ0FBQ2MsTUFBTSxDQUFDQyxRQUFRLENBQUNoQixJQUFJO1lBQ3hDLGVBQWUsSUFBTSxJQUFJLENBQUNlLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDZixJQUFJO1FBQ2xEO0lBQ0o7QUFDSjtBQUV1QyxDQUN2QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGlzdG9yeS9kaXN0L2luZGV4LmpzPzI2ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5zaW9uIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcbmltcG9ydCB7IHVuZG8sIHJlZG8sIGhpc3RvcnkgfSBmcm9tICdAdGlwdGFwL3BtL2hpc3RvcnknO1xuXG5jb25zdCBIaXN0b3J5ID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnaGlzdG9yeScsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRlcHRoOiAxMDAsXHJcbiAgICAgICAgICAgIG5ld0dyb3VwRGVsYXk6IDUwMCxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVuZG86ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kbyhzdGF0ZSwgZGlzcGF0Y2gpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWRvOiAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZG8oc3RhdGUsIGRpc3BhdGNoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBoaXN0b3J5KHRoaXMub3B0aW9ucyksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnTW9kLXonOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy51bmRvKCksXHJcbiAgICAgICAgICAgICdNb2QtWic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnVuZG8oKSxcclxuICAgICAgICAgICAgJ01vZC15JzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMucmVkbygpLFxyXG4gICAgICAgICAgICAnTW9kLVknOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5yZWRvKCksXHJcbiAgICAgICAgICAgICdTaGlmdC1Nb2Qteic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnJlZG8oKSxcclxuICAgICAgICAgICAgJ1NoaWZ0LU1vZC1aJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMucmVkbygpLFxyXG4gICAgICAgICAgICAvLyBSdXNzaWFuIGtleWJvYXJkIGxheW91dHNcclxuICAgICAgICAgICAgJ01vZC3Rjyc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnVuZG8oKSxcclxuICAgICAgICAgICAgJ1NoaWZ0LU1vZC3Rjyc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnJlZG8oKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEhpc3RvcnksIEhpc3RvcnkgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiRXh0ZW5zaW9uIiwidW5kbyIsInJlZG8iLCJoaXN0b3J5IiwiSGlzdG9yeSIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiZGVwdGgiLCJuZXdHcm91cERlbGF5IiwiYWRkQ29tbWFuZHMiLCJzdGF0ZSIsImRpc3BhdGNoIiwiYWRkUHJvc2VNaXJyb3JQbHVnaW5zIiwib3B0aW9ucyIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiZWRpdG9yIiwiY29tbWFuZHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-horizontal-rule/dist/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HorizontalRule: () => (/* binding */ HorizontalRule),\n/* harmony export */   \"default\": () => (/* binding */ HorizontalRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n\n\nconst HorizontalRule = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Node.create({\n    name: \"horizontalRule\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    group: \"block\",\n    parseHTML () {\n        return [\n            {\n                tag: \"hr\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"hr\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)\n        ];\n    },\n    addCommands () {\n        return {\n            setHorizontalRule: ()=>({ chain, state })=>{\n                    const { $to: $originTo } = state.selection;\n                    const currentChain = chain();\n                    if ($originTo.parentOffset === 0) {\n                        currentChain.insertContentAt(Math.max($originTo.pos - 2, 0), {\n                            type: this.name\n                        });\n                    } else {\n                        currentChain.insertContent({\n                            type: this.name\n                        });\n                    }\n                    return currentChain// set cursor after horizontal rule\n                    .command(({ tr, dispatch })=>{\n                        var _a;\n                        if (dispatch) {\n                            const { $to } = tr.selection;\n                            const posAfter = $to.end();\n                            if ($to.nodeAfter) {\n                                if ($to.nodeAfter.isTextblock) {\n                                    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(tr.doc, $to.pos + 1));\n                                } else if ($to.nodeAfter.isBlock) {\n                                    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(tr.doc, $to.pos));\n                                } else {\n                                    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(tr.doc, $to.pos));\n                                }\n                            } else {\n                                // add node after horizontal rule if it’s the end of the document\n                                const node = (_a = $to.parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();\n                                if (node) {\n                                    tr.insert(posAfter, node);\n                                    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(tr.doc, posAfter + 1));\n                                }\n                            }\n                            tr.scrollIntoView();\n                        }\n                        return true;\n                    }).run();\n                }\n        };\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.nodeInputRule)({\n                find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taG9yaXpvbnRhbC1ydWxlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRTtBQUNKO0FBRWhFLE1BQU1LLGlCQUFpQkwsOENBQUlBLENBQUNNLE1BQU0sQ0FBQztJQUMvQkMsTUFBTTtJQUNOQztRQUNJLE9BQU87WUFDSEMsZ0JBQWdCLENBQUM7UUFDckI7SUFDSjtJQUNBQyxPQUFPO0lBQ1BDO1FBQ0ksT0FBTztZQUFDO2dCQUFFQyxLQUFLO1lBQUs7U0FBRTtJQUMxQjtJQUNBQyxZQUFXLEVBQUVKLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBTVIsNkRBQWVBLENBQUMsSUFBSSxDQUFDYSxPQUFPLENBQUNMLGNBQWMsRUFBRUE7U0FBZ0I7SUFDL0U7SUFDQU07UUFDSSxPQUFPO1lBQ0hDLG1CQUFtQixJQUFNLENBQUMsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7b0JBQ3RDLE1BQU0sRUFBRUMsS0FBS0MsU0FBUyxFQUFFLEdBQUdGLE1BQU1HLFNBQVM7b0JBQzFDLE1BQU1DLGVBQWVMO29CQUNyQixJQUFJRyxVQUFVRyxZQUFZLEtBQUssR0FBRzt3QkFDOUJELGFBQWFFLGVBQWUsQ0FBQ0MsS0FBS0MsR0FBRyxDQUFDTixVQUFVTyxHQUFHLEdBQUcsR0FBRyxJQUFJOzRCQUFFQyxNQUFNLElBQUksQ0FBQ3JCLElBQUk7d0JBQUM7b0JBQ25GLE9BQ0s7d0JBQ0RlLGFBQWFPLGFBQWEsQ0FBQzs0QkFBRUQsTUFBTSxJQUFJLENBQUNyQixJQUFJO3dCQUFDO29CQUNqRDtvQkFDQSxPQUFRZSxZQUNKLG1DQUFtQztxQkFDbENRLE9BQU8sQ0FBQyxDQUFDLEVBQUVDLEVBQUUsRUFBRUMsUUFBUSxFQUFFO3dCQUMxQixJQUFJQzt3QkFDSixJQUFJRCxVQUFVOzRCQUNWLE1BQU0sRUFBRWIsR0FBRyxFQUFFLEdBQUdZLEdBQUdWLFNBQVM7NEJBQzVCLE1BQU1hLFdBQVdmLElBQUlnQixHQUFHOzRCQUN4QixJQUFJaEIsSUFBSWlCLFNBQVMsRUFBRTtnQ0FDZixJQUFJakIsSUFBSWlCLFNBQVMsQ0FBQ0MsV0FBVyxFQUFFO29DQUMzQk4sR0FBR08sWUFBWSxDQUFDbkMsMkRBQWFBLENBQUNHLE1BQU0sQ0FBQ3lCLEdBQUdRLEdBQUcsRUFBRXBCLElBQUlRLEdBQUcsR0FBRztnQ0FDM0QsT0FDSyxJQUFJUixJQUFJaUIsU0FBUyxDQUFDSSxPQUFPLEVBQUU7b0NBQzVCVCxHQUFHTyxZQUFZLENBQUNsQywyREFBYUEsQ0FBQ0UsTUFBTSxDQUFDeUIsR0FBR1EsR0FBRyxFQUFFcEIsSUFBSVEsR0FBRztnQ0FDeEQsT0FDSztvQ0FDREksR0FBR08sWUFBWSxDQUFDbkMsMkRBQWFBLENBQUNHLE1BQU0sQ0FBQ3lCLEdBQUdRLEdBQUcsRUFBRXBCLElBQUlRLEdBQUc7Z0NBQ3hEOzRCQUNKLE9BQ0s7Z0NBQ0QsaUVBQWlFO2dDQUNqRSxNQUFNYyxPQUFPLENBQUNSLEtBQUtkLElBQUl1QixNQUFNLENBQUNkLElBQUksQ0FBQ2UsWUFBWSxDQUFDQyxXQUFXLE1BQU0sUUFBUVgsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHM0IsTUFBTTtnQ0FDM0csSUFBSW1DLE1BQU07b0NBQ05WLEdBQUdjLE1BQU0sQ0FBQ1gsVUFBVU87b0NBQ3BCVixHQUFHTyxZQUFZLENBQUNuQywyREFBYUEsQ0FBQ0csTUFBTSxDQUFDeUIsR0FBR1EsR0FBRyxFQUFFTCxXQUFXO2dDQUM1RDs0QkFDSjs0QkFDQUgsR0FBR2UsY0FBYzt3QkFDckI7d0JBQ0EsT0FBTztvQkFDWCxHQUNLQyxHQUFHO2dCQUNaO1FBQ0o7SUFDSjtJQUNBQztRQUNJLE9BQU87WUFDSDlDLDJEQUFhQSxDQUFDO2dCQUNWK0MsTUFBTTtnQkFDTnJCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ25CO1NBQ0g7SUFDTDtBQUNKO0FBRXFELENBQ3JELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1ob3Jpem9udGFsLXJ1bGUvZGlzdC9pbmRleC5qcz8yNzAxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUsIG1lcmdlQXR0cmlidXRlcywgbm9kZUlucHV0UnVsZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5pbXBvcnQgeyBUZXh0U2VsZWN0aW9uLCBOb2RlU2VsZWN0aW9uIH0gZnJvbSAnQHRpcHRhcC9wbS9zdGF0ZSc7XG5cbmNvbnN0IEhvcml6b250YWxSdWxlID0gTm9kZS5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ2hvcml6b250YWxSdWxlJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZ3JvdXA6ICdibG9jaycsXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFt7IHRhZzogJ2hyJyB9XTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2hyJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRIb3Jpem9udGFsUnVsZTogKCkgPT4gKHsgY2hhaW4sIHN0YXRlIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgJHRvOiAkb3JpZ2luVG8gfSA9IHN0YXRlLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGFpbiA9IGNoYWluKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJG9yaWdpblRvLnBhcmVudE9mZnNldCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDaGFpbi5pbnNlcnRDb250ZW50QXQoTWF0aC5tYXgoJG9yaWdpblRvLnBvcyAtIDIsIDApLCB7IHR5cGU6IHRoaXMubmFtZSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDaGFpbi5pbnNlcnRDb250ZW50KHsgdHlwZTogdGhpcy5uYW1lIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjdXJyZW50Q2hhaW5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY3Vyc29yIGFmdGVyIGhvcml6b250YWwgcnVsZVxyXG4gICAgICAgICAgICAgICAgICAgIC5jb21tYW5kKCh7IHRyLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7ICR0byB9ID0gdHIuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NBZnRlciA9ICR0by5lbmQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0by5ub2RlQWZ0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdG8ubm9kZUFmdGVyLmlzVGV4dGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIuc2V0U2VsZWN0aW9uKFRleHRTZWxlY3Rpb24uY3JlYXRlKHRyLmRvYywgJHRvLnBvcyArIDEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCR0by5ub2RlQWZ0ZXIuaXNCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihOb2RlU2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsICR0by5wb3MpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihUZXh0U2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsICR0by5wb3MpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBub2RlIGFmdGVyIGhvcml6b250YWwgcnVsZSBpZiBpdOKAmXMgdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSAoX2EgPSAkdG8ucGFyZW50LnR5cGUuY29udGVudE1hdGNoLmRlZmF1bHRUeXBlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyLmluc2VydChwb3NBZnRlciwgbm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIuc2V0U2VsZWN0aW9uKFRleHRTZWxlY3Rpb24uY3JlYXRlKHRyLmRvYywgcG9zQWZ0ZXIgKyAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHIuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5ydW4oKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG5vZGVJbnB1dFJ1bGUoe1xyXG4gICAgICAgICAgICAgICAgZmluZDogL14oPzotLS184oCULXxfX19cXHN8XFwqXFwqXFwqXFxzKSQvLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEhvcml6b250YWxSdWxlLCBIb3Jpem9udGFsUnVsZSBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwibWVyZ2VBdHRyaWJ1dGVzIiwibm9kZUlucHV0UnVsZSIsIlRleHRTZWxlY3Rpb24iLCJOb2RlU2VsZWN0aW9uIiwiSG9yaXpvbnRhbFJ1bGUiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwiZ3JvdXAiLCJwYXJzZUhUTUwiLCJ0YWciLCJyZW5kZXJIVE1MIiwib3B0aW9ucyIsImFkZENvbW1hbmRzIiwic2V0SG9yaXpvbnRhbFJ1bGUiLCJjaGFpbiIsInN0YXRlIiwiJHRvIiwiJG9yaWdpblRvIiwic2VsZWN0aW9uIiwiY3VycmVudENoYWluIiwicGFyZW50T2Zmc2V0IiwiaW5zZXJ0Q29udGVudEF0IiwiTWF0aCIsIm1heCIsInBvcyIsInR5cGUiLCJpbnNlcnRDb250ZW50IiwiY29tbWFuZCIsInRyIiwiZGlzcGF0Y2giLCJfYSIsInBvc0FmdGVyIiwiZW5kIiwibm9kZUFmdGVyIiwiaXNUZXh0YmxvY2siLCJzZXRTZWxlY3Rpb24iLCJkb2MiLCJpc0Jsb2NrIiwibm9kZSIsInBhcmVudCIsImNvbnRlbnRNYXRjaCIsImRlZmF1bHRUeXBlIiwiaW5zZXJ0Iiwic2Nyb2xsSW50b1ZpZXciLCJydW4iLCJhZGRJbnB1dFJ1bGVzIiwiZmluZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-italic/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Italic: () => (/* binding */ Italic),\n/* harmony export */   \"default\": () => (/* binding */ Italic),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/;\nconst starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g;\nconst underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/;\nconst underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g;\nconst Italic = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"italic\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"em\"\n            },\n            {\n                tag: \"i\",\n                getAttrs: (node)=>node.style.fontStyle !== \"normal\" && null\n            },\n            {\n                style: \"font-style=italic\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"em\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setItalic: ()=>({ commands })=>{\n                    return commands.setMark(this.name);\n                },\n            toggleItalic: ()=>({ commands })=>{\n                    return commands.toggleMark(this.name);\n                },\n            unsetItalic: ()=>({ commands })=>{\n                    return commands.unsetMark(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-i\": ()=>this.editor.commands.toggleItalic(),\n            \"Mod-I\": ()=>this.editor.commands.toggleItalic()\n        };\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: starInputRegex,\n                type: this.type\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: underscoreInputRegex,\n                type: this.type\n            })\n        ];\n    },\n    addPasteRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: starPasteRegex,\n                type: this.type\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: underscorePasteRegex,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taXRhbGljL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFtRjtBQUVuRixNQUFNSSxpQkFBaUI7QUFDdkIsTUFBTUMsaUJBQWlCO0FBQ3ZCLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyx1QkFBdUI7QUFDN0IsTUFBTUMsU0FBU1IsOENBQUlBLENBQUNTLE1BQU0sQ0FBQztJQUN2QkMsTUFBTTtJQUNOQztRQUNJLE9BQU87WUFDSEMsZ0JBQWdCLENBQUM7UUFDckI7SUFDSjtJQUNBQztRQUNJLE9BQU87WUFDSDtnQkFDSUMsS0FBSztZQUNUO1lBQ0E7Z0JBQ0lBLEtBQUs7Z0JBQ0xDLFVBQVVDLENBQUFBLE9BQVFBLEtBQUtDLEtBQUssQ0FBQ0MsU0FBUyxLQUFLLFlBQVk7WUFDM0Q7WUFDQTtnQkFDSUQsT0FBTztZQUNYO1NBQ0g7SUFDTDtJQUNBRSxZQUFXLEVBQUVQLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBTVgsNkRBQWVBLENBQUMsSUFBSSxDQUFDbUIsT0FBTyxDQUFDUixjQUFjLEVBQUVBO1lBQWlCO1NBQUU7SUFDbEY7SUFDQVM7UUFDSSxPQUFPO1lBQ0hDLFdBQVcsSUFBTSxDQUFDLEVBQUVDLFFBQVEsRUFBRTtvQkFDMUIsT0FBT0EsU0FBU0MsT0FBTyxDQUFDLElBQUksQ0FBQ2QsSUFBSTtnQkFDckM7WUFDQWUsY0FBYyxJQUFNLENBQUMsRUFBRUYsUUFBUSxFQUFFO29CQUM3QixPQUFPQSxTQUFTRyxVQUFVLENBQUMsSUFBSSxDQUFDaEIsSUFBSTtnQkFDeEM7WUFDQWlCLGFBQWEsSUFBTSxDQUFDLEVBQUVKLFFBQVEsRUFBRTtvQkFDNUIsT0FBT0EsU0FBU0ssU0FBUyxDQUFDLElBQUksQ0FBQ2xCLElBQUk7Z0JBQ3ZDO1FBQ0o7SUFDSjtJQUNBbUI7UUFDSSxPQUFPO1lBQ0gsU0FBUyxJQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDUCxRQUFRLENBQUNFLFlBQVk7WUFDaEQsU0FBUyxJQUFNLElBQUksQ0FBQ0ssTUFBTSxDQUFDUCxRQUFRLENBQUNFLFlBQVk7UUFDcEQ7SUFDSjtJQUNBTTtRQUNJLE9BQU87WUFDSDdCLDJEQUFhQSxDQUFDO2dCQUNWOEIsTUFBTTVCO2dCQUNONkIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7WUFDQS9CLDJEQUFhQSxDQUFDO2dCQUNWOEIsTUFBTTFCO2dCQUNOMkIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7U0FDSDtJQUNMO0lBQ0FDO1FBQ0ksT0FBTztZQUNIL0IsMkRBQWFBLENBQUM7Z0JBQ1Y2QixNQUFNM0I7Z0JBQ040QixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNuQjtZQUNBOUIsMkRBQWFBLENBQUM7Z0JBQ1Y2QixNQUFNekI7Z0JBQ04wQixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNuQjtTQUNIO0lBQ0w7QUFDSjtBQUVpSCxDQUNqSCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taXRhbGljL2Rpc3QvaW5kZXguanM/MTM3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXJrLCBtZXJnZUF0dHJpYnV0ZXMsIG1hcmtJbnB1dFJ1bGUsIG1hcmtQYXN0ZVJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBzdGFySW5wdXRSZWdleCA9IC8oPzpefFxccykoKD86XFwqKSgoPzpbXipdKykpKD86XFwqKSkkLztcclxuY29uc3Qgc3RhclBhc3RlUmVnZXggPSAvKD86XnxcXHMpKCg/OlxcKikoKD86W14qXSspKSg/OlxcKikpL2c7XHJcbmNvbnN0IHVuZGVyc2NvcmVJbnB1dFJlZ2V4ID0gLyg/Ol58XFxzKSgoPzpfKSgoPzpbXl9dKykpKD86XykpJC87XHJcbmNvbnN0IHVuZGVyc2NvcmVQYXN0ZVJlZ2V4ID0gLyg/Ol58XFxzKSgoPzpfKSgoPzpbXl9dKykpKD86XykpL2c7XHJcbmNvbnN0IEl0YWxpYyA9IE1hcmsuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdpdGFsaWMnLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFnOiAnZW0nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdpJyxcclxuICAgICAgICAgICAgICAgIGdldEF0dHJzOiBub2RlID0+IG5vZGUuc3R5bGUuZm9udFN0eWxlICE9PSAnbm9ybWFsJyAmJiBudWxsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZTogJ2ZvbnQtc3R5bGU9aXRhbGljJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XHJcbiAgICAgICAgcmV0dXJuIFsnZW0nLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldEl0YWxpYzogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9nZ2xlSXRhbGljOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudG9nZ2xlTWFyayh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1bnNldEl0YWxpYzogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnVuc2V0TWFyayh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ01vZC1pJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlSXRhbGljKCksXHJcbiAgICAgICAgICAgICdNb2QtSSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZUl0YWxpYygpLFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHN0YXJJbnB1dFJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiB1bmRlcnNjb3JlSW5wdXRSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICBhZGRQYXN0ZVJ1bGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG1hcmtQYXN0ZVJ1bGUoe1xyXG4gICAgICAgICAgICAgICAgZmluZDogc3RhclBhc3RlUmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHVuZGVyc2NvcmVQYXN0ZVJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEl0YWxpYywgSXRhbGljIGFzIGRlZmF1bHQsIHN0YXJJbnB1dFJlZ2V4LCBzdGFyUGFzdGVSZWdleCwgdW5kZXJzY29yZUlucHV0UmVnZXgsIHVuZGVyc2NvcmVQYXN0ZVJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJNYXJrIiwibWVyZ2VBdHRyaWJ1dGVzIiwibWFya0lucHV0UnVsZSIsIm1hcmtQYXN0ZVJ1bGUiLCJzdGFySW5wdXRSZWdleCIsInN0YXJQYXN0ZVJlZ2V4IiwidW5kZXJzY29yZUlucHV0UmVnZXgiLCJ1bmRlcnNjb3JlUGFzdGVSZWdleCIsIkl0YWxpYyIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiSFRNTEF0dHJpYnV0ZXMiLCJwYXJzZUhUTUwiLCJ0YWciLCJnZXRBdHRycyIsIm5vZGUiLCJzdHlsZSIsImZvbnRTdHlsZSIsInJlbmRlckhUTUwiLCJvcHRpb25zIiwiYWRkQ29tbWFuZHMiLCJzZXRJdGFsaWMiLCJjb21tYW5kcyIsInNldE1hcmsiLCJ0b2dnbGVJdGFsaWMiLCJ0b2dnbGVNYXJrIiwidW5zZXRJdGFsaWMiLCJ1bnNldE1hcmsiLCJhZGRLZXlib2FyZFNob3J0Y3V0cyIsImVkaXRvciIsImFkZElucHV0UnVsZXMiLCJmaW5kIiwidHlwZSIsImFkZFBhc3RlUnVsZXMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-list-item/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-list-item/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListItem: () => (/* binding */ ListItem),\n/* harmony export */   \"default\": () => (/* binding */ ListItem)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst ListItem = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"listItem\",\n    addOptions () {\n        return {\n            HTMLAttributes: {},\n            bulletListTypeName: \"bulletList\",\n            orderedListTypeName: \"orderedList\"\n        };\n    },\n    content: \"paragraph block*\",\n    defining: true,\n    parseHTML () {\n        return [\n            {\n                tag: \"li\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"li\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addKeyboardShortcuts () {\n        return {\n            Enter: ()=>this.editor.commands.splitListItem(this.name),\n            Tab: ()=>this.editor.commands.sinkListItem(this.name),\n            \"Shift-Tab\": ()=>this.editor.commands.liftListItem(this.name)\n        };\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tbGlzdC1pdGVtL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELE1BQU1FLFdBQVdGLDhDQUFJQSxDQUFDRyxNQUFNLENBQUM7SUFDekJDLE1BQU07SUFDTkM7UUFDSSxPQUFPO1lBQ0hDLGdCQUFnQixDQUFDO1lBQ2pCQyxvQkFBb0I7WUFDcEJDLHFCQUFxQjtRQUN6QjtJQUNKO0lBQ0FDLFNBQVM7SUFDVEMsVUFBVTtJQUNWQztRQUNJLE9BQU87WUFDSDtnQkFDSUMsS0FBSztZQUNUO1NBQ0g7SUFDTDtJQUNBQyxZQUFXLEVBQUVQLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBTUwsNkRBQWVBLENBQUMsSUFBSSxDQUFDYSxPQUFPLENBQUNSLGNBQWMsRUFBRUE7WUFBaUI7U0FBRTtJQUNsRjtJQUNBUztRQUNJLE9BQU87WUFDSEMsT0FBTyxJQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxJQUFJLENBQUNmLElBQUk7WUFDekRnQixLQUFLLElBQU0sSUFBSSxDQUFDSCxNQUFNLENBQUNDLFFBQVEsQ0FBQ0csWUFBWSxDQUFDLElBQUksQ0FBQ2pCLElBQUk7WUFDdEQsYUFBYSxJQUFNLElBQUksQ0FBQ2EsTUFBTSxDQUFDQyxRQUFRLENBQUNJLFlBQVksQ0FBQyxJQUFJLENBQUNsQixJQUFJO1FBQ2xFO0lBQ0o7QUFDSjtBQUV5QyxDQUN6QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tbGlzdC1pdGVtL2Rpc3QvaW5kZXguanM/NWUyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBMaXN0SXRlbSA9IE5vZGUuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdsaXN0SXRlbScsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICAgICAgYnVsbGV0TGlzdFR5cGVOYW1lOiAnYnVsbGV0TGlzdCcsXHJcbiAgICAgICAgICAgIG9yZGVyZWRMaXN0VHlwZU5hbWU6ICdvcmRlcmVkTGlzdCcsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBjb250ZW50OiAncGFyYWdyYXBoIGJsb2NrKicsXHJcbiAgICBkZWZpbmluZzogdHJ1ZSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdsaScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2xpJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBFbnRlcjogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc3BsaXRMaXN0SXRlbSh0aGlzLm5hbWUpLFxyXG4gICAgICAgICAgICBUYWI6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnNpbmtMaXN0SXRlbSh0aGlzLm5hbWUpLFxyXG4gICAgICAgICAgICAnU2hpZnQtVGFiJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMubGlmdExpc3RJdGVtKHRoaXMubmFtZSksXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBMaXN0SXRlbSwgTGlzdEl0ZW0gYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTm9kZSIsIm1lcmdlQXR0cmlidXRlcyIsIkxpc3RJdGVtIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJIVE1MQXR0cmlidXRlcyIsImJ1bGxldExpc3RUeXBlTmFtZSIsIm9yZGVyZWRMaXN0VHlwZU5hbWUiLCJjb250ZW50IiwiZGVmaW5pbmciLCJwYXJzZUhUTUwiLCJ0YWciLCJyZW5kZXJIVE1MIiwib3B0aW9ucyIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiRW50ZXIiLCJlZGl0b3IiLCJjb21tYW5kcyIsInNwbGl0TGlzdEl0ZW0iLCJUYWIiLCJzaW5rTGlzdEl0ZW0iLCJsaWZ0TGlzdEl0ZW0iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-list-item/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-ordered-list/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-ordered-list/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrderedList: () => (/* binding */ OrderedList),\n/* harmony export */   \"default\": () => (/* binding */ OrderedList),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst ListItem = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"listItem\",\n    addOptions () {\n        return {\n            HTMLAttributes: {},\n            bulletListTypeName: \"bulletList\",\n            orderedListTypeName: \"orderedList\"\n        };\n    },\n    content: \"paragraph block*\",\n    defining: true,\n    parseHTML () {\n        return [\n            {\n                tag: \"li\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"li\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addKeyboardShortcuts () {\n        return {\n            Enter: ()=>this.editor.commands.splitListItem(this.name),\n            Tab: ()=>this.editor.commands.sinkListItem(this.name),\n            \"Shift-Tab\": ()=>this.editor.commands.liftListItem(this.name)\n        };\n    }\n});\nconst TextStyle = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"textStyle\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"span\",\n                getAttrs: (element)=>{\n                    const hasStyles = element.hasAttribute(\"style\");\n                    if (!hasStyles) {\n                        return false;\n                    }\n                    return {};\n                }\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"span\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            removeEmptyTextStyle: ()=>({ state, commands })=>{\n                    const attributes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.getMarkAttributes)(state, this.type);\n                    const hasStyles = Object.entries(attributes).some(([, value])=>!!value);\n                    if (hasStyles) {\n                        return true;\n                    }\n                    return commands.unsetMark(this.name);\n                }\n        };\n    }\n});\nconst inputRegex = /^(\\d+)\\.\\s$/;\nconst OrderedList = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"orderedList\",\n    addOptions () {\n        return {\n            itemTypeName: \"listItem\",\n            HTMLAttributes: {},\n            keepMarks: false,\n            keepAttributes: false\n        };\n    },\n    group: \"block list\",\n    content () {\n        return `${this.options.itemTypeName}+`;\n    },\n    addAttributes () {\n        return {\n            start: {\n                default: 1,\n                parseHTML: (element)=>{\n                    return element.hasAttribute(\"start\") ? parseInt(element.getAttribute(\"start\") || \"\", 10) : 1;\n                }\n            }\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"ol\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        const { start, ...attributesWithoutStart } = HTMLAttributes;\n        return start === 1 ? [\n            \"ol\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, attributesWithoutStart),\n            0\n        ] : [\n            \"ol\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            toggleOrderedList: ()=>({ commands, chain })=>{\n                    if (this.options.keepAttributes) {\n                        return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\n                    }\n                    return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-Shift-7\": ()=>this.editor.commands.toggleOrderedList()\n        };\n    },\n    addInputRules () {\n        let inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n            find: inputRegex,\n            type: this.type,\n            getAttributes: (match)=>({\n                    start: +match[1]\n                }),\n            joinPredicate: (match, node)=>node.childCount + node.attrs.start === +match[1]\n        });\n        if (this.options.keepMarks || this.options.keepAttributes) {\n            inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n                find: inputRegex,\n                type: this.type,\n                keepMarks: this.options.keepMarks,\n                keepAttributes: this.options.keepAttributes,\n                getAttributes: (match)=>({\n                        start: +match[1],\n                        ...this.editor.getAttributes(TextStyle.name)\n                    }),\n                joinPredicate: (match, node)=>node.childCount + node.attrs.start === +match[1],\n                editor: this.editor\n            });\n        }\n        return [\n            inputRule\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-ordered-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-paragraph/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-paragraph/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Paragraph: () => (/* binding */ Paragraph),\n/* harmony export */   \"default\": () => (/* binding */ Paragraph)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst Paragraph = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"paragraph\",\n    priority: 1000,\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    group: \"block\",\n    content: \"inline*\",\n    parseHTML () {\n        return [\n            {\n                tag: \"p\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"p\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setParagraph: ()=>({ commands })=>{\n                    return commands.setNode(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-Alt-0\": ()=>this.editor.commands.setParagraph()\n        };\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tcGFyYWdyYXBoL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELE1BQU1FLFlBQVlGLDhDQUFJQSxDQUFDRyxNQUFNLENBQUM7SUFDMUJDLE1BQU07SUFDTkMsVUFBVTtJQUNWQztRQUNJLE9BQU87WUFDSEMsZ0JBQWdCLENBQUM7UUFDckI7SUFDSjtJQUNBQyxPQUFPO0lBQ1BDLFNBQVM7SUFDVEM7UUFDSSxPQUFPO1lBQ0g7Z0JBQUVDLEtBQUs7WUFBSTtTQUNkO0lBQ0w7SUFDQUMsWUFBVyxFQUFFTCxjQUFjLEVBQUU7UUFDekIsT0FBTztZQUFDO1lBQUtOLDZEQUFlQSxDQUFDLElBQUksQ0FBQ1ksT0FBTyxDQUFDTixjQUFjLEVBQUVBO1lBQWlCO1NBQUU7SUFDakY7SUFDQU87UUFDSSxPQUFPO1lBQ0hDLGNBQWMsSUFBTSxDQUFDLEVBQUVDLFFBQVEsRUFBRTtvQkFDN0IsT0FBT0EsU0FBU0MsT0FBTyxDQUFDLElBQUksQ0FBQ2IsSUFBSTtnQkFDckM7UUFDSjtJQUNKO0lBQ0FjO1FBQ0ksT0FBTztZQUNILGFBQWEsSUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDRCxZQUFZO1FBQ3hEO0lBQ0o7QUFDSjtBQUUyQyxDQUMzQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tcGFyYWdyYXBoL2Rpc3QvaW5kZXguanM/OGJhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBQYXJhZ3JhcGggPSBOb2RlLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAncGFyYWdyYXBoJyxcclxuICAgIHByaW9yaXR5OiAxMDAwLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBncm91cDogJ2Jsb2NrJyxcclxuICAgIGNvbnRlbnQ6ICdpbmxpbmUqJyxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IHRhZzogJ3AnIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ3AnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldFBhcmFncmFwaDogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE5vZGUodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdNb2QtQWx0LTAnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5zZXRQYXJhZ3JhcGgoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IFBhcmFncmFwaCwgUGFyYWdyYXBoIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vZGUiLCJtZXJnZUF0dHJpYnV0ZXMiLCJQYXJhZ3JhcGgiLCJjcmVhdGUiLCJuYW1lIiwicHJpb3JpdHkiLCJhZGRPcHRpb25zIiwiSFRNTEF0dHJpYnV0ZXMiLCJncm91cCIsImNvbnRlbnQiLCJwYXJzZUhUTUwiLCJ0YWciLCJyZW5kZXJIVE1MIiwib3B0aW9ucyIsImFkZENvbW1hbmRzIiwic2V0UGFyYWdyYXBoIiwiY29tbWFuZHMiLCJzZXROb2RlIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJlZGl0b3IiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-paragraph/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-strike/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Strike: () => (/* binding */ Strike),\n/* harmony export */   \"default\": () => (/* binding */ Strike),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/;\nconst pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g;\nconst Strike = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"strike\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"s\"\n            },\n            {\n                tag: \"del\"\n            },\n            {\n                tag: \"strike\"\n            },\n            {\n                style: \"text-decoration\",\n                consuming: false,\n                getAttrs: (style)=>style.includes(\"line-through\") ? {} : false\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"s\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setStrike: ()=>({ commands })=>{\n                    return commands.setMark(this.name);\n                },\n            toggleStrike: ()=>({ commands })=>{\n                    return commands.toggleMark(this.name);\n                },\n            unsetStrike: ()=>({ commands })=>{\n                    return commands.unsetMark(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        const shortcuts = {};\n        if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.isMacOS)()) {\n            shortcuts[\"Mod-Shift-s\"] = ()=>this.editor.commands.toggleStrike();\n        } else {\n            shortcuts[\"Ctrl-Shift-s\"] = ()=>this.editor.commands.toggleStrike();\n        }\n        return shortcuts;\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: inputRegex,\n                type: this.type\n            })\n        ];\n    },\n    addPasteRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: pasteRegex,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tc3RyaWtlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEY7QUFFNUYsTUFBTUssYUFBYTtBQUNuQixNQUFNQyxhQUFhO0FBQ25CLE1BQU1DLFNBQVNQLDhDQUFJQSxDQUFDUSxNQUFNLENBQUM7SUFDdkJDLE1BQU07SUFDTkM7UUFDSSxPQUFPO1lBQ0hDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUM7UUFDSSxPQUFPO1lBQ0g7Z0JBQ0lDLEtBQUs7WUFDVDtZQUNBO2dCQUNJQSxLQUFLO1lBQ1Q7WUFDQTtnQkFDSUEsS0FBSztZQUNUO1lBQ0E7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFdBQVc7Z0JBQ1hDLFVBQVVGLENBQUFBLFFBQVVBLE1BQU1HLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJO1lBQzlEO1NBQ0g7SUFDTDtJQUNBQyxZQUFXLEVBQUVQLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBS1YsNkRBQWVBLENBQUMsSUFBSSxDQUFDa0IsT0FBTyxDQUFDUixjQUFjLEVBQUVBO1lBQWlCO1NBQUU7SUFDakY7SUFDQVM7UUFDSSxPQUFPO1lBQ0hDLFdBQVcsSUFBTSxDQUFDLEVBQUVDLFFBQVEsRUFBRTtvQkFDMUIsT0FBT0EsU0FBU0MsT0FBTyxDQUFDLElBQUksQ0FBQ2QsSUFBSTtnQkFDckM7WUFDQWUsY0FBYyxJQUFNLENBQUMsRUFBRUYsUUFBUSxFQUFFO29CQUM3QixPQUFPQSxTQUFTRyxVQUFVLENBQUMsSUFBSSxDQUFDaEIsSUFBSTtnQkFDeEM7WUFDQWlCLGFBQWEsSUFBTSxDQUFDLEVBQUVKLFFBQVEsRUFBRTtvQkFDNUIsT0FBT0EsU0FBU0ssU0FBUyxDQUFDLElBQUksQ0FBQ2xCLElBQUk7Z0JBQ3ZDO1FBQ0o7SUFDSjtJQUNBbUI7UUFDSSxNQUFNQyxZQUFZLENBQUM7UUFDbkIsSUFBSTNCLHFEQUFPQSxJQUFJO1lBQ1gyQixTQUFTLENBQUMsY0FBYyxHQUFHLElBQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNSLFFBQVEsQ0FBQ0UsWUFBWTtRQUN0RSxPQUNLO1lBQ0RLLFNBQVMsQ0FBQyxlQUFlLEdBQUcsSUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ1IsUUFBUSxDQUFDRSxZQUFZO1FBQ3ZFO1FBQ0EsT0FBT0s7SUFDWDtJQUNBRTtRQUNJLE9BQU87WUFDSDVCLDJEQUFhQSxDQUFDO2dCQUNWNkIsTUFBTTNCO2dCQUNONEIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7U0FDSDtJQUNMO0lBQ0FDO1FBQ0ksT0FBTztZQUNIOUIsMkRBQWFBLENBQUM7Z0JBQ1Y0QixNQUFNMUI7Z0JBQ04yQixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNuQjtTQUNIO0lBQ0w7QUFDSjtBQUU2RCxDQUM3RCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tc3RyaWtlL2Rpc3QvaW5kZXguanM/OGU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXJrLCBtZXJnZUF0dHJpYnV0ZXMsIGlzTWFjT1MsIG1hcmtJbnB1dFJ1bGUsIG1hcmtQYXN0ZVJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBpbnB1dFJlZ2V4ID0gLyg/Ol58XFxzKSgoPzp+fikoKD86W15+XSspKSg/On5+KSkkLztcclxuY29uc3QgcGFzdGVSZWdleCA9IC8oPzpefFxccykoKD86fn4pKCg/Oltefl0rKSkoPzp+fikpL2c7XHJcbmNvbnN0IFN0cmlrZSA9IE1hcmsuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdzdHJpa2UnLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFnOiAncycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ2RlbCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ3N0cmlrZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiAndGV4dC1kZWNvcmF0aW9uJyxcclxuICAgICAgICAgICAgICAgIGNvbnN1bWluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogc3R5bGUgPT4gKHN0eWxlLmluY2x1ZGVzKCdsaW5lLXRocm91Z2gnKSA/IHt9IDogZmFsc2UpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWydzJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRTdHJpa2U6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZVN0cmlrZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5zZXRTdHJpa2U6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy51bnNldE1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIGNvbnN0IHNob3J0Y3V0cyA9IHt9O1xyXG4gICAgICAgIGlmIChpc01hY09TKCkpIHtcclxuICAgICAgICAgICAgc2hvcnRjdXRzWydNb2QtU2hpZnQtcyddID0gKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlU3RyaWtlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzaG9ydGN1dHNbJ0N0cmwtU2hpZnQtcyddID0gKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlU3RyaWtlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaG9ydGN1dHM7XHJcbiAgICB9LFxyXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IGlucHV0UmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHBhc3RlUmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuZXhwb3J0IHsgU3RyaWtlLCBTdHJpa2UgYXMgZGVmYXVsdCwgaW5wdXRSZWdleCwgcGFzdGVSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTWFyayIsIm1lcmdlQXR0cmlidXRlcyIsImlzTWFjT1MiLCJtYXJrSW5wdXRSdWxlIiwibWFya1Bhc3RlUnVsZSIsImlucHV0UmVnZXgiLCJwYXN0ZVJlZ2V4IiwiU3RyaWtlIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJIVE1MQXR0cmlidXRlcyIsInBhcnNlSFRNTCIsInRhZyIsInN0eWxlIiwiY29uc3VtaW5nIiwiZ2V0QXR0cnMiLCJpbmNsdWRlcyIsInJlbmRlckhUTUwiLCJvcHRpb25zIiwiYWRkQ29tbWFuZHMiLCJzZXRTdHJpa2UiLCJjb21tYW5kcyIsInNldE1hcmsiLCJ0b2dnbGVTdHJpa2UiLCJ0b2dnbGVNYXJrIiwidW5zZXRTdHJpa2UiLCJ1bnNldE1hcmsiLCJhZGRLZXlib2FyZFNob3J0Y3V0cyIsInNob3J0Y3V0cyIsImVkaXRvciIsImFkZElucHV0UnVsZXMiLCJmaW5kIiwidHlwZSIsImFkZFBhc3RlUnVsZXMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-text/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-text/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   \"default\": () => (/* binding */ Text)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst Text = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"text\",\n    group: \"inline\"\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGV4dC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvQztBQUVwQyxNQUFNQyxPQUFPRCw4Q0FBSUEsQ0FBQ0UsTUFBTSxDQUFDO0lBQ3JCQyxNQUFNO0lBQ05DLE9BQU87QUFDWDtBQUVpQyxDQUNqQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGV4dC9kaXN0L2luZGV4LmpzPzllNDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbmNvbnN0IFRleHQgPSBOb2RlLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAndGV4dCcsXHJcbiAgICBncm91cDogJ2lubGluZScsXHJcbn0pO1xuXG5leHBvcnQgeyBUZXh0LCBUZXh0IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vZGUiLCJUZXh0IiwiY3JlYXRlIiwibmFtZSIsImdyb3VwIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@tiptap/pm/commands/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoJoin: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.autoJoin),\n/* harmony export */   baseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.baseKeymap),\n/* harmony export */   chainCommands: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.chainCommands),\n/* harmony export */   createParagraphNear: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.createParagraphNear),\n/* harmony export */   deleteSelection: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.deleteSelection),\n/* harmony export */   exitCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.exitCode),\n/* harmony export */   joinBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinBackward),\n/* harmony export */   joinDown: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinDown),\n/* harmony export */   joinForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinForward),\n/* harmony export */   joinTextblockBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockBackward),\n/* harmony export */   joinTextblockForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockForward),\n/* harmony export */   joinUp: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinUp),\n/* harmony export */   lift: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.lift),\n/* harmony export */   liftEmptyBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.liftEmptyBlock),\n/* harmony export */   macBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.macBaseKeymap),\n/* harmony export */   newlineInCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.newlineInCode),\n/* harmony export */   pcBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.pcBaseKeymap),\n/* harmony export */   selectAll: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectAll),\n/* harmony export */   selectNodeBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeBackward),\n/* harmony export */   selectNodeForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeForward),\n/* harmony export */   selectParentNode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectParentNode),\n/* harmony export */   selectTextblockEnd: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockEnd),\n/* harmony export */   selectTextblockStart: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockStart),\n/* harmony export */   setBlockType: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.setBlockType),\n/* harmony export */   splitBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlock),\n/* harmony export */   splitBlockAs: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockAs),\n/* harmony export */   splitBlockKeepMarks: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockKeepMarks),\n/* harmony export */   toggleMark: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.toggleMark),\n/* harmony export */   wrapIn: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.wrapIn)\n/* harmony export */ });\n/* harmony import */ var prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-commands */ \"(ssr)/./node_modules/prosemirror-commands/dist/index.js\");\n// commands/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9jb21tYW5kcy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9CQUFvQjtBQUNpQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL2NvbW1hbmRzL2Rpc3QvaW5kZXguanM/OTEyYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb21tYW5kcy9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLWNvbW1hbmRzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tiptap/pm/dropcursor/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dropCursor: () => (/* reexport safe */ prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_0__.dropCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-dropcursor */ \"(ssr)/./node_modules/prosemirror-dropcursor/dist/index.js\");\n// dropcursor/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9kcm9wY3Vyc29yL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzQkFBc0I7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9kcm9wY3Vyc29yL2Rpc3QvaW5kZXguanM/YmQzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBkcm9wY3Vyc29yL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItZHJvcGN1cnNvclwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/gapcursor/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.GapCursor),\n/* harmony export */   gapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-gapcursor */ \"(ssr)/./node_modules/prosemirror-gapcursor/dist/index.js\");\n// gapcursor/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9nYXBjdXJzb3IvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxQkFBcUI7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9nYXBjdXJzb3IvZGlzdC9pbmRleC5qcz9jMGIwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGdhcGN1cnNvci9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLWdhcGN1cnNvclwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/history/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@tiptap/pm/history/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeHistory: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.closeHistory),\n/* harmony export */   history: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.history),\n/* harmony export */   redo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redo),\n/* harmony export */   redoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redoDepth),\n/* harmony export */   undo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undo),\n/* harmony export */   undoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undoDepth)\n/* harmony export */ });\n/* harmony import */ var prosemirror_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-history */ \"(ssr)/./node_modules/prosemirror-history/dist/index.js\");\n// history/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9oaXN0b3J5L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLG1CQUFtQjtBQUNpQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL2hpc3RvcnkvZGlzdC9pbmRleC5qcz8xNjY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGhpc3RvcnkvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1oaXN0b3J5XCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/history/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tiptap/pm/keymap/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keydownHandler: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keydownHandler),\n/* harmony export */   keymap: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keymap)\n/* harmony export */ });\n/* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-keymap */ \"(ssr)/./node_modules/prosemirror-keymap/dist/index.js\");\n// keymap/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9rZXltYXAvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrQkFBa0I7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9rZXltYXAvZGlzdC9pbmRleC5qcz80YmViIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGtleW1hcC9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLWtleW1hcFwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/model/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/model/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentMatch: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ContentMatch),\n/* harmony export */   DOMParser: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser),\n/* harmony export */   DOMSerializer: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer),\n/* harmony export */   Fragment: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   Mark: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark),\n/* harmony export */   MarkType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.MarkType),\n/* harmony export */   Node: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Node),\n/* harmony export */   NodeRange: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange),\n/* harmony export */   NodeType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeType),\n/* harmony export */   ReplaceError: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ReplaceError),\n/* harmony export */   ResolvedPos: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ResolvedPos),\n/* harmony export */   Schema: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Schema),\n/* harmony export */   Slice: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice)\n/* harmony export */ });\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n// model/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9tb2RlbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUJBQWlCO0FBQ2lCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1ibG9nLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvcG0vbW9kZWwvZGlzdC9pbmRleC5qcz9hNWEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIG1vZGVsL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItbW9kZWxcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/model/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/pm/schema-list/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addListNodes: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.addListNodes),\n/* harmony export */   bulletList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.bulletList),\n/* harmony export */   liftListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.liftListItem),\n/* harmony export */   listItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.listItem),\n/* harmony export */   orderedList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.orderedList),\n/* harmony export */   sinkListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.sinkListItem),\n/* harmony export */   splitListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.splitListItem),\n/* harmony export */   wrapInList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.wrapInList)\n/* harmony export */ });\n/* harmony import */ var prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-schema-list */ \"(ssr)/./node_modules/prosemirror-schema-list/dist/index.js\");\n// schema-list/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zY2hlbWEtbGlzdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHVCQUF1QjtBQUNpQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL3NjaGVtYS1saXN0L2Rpc3QvaW5kZXguanM/NTRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzY2hlbWEtbGlzdC9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLXNjaGVtYS1saXN0XCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/state/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/state/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AllSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.AllSelection),\n/* harmony export */   EditorState: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorState),\n/* harmony export */   NodeSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection),\n/* harmony export */   Plugin: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin),\n/* harmony export */   PluginKey: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey),\n/* harmony export */   Selection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection),\n/* harmony export */   SelectionRange: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.SelectionRange),\n/* harmony export */   TextSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection),\n/* harmony export */   Transaction: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n// state/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zdGF0ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxpQkFBaUI7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zdGF0ZS9kaXN0L2luZGV4LmpzPzcyZWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3RhdGUvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1zdGF0ZVwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/transform/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddMarkStep),\n/* harmony export */   AddNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddNodeMarkStep),\n/* harmony export */   AttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AttrStep),\n/* harmony export */   DocAttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.DocAttrStep),\n/* harmony export */   MapResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.MapResult),\n/* harmony export */   Mapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Mapping),\n/* harmony export */   RemoveMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveMarkStep),\n/* harmony export */   RemoveNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveNodeMarkStep),\n/* harmony export */   ReplaceAroundStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceAroundStep),\n/* harmony export */   ReplaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceStep),\n/* harmony export */   Step: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Step),\n/* harmony export */   StepMap: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepMap),\n/* harmony export */   StepResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepResult),\n/* harmony export */   Transform: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Transform),\n/* harmony export */   TransformError: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.TransformError),\n/* harmony export */   canJoin: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin),\n/* harmony export */   canSplit: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit),\n/* harmony export */   dropPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.dropPoint),\n/* harmony export */   findWrapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.findWrapping),\n/* harmony export */   insertPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.insertPoint),\n/* harmony export */   joinPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.joinPoint),\n/* harmony export */   liftTarget: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget),\n/* harmony export */   replaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)\n/* harmony export */ });\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-transform */ \"(ssr)/./node_modules/prosemirror-transform/dist/index.js\");\n// transform/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS90cmFuc2Zvcm0vZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxQkFBcUI7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWJsb2cvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS90cmFuc2Zvcm0vZGlzdC9pbmRleC5qcz84YTRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zZm9ybS9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLXRyYW5zZm9ybVwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/view/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@tiptap/pm/view/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decoration: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.Decoration),\n/* harmony export */   DecorationSet: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.DecorationSet),\n/* harmony export */   EditorView: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView),\n/* harmony export */   __endComposition: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__endComposition),\n/* harmony export */   __parseFromClipboard: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__parseFromClipboard),\n/* harmony export */   __serializeForClipboard: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__serializeForClipboard)\n/* harmony export */ });\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n// view/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS92aWV3L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLGdCQUFnQjtBQUNpQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYmxvZy8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL3ZpZXcvZGlzdC9pbmRleC5qcz83NTkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHZpZXcvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci12aWV3XCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/view/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/react/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@tiptap/react/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   CommandManager: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.CommandManager),\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   EditorConsumer: () => (/* binding */ EditorConsumer),\n/* harmony export */   EditorContent: () => (/* binding */ EditorContent),\n/* harmony export */   EditorContext: () => (/* binding */ EditorContext),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   Extension: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Extension),\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   InputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.InputRule),\n/* harmony export */   Mark: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Mark),\n/* harmony export */   Node: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Node),\n/* harmony export */   NodeView: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView),\n/* harmony export */   NodeViewContent: () => (/* binding */ NodeViewContent),\n/* harmony export */   NodeViewWrapper: () => (/* binding */ NodeViewWrapper),\n/* harmony export */   PasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.PasteRule),\n/* harmony export */   PureEditorContent: () => (/* binding */ PureEditorContent),\n/* harmony export */   ReactNodeViewRenderer: () => (/* binding */ ReactNodeViewRenderer),\n/* harmony export */   ReactRenderer: () => (/* binding */ ReactRenderer),\n/* harmony export */   Tracker: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Tracker),\n/* harmony export */   callOrReturn: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createChainableState),\n/* harmony export */   createDocument: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createDocument),\n/* harmony export */   createNodeFromContent: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.deleteProps),\n/* harmony export */   elementFromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.escapeForRegEx),\n/* harmony export */   extensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.extensions),\n/* harmony export */   findChildren: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildren),\n/* harmony export */   findChildrenInRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findDuplicates),\n/* harmony export */   findParentNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.fromString),\n/* harmony export */   generateHTML: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateHTML),\n/* harmony export */   generateJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateJSON),\n/* harmony export */   generateText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateText),\n/* harmony export */   getAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkRange),\n/* harmony export */   getMarkType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkType),\n/* harmony export */   getMarksBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSplittedAttributes),\n/* harmony export */   getText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getText),\n/* harmony export */   getTextBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.inputRulesPlugin),\n/* harmony export */   isActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isActive),\n/* harmony export */   isAtEndOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isFunction),\n/* harmony export */   isList: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isList),\n/* harmony export */   isMacOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMacOS),\n/* harmony export */   isMarkActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMarkActive),\n/* harmony export */   isNodeActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeSelection),\n/* harmony export */   isNumber: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNumber),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isPlainObject),\n/* harmony export */   isRegExp: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isRegExp),\n/* harmony export */   isString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isString),\n/* harmony export */   isTextSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isTextSelection),\n/* harmony export */   isiOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isiOS),\n/* harmony export */   markInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markInputRule),\n/* harmony export */   markPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeDeep),\n/* harmony export */   minMax: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.minMax),\n/* harmony export */   nodeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.resolveFocusPosition),\n/* harmony export */   selectionToInsertionEnd: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.splitExtensions),\n/* harmony export */   textInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textInputRule),\n/* harmony export */   textPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textblockTypeInputRule),\n/* harmony export */   useCurrentEditor: () => (/* binding */ useCurrentEditor),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   wrappingInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-bubble-menu */ \"(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-floating-menu */ \"(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\");\n\n\n\n\n\n\nconst Portals = ({ renderers })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, Object.entries(renderers).map(([key, renderer])=>{\n        return /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(renderer.reactElement, renderer.element, key);\n    }));\n};\nclass PureEditorContent extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(props){\n        super(props);\n        this.editorContentRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        this.initialized = false;\n        this.state = {\n            renderers: {}\n        };\n    }\n    componentDidMount() {\n        this.init();\n    }\n    componentDidUpdate() {\n        this.init();\n    }\n    init() {\n        const { editor } = this.props;\n        if (editor && editor.options.element) {\n            if (editor.contentComponent) {\n                return;\n            }\n            const element = this.editorContentRef.current;\n            element.append(...editor.options.element.childNodes);\n            editor.setOptions({\n                element\n            });\n            editor.contentComponent = this;\n            editor.createNodeViews();\n            this.initialized = true;\n        }\n    }\n    maybeFlushSync(fn) {\n        // Avoid calling flushSync until the editor is initialized.\n        // Initialization happens during the componentDidMount or componentDidUpdate\n        // lifecycle methods, and React doesn't allow calling flushSync from inside\n        // a lifecycle method.\n        if (this.initialized) {\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(fn);\n        } else {\n            fn();\n        }\n    }\n    setRenderer(id, renderer) {\n        this.maybeFlushSync(()=>{\n            this.setState(({ renderers })=>({\n                    renderers: {\n                        ...renderers,\n                        [id]: renderer\n                    }\n                }));\n        });\n    }\n    removeRenderer(id) {\n        this.maybeFlushSync(()=>{\n            this.setState(({ renderers })=>{\n                const nextRenderers = {\n                    ...renderers\n                };\n                delete nextRenderers[id];\n                return {\n                    renderers: nextRenderers\n                };\n            });\n        });\n    }\n    componentWillUnmount() {\n        const { editor } = this.props;\n        if (!editor) {\n            return;\n        }\n        this.initialized = false;\n        if (!editor.isDestroyed) {\n            editor.view.setProps({\n                nodeViews: {}\n            });\n        }\n        editor.contentComponent = null;\n        if (!editor.options.element.firstChild) {\n            return;\n        }\n        const newElement = document.createElement(\"div\");\n        newElement.append(...editor.options.element.childNodes);\n        editor.setOptions({\n            element: newElement\n        });\n    }\n    render() {\n        const { editor, ...rest } = this.props;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ref: this.editorContentRef,\n            ...rest\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Portals, {\n            renderers: this.state.renderers\n        }));\n    }\n}\n// EditorContent should be re-created whenever the Editor instance changes\nconst EditorContentWithKey = (props)=>{\n    const key = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return Math.floor(Math.random() * 0xFFFFFFFF).toString();\n    }, [\n        props.editor\n    ]);\n    // Can't use JSX here because it conflicts with the type definition of Vue's JSX, so use createElement\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PureEditorContent, {\n        key,\n        ...props\n    });\n};\nconst EditorContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(EditorContentWithKey);\nclass Editor extends _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Editor {\n    constructor(){\n        super(...arguments);\n        this.contentComponent = null;\n    }\n}\nfunction useForceUpdate() {\n    const [, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    return ()=>setValue((value)=>value + 1);\n}\nconst useEditor = (options = {}, deps = [])=>{\n    const [editor, setEditor] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const forceUpdate = useForceUpdate();\n    const { onBeforeCreate, onBlur, onCreate, onDestroy, onFocus, onSelectionUpdate, onTransaction, onUpdate } = options;\n    const onBeforeCreateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onBeforeCreate);\n    const onBlurRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onBlur);\n    const onCreateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onCreate);\n    const onDestroyRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onDestroy);\n    const onFocusRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onFocus);\n    const onSelectionUpdateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onSelectionUpdate);\n    const onTransactionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onTransaction);\n    const onUpdateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onUpdate);\n    // This effect will handle updating the editor instance\n    // when the event handlers change.\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!editor) {\n            return;\n        }\n        if (onBeforeCreate) {\n            editor.off(\"beforeCreate\", onBeforeCreateRef.current);\n            editor.on(\"beforeCreate\", onBeforeCreate);\n            onBeforeCreateRef.current = onBeforeCreate;\n        }\n        if (onBlur) {\n            editor.off(\"blur\", onBlurRef.current);\n            editor.on(\"blur\", onBlur);\n            onBlurRef.current = onBlur;\n        }\n        if (onCreate) {\n            editor.off(\"create\", onCreateRef.current);\n            editor.on(\"create\", onCreate);\n            onCreateRef.current = onCreate;\n        }\n        if (onDestroy) {\n            editor.off(\"destroy\", onDestroyRef.current);\n            editor.on(\"destroy\", onDestroy);\n            onDestroyRef.current = onDestroy;\n        }\n        if (onFocus) {\n            editor.off(\"focus\", onFocusRef.current);\n            editor.on(\"focus\", onFocus);\n            onFocusRef.current = onFocus;\n        }\n        if (onSelectionUpdate) {\n            editor.off(\"selectionUpdate\", onSelectionUpdateRef.current);\n            editor.on(\"selectionUpdate\", onSelectionUpdate);\n            onSelectionUpdateRef.current = onSelectionUpdate;\n        }\n        if (onTransaction) {\n            editor.off(\"transaction\", onTransactionRef.current);\n            editor.on(\"transaction\", onTransaction);\n            onTransactionRef.current = onTransaction;\n        }\n        if (onUpdate) {\n            editor.off(\"update\", onUpdateRef.current);\n            editor.on(\"update\", onUpdate);\n            onUpdateRef.current = onUpdate;\n        }\n    }, [\n        onBeforeCreate,\n        onBlur,\n        onCreate,\n        onDestroy,\n        onFocus,\n        onSelectionUpdate,\n        onTransaction,\n        onUpdate,\n        editor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isMounted = true;\n        const instance = new Editor(options);\n        setEditor(instance);\n        instance.on(\"transaction\", ()=>{\n            requestAnimationFrame(()=>{\n                requestAnimationFrame(()=>{\n                    if (isMounted) {\n                        forceUpdate();\n                    }\n                });\n            });\n        });\n        return ()=>{\n            isMounted = false;\n        };\n    }, deps);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            editor === null || editor === void 0 ? void 0 : editor.destroy();\n        };\n    }, [\n        editor\n    ]);\n    return editor;\n};\nconst EditorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    editor: null\n});\nconst EditorConsumer = EditorContext.Consumer;\nconst useCurrentEditor = ()=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorContext);\nconst EditorProvider = ({ children, slotAfter, slotBefore, ...editorOptions })=>{\n    const editor = useEditor(editorOptions);\n    if (!editor) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContext.Provider, {\n        value: {\n            editor\n        }\n    }, slotBefore, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorConsumer, null, ({ editor: currentEditor })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContent, {\n            editor: currentEditor\n        })), children, slotAfter);\n};\nconst BubbleMenu = (props)=>{\n    const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { editor: currentEditor } = useCurrentEditor();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a;\n        if (!element) {\n            return;\n        }\n        if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\n            return;\n        }\n        const { pluginKey = \"bubbleMenu\", editor, tippyOptions = {}, updateDelay, shouldShow = null } = props;\n        const menuEditor = editor || currentEditor;\n        if (!menuEditor) {\n            console.warn(\"BubbleMenu component is not rendered inside of an editor component or does not have editor prop.\");\n            return;\n        }\n        const plugin = (0,_tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__.BubbleMenuPlugin)({\n            updateDelay,\n            editor: menuEditor,\n            element,\n            pluginKey,\n            shouldShow,\n            tippyOptions\n        });\n        menuEditor.registerPlugin(plugin);\n        return ()=>menuEditor.unregisterPlugin(pluginKey);\n    }, [\n        props.editor,\n        currentEditor,\n        element\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: setElement,\n        className: props.className,\n        style: {\n            visibility: \"hidden\"\n        }\n    }, props.children);\n};\nconst FloatingMenu = (props)=>{\n    const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { editor: currentEditor } = useCurrentEditor();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a;\n        if (!element) {\n            return;\n        }\n        if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\n            return;\n        }\n        const { pluginKey = \"floatingMenu\", editor, tippyOptions = {}, shouldShow = null } = props;\n        const menuEditor = editor || currentEditor;\n        if (!menuEditor) {\n            console.warn(\"FloatingMenu component is not rendered inside of an editor component or does not have editor prop.\");\n            return;\n        }\n        const plugin = (0,_tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__.FloatingMenuPlugin)({\n            pluginKey,\n            editor: menuEditor,\n            element,\n            tippyOptions,\n            shouldShow\n        });\n        menuEditor.registerPlugin(plugin);\n        return ()=>menuEditor.unregisterPlugin(pluginKey);\n    }, [\n        props.editor,\n        currentEditor,\n        element\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: setElement,\n        className: props.className,\n        style: {\n            visibility: \"hidden\"\n        }\n    }, props.children);\n};\nconst ReactNodeViewContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    onDragStart: undefined\n});\nconst useReactNodeView = ()=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ReactNodeViewContext);\nconst NodeViewContent = (props)=>{\n    const Tag = props.as || \"div\";\n    const { nodeViewContentRef } = useReactNodeView();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, {\n        ...props,\n        ref: nodeViewContentRef,\n        \"data-node-view-content\": \"\",\n        style: {\n            whiteSpace: \"pre-wrap\",\n            ...props.style\n        }\n    });\n};\nconst NodeViewWrapper = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, ref)=>{\n    const { onDragStart } = useReactNodeView();\n    const Tag = props.as || \"div\";\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, {\n        ...props,\n        ref: ref,\n        \"data-node-view-wrapper\": \"\",\n        onDragStart: onDragStart,\n        style: {\n            whiteSpace: \"normal\",\n            ...props.style\n        }\n    });\n});\nfunction isClassComponent(Component) {\n    return !!(typeof Component === \"function\" && Component.prototype && Component.prototype.isReactComponent);\n}\nfunction isForwardRefComponent(Component) {\n    var _a;\n    return !!(typeof Component === \"object\" && ((_a = Component.$$typeof) === null || _a === void 0 ? void 0 : _a.toString()) === \"Symbol(react.forward_ref)\");\n}\nclass ReactRenderer {\n    constructor(component, { editor, props = {}, as = \"div\", className = \"\", attrs }){\n        this.ref = null;\n        this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString();\n        this.component = component;\n        this.editor = editor;\n        this.props = props;\n        this.element = document.createElement(as);\n        this.element.classList.add(\"react-renderer\");\n        if (className) {\n            this.element.classList.add(...className.split(\" \"));\n        }\n        if (attrs) {\n            Object.keys(attrs).forEach((key)=>{\n                this.element.setAttribute(key, attrs[key]);\n            });\n        }\n        this.render();\n    }\n    render() {\n        var _a, _b;\n        const Component = this.component;\n        const props = this.props;\n        if (isClassComponent(Component) || isForwardRefComponent(Component)) {\n            props.ref = (ref)=>{\n                this.ref = ref;\n            };\n        }\n        this.reactElement = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n            ...props\n        });\n        (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) === null || _b === void 0 ? void 0 : _b.setRenderer(this.id, this);\n    }\n    updateProps(props = {}) {\n        this.props = {\n            ...this.props,\n            ...props\n        };\n        this.render();\n    }\n    destroy() {\n        var _a, _b;\n        (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) === null || _b === void 0 ? void 0 : _b.removeRenderer(this.id);\n    }\n}\nclass ReactNodeView extends _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView {\n    mount() {\n        const props = {\n            editor: this.editor,\n            node: this.node,\n            decorations: this.decorations,\n            selected: false,\n            extension: this.extension,\n            getPos: ()=>this.getPos(),\n            updateAttributes: (attributes = {})=>this.updateAttributes(attributes),\n            deleteNode: ()=>this.deleteNode()\n        };\n        if (!this.component.displayName) {\n            const capitalizeFirstChar = (string)=>{\n                return string.charAt(0).toUpperCase() + string.substring(1);\n            };\n            this.component.displayName = capitalizeFirstChar(this.extension.name);\n        }\n        const ReactNodeViewProvider = (componentProps)=>{\n            const Component = this.component;\n            const onDragStart = this.onDragStart.bind(this);\n            const nodeViewContentRef = (element)=>{\n                if (element && this.contentDOMElement && element.firstChild !== this.contentDOMElement) {\n                    element.appendChild(this.contentDOMElement);\n                }\n            };\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReactNodeViewContext.Provider, {\n                value: {\n                    onDragStart,\n                    nodeViewContentRef\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n                ...componentProps\n            })));\n        };\n        ReactNodeViewProvider.displayName = \"ReactNodeView\";\n        this.contentDOMElement = this.node.isLeaf ? null : document.createElement(this.node.isInline ? \"span\" : \"div\");\n        if (this.contentDOMElement) {\n            // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari\n            // With this fix it seems to work fine\n            // See: https://github.com/ueberdosis/tiptap/issues/1197\n            this.contentDOMElement.style.whiteSpace = \"inherit\";\n        }\n        let as = this.node.isInline ? \"span\" : \"div\";\n        if (this.options.as) {\n            as = this.options.as;\n        }\n        const { className = \"\" } = this.options;\n        this.handleSelectionUpdate = this.handleSelectionUpdate.bind(this);\n        this.editor.on(\"selectionUpdate\", this.handleSelectionUpdate);\n        this.renderer = new ReactRenderer(ReactNodeViewProvider, {\n            editor: this.editor,\n            props,\n            as,\n            className: `node-${this.node.type.name} ${className}`.trim(),\n            attrs: this.options.attrs\n        });\n    }\n    get dom() {\n        var _a;\n        if (this.renderer.element.firstElementChild && !((_a = this.renderer.element.firstElementChild) === null || _a === void 0 ? void 0 : _a.hasAttribute(\"data-node-view-wrapper\"))) {\n            throw Error(\"Please use the NodeViewWrapper component for your node view.\");\n        }\n        return this.renderer.element;\n    }\n    get contentDOM() {\n        if (this.node.isLeaf) {\n            return null;\n        }\n        return this.contentDOMElement;\n    }\n    handleSelectionUpdate() {\n        const { from, to } = this.editor.state.selection;\n        if (from <= this.getPos() && to >= this.getPos() + this.node.nodeSize) {\n            if (this.renderer.props.selected) {\n                return;\n            }\n            this.selectNode();\n        } else {\n            if (!this.renderer.props.selected) {\n                return;\n            }\n            this.deselectNode();\n        }\n    }\n    update(node, decorations) {\n        const updateProps = (props)=>{\n            this.renderer.updateProps(props);\n        };\n        if (node.type !== this.node.type) {\n            return false;\n        }\n        if (typeof this.options.update === \"function\") {\n            const oldNode = this.node;\n            const oldDecorations = this.decorations;\n            this.node = node;\n            this.decorations = decorations;\n            return this.options.update({\n                oldNode,\n                oldDecorations,\n                newNode: node,\n                newDecorations: decorations,\n                updateProps: ()=>updateProps({\n                        node,\n                        decorations\n                    })\n            });\n        }\n        if (node === this.node && this.decorations === decorations) {\n            return true;\n        }\n        this.node = node;\n        this.decorations = decorations;\n        updateProps({\n            node,\n            decorations\n        });\n        return true;\n    }\n    selectNode() {\n        this.renderer.updateProps({\n            selected: true\n        });\n        this.renderer.element.classList.add(\"ProseMirror-selectednode\");\n    }\n    deselectNode() {\n        this.renderer.updateProps({\n            selected: false\n        });\n        this.renderer.element.classList.remove(\"ProseMirror-selectednode\");\n    }\n    destroy() {\n        this.renderer.destroy();\n        this.editor.off(\"selectionUpdate\", this.handleSelectionUpdate);\n        this.contentDOMElement = null;\n    }\n}\nfunction ReactNodeViewRenderer(component, options) {\n    return (props)=>{\n        // try to get the parent component\n        // this is important for vue devtools to show the component hierarchy correctly\n        // maybe it’s `undefined` because <editor-content> isn’t rendered yet\n        if (!props.editor.contentComponent) {\n            return {};\n        }\n        return new ReactNodeView(component, props, options);\n    };\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/starter-kit/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@tiptap/starter-kit/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StarterKit: () => (/* binding */ StarterKit),\n/* harmony export */   \"default\": () => (/* binding */ StarterKit)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_extension_blockquote__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/extension-blockquote */ \"(ssr)/./node_modules/@tiptap/extension-blockquote/dist/index.js\");\n/* harmony import */ var _tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/extension-bold */ \"(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\");\n/* harmony import */ var _tiptap_extension_bullet_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/extension-bullet-list */ \"(ssr)/./node_modules/@tiptap/extension-bullet-list/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-code */ \"(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code_block__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-code-block */ \"(ssr)/./node_modules/@tiptap/extension-code-block/dist/index.js\");\n/* harmony import */ var _tiptap_extension_document__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/extension-document */ \"(ssr)/./node_modules/@tiptap/extension-document/dist/index.js\");\n/* harmony import */ var _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/extension-dropcursor */ \"(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/extension-gapcursor */ \"(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tiptap/extension-hard-break */ \"(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\");\n/* harmony import */ var _tiptap_extension_heading__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tiptap/extension-heading */ \"(ssr)/./node_modules/@tiptap/extension-heading/dist/index.js\");\n/* harmony import */ var _tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tiptap/extension-history */ \"(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\");\n/* harmony import */ var _tiptap_extension_horizontal_rule__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tiptap/extension-horizontal-rule */ \"(ssr)/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js\");\n/* harmony import */ var _tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tiptap/extension-italic */ \"(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\");\n/* harmony import */ var _tiptap_extension_list_item__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tiptap/extension-list-item */ \"(ssr)/./node_modules/@tiptap/extension-list-item/dist/index.js\");\n/* harmony import */ var _tiptap_extension_ordered_list__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tiptap/extension-ordered-list */ \"(ssr)/./node_modules/@tiptap/extension-ordered-list/dist/index.js\");\n/* harmony import */ var _tiptap_extension_paragraph__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tiptap/extension-paragraph */ \"(ssr)/./node_modules/@tiptap/extension-paragraph/dist/index.js\");\n/* harmony import */ var _tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @tiptap/extension-strike */ \"(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\");\n/* harmony import */ var _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @tiptap/extension-text */ \"(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst StarterKit = _tiptap_core__WEBPACK_IMPORTED_MODULE_18__.Extension.create({\n    name: \"starterKit\",\n    addExtensions () {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n        const extensions = [];\n        if (this.options.blockquote !== false) {\n            extensions.push(_tiptap_extension_blockquote__WEBPACK_IMPORTED_MODULE_0__.Blockquote.configure((_a = this.options) === null || _a === void 0 ? void 0 : _a.blockquote));\n        }\n        if (this.options.bold !== false) {\n            extensions.push(_tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__.Bold.configure((_b = this.options) === null || _b === void 0 ? void 0 : _b.bold));\n        }\n        if (this.options.bulletList !== false) {\n            extensions.push(_tiptap_extension_bullet_list__WEBPACK_IMPORTED_MODULE_2__.BulletList.configure((_c = this.options) === null || _c === void 0 ? void 0 : _c.bulletList));\n        }\n        if (this.options.code !== false) {\n            extensions.push(_tiptap_extension_code__WEBPACK_IMPORTED_MODULE_3__.Code.configure((_d = this.options) === null || _d === void 0 ? void 0 : _d.code));\n        }\n        if (this.options.codeBlock !== false) {\n            extensions.push(_tiptap_extension_code_block__WEBPACK_IMPORTED_MODULE_4__.CodeBlock.configure((_e = this.options) === null || _e === void 0 ? void 0 : _e.codeBlock));\n        }\n        if (this.options.document !== false) {\n            extensions.push(_tiptap_extension_document__WEBPACK_IMPORTED_MODULE_5__.Document.configure((_f = this.options) === null || _f === void 0 ? void 0 : _f.document));\n        }\n        if (this.options.dropcursor !== false) {\n            extensions.push(_tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_6__.Dropcursor.configure((_g = this.options) === null || _g === void 0 ? void 0 : _g.dropcursor));\n        }\n        if (this.options.gapcursor !== false) {\n            extensions.push(_tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_7__.Gapcursor.configure((_h = this.options) === null || _h === void 0 ? void 0 : _h.gapcursor));\n        }\n        if (this.options.hardBreak !== false) {\n            extensions.push(_tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_8__.HardBreak.configure((_j = this.options) === null || _j === void 0 ? void 0 : _j.hardBreak));\n        }\n        if (this.options.heading !== false) {\n            extensions.push(_tiptap_extension_heading__WEBPACK_IMPORTED_MODULE_9__.Heading.configure((_k = this.options) === null || _k === void 0 ? void 0 : _k.heading));\n        }\n        if (this.options.history !== false) {\n            extensions.push(_tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__.History.configure((_l = this.options) === null || _l === void 0 ? void 0 : _l.history));\n        }\n        if (this.options.horizontalRule !== false) {\n            extensions.push(_tiptap_extension_horizontal_rule__WEBPACK_IMPORTED_MODULE_11__.HorizontalRule.configure((_m = this.options) === null || _m === void 0 ? void 0 : _m.horizontalRule));\n        }\n        if (this.options.italic !== false) {\n            extensions.push(_tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_12__.Italic.configure((_o = this.options) === null || _o === void 0 ? void 0 : _o.italic));\n        }\n        if (this.options.listItem !== false) {\n            extensions.push(_tiptap_extension_list_item__WEBPACK_IMPORTED_MODULE_13__.ListItem.configure((_p = this.options) === null || _p === void 0 ? void 0 : _p.listItem));\n        }\n        if (this.options.orderedList !== false) {\n            extensions.push(_tiptap_extension_ordered_list__WEBPACK_IMPORTED_MODULE_14__.OrderedList.configure((_q = this.options) === null || _q === void 0 ? void 0 : _q.orderedList));\n        }\n        if (this.options.paragraph !== false) {\n            extensions.push(_tiptap_extension_paragraph__WEBPACK_IMPORTED_MODULE_15__.Paragraph.configure((_r = this.options) === null || _r === void 0 ? void 0 : _r.paragraph));\n        }\n        if (this.options.strike !== false) {\n            extensions.push(_tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_16__.Strike.configure((_s = this.options) === null || _s === void 0 ? void 0 : _s.strike));\n        }\n        if (this.options.text !== false) {\n            extensions.push(_tiptap_extension_text__WEBPACK_IMPORTED_MODULE_17__.Text.configure((_t = this.options) === null || _t === void 0 ? void 0 : _t.text));\n        }\n        return extensions;\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/starter-kit/dist/index.js\n");

/***/ })

};
;