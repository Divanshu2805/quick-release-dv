name: Playwright E2E tests
on: push

jobs:
  playwright-run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
        
      - name: Install dependencies
        run: npm install
      
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test tests --project "chromium"
      
      - name: Clear cache
        run: rm -rf node_modules

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Get Direct Artifact Download Link
        id: artifact_info
        run: |
          # Wait a moment for the artifact to be processed
          sleep 10
          
          # Call GitHub API to get artifact info
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

          # Log the full API response for debugging
          echo "GitHub API Response: $response"
          
          # Check if artifacts exist in the response
          artifact_count=$(echo "$response" | jq '.artifacts | length')
          echo "Number of artifacts found: $artifact_count"

          if [ "$artifact_count" -eq "0" ]; then
            echo "Error: No artifacts found for this run."
            exit 1
          fi

          # Extract the download URL for the first artifact
          download_url=$(echo "$response" | jq -r '.artifacts[0].archive_download_url')
          
          # Validate download URL
          if [ -z "$download_url" ] || [ "$download_url" == "null" ]; then
            echo "Error: Download URL is empty or null."
            exit 1
          fi
          
          # Set the download URL as output
          echo "Download URL set as output."
          echo "::set-output name=download_url::$download_url"
          echo "Artifact Download URL: $download_url"

      - name: Send Slack Notification with Direct Download Link
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Construct the Slack message with the direct download link
          MESSAGE="Playwright tests have completed. [Download the report directly here](${{ steps.artifact_info.outputs.download_url }})."
          
          # Send the message to Slack
          curl -X POST -H 'Content-Type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" $SLACK_WEBHOOK_URL
